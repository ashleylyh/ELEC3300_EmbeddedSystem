
lab3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000034f4  080001e8  080001e8  000101e8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000a38  080036e0  080036e0  000136e0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004118  08004118  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08004118  08004118  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004118  08004118  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004118  08004118  00014118  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800411c  0800411c  0001411c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08004120  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000006c  2000000c  0800412c  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000078  0800412c  00020078  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000588d  00000000  00000000  00020035  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001501  00000000  00000000  000258c2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000608  00000000  00000000  00026dc8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000550  00000000  00000000  000273d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018c86  00000000  00000000  00027920  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00006b93  00000000  00000000  000405a6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000908bc  00000000  00000000  00047139  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000d79f5  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001a78  00000000  00000000  000d7a48  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e8 <__do_global_dtors_aux>:
 80001e8:	b510      	push	{r4, lr}
 80001ea:	4c05      	ldr	r4, [pc, #20]	; (8000200 <__do_global_dtors_aux+0x18>)
 80001ec:	7823      	ldrb	r3, [r4, #0]
 80001ee:	b933      	cbnz	r3, 80001fe <__do_global_dtors_aux+0x16>
 80001f0:	4b04      	ldr	r3, [pc, #16]	; (8000204 <__do_global_dtors_aux+0x1c>)
 80001f2:	b113      	cbz	r3, 80001fa <__do_global_dtors_aux+0x12>
 80001f4:	4804      	ldr	r0, [pc, #16]	; (8000208 <__do_global_dtors_aux+0x20>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	2301      	movs	r3, #1
 80001fc:	7023      	strb	r3, [r4, #0]
 80001fe:	bd10      	pop	{r4, pc}
 8000200:	2000000c 	.word	0x2000000c
 8000204:	00000000 	.word	0x00000000
 8000208:	080036c4 	.word	0x080036c4

0800020c <frame_dummy>:
 800020c:	b508      	push	{r3, lr}
 800020e:	4b03      	ldr	r3, [pc, #12]	; (800021c <frame_dummy+0x10>)
 8000210:	b11b      	cbz	r3, 800021a <frame_dummy+0xe>
 8000212:	4903      	ldr	r1, [pc, #12]	; (8000220 <frame_dummy+0x14>)
 8000214:	4803      	ldr	r0, [pc, #12]	; (8000224 <frame_dummy+0x18>)
 8000216:	f3af 8000 	nop.w
 800021a:	bd08      	pop	{r3, pc}
 800021c:	00000000 	.word	0x00000000
 8000220:	20000010 	.word	0x20000010
 8000224:	080036c4 	.word	0x080036c4

08000228 <__aeabi_dmul>:
 8000228:	b570      	push	{r4, r5, r6, lr}
 800022a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800022e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000232:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000236:	bf1d      	ittte	ne
 8000238:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800023c:	ea94 0f0c 	teqne	r4, ip
 8000240:	ea95 0f0c 	teqne	r5, ip
 8000244:	f000 f8de 	bleq	8000404 <__aeabi_dmul+0x1dc>
 8000248:	442c      	add	r4, r5
 800024a:	ea81 0603 	eor.w	r6, r1, r3
 800024e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000252:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000256:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800025a:	bf18      	it	ne
 800025c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000260:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000264:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000268:	d038      	beq.n	80002dc <__aeabi_dmul+0xb4>
 800026a:	fba0 ce02 	umull	ip, lr, r0, r2
 800026e:	f04f 0500 	mov.w	r5, #0
 8000272:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000276:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800027a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800027e:	f04f 0600 	mov.w	r6, #0
 8000282:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000286:	f09c 0f00 	teq	ip, #0
 800028a:	bf18      	it	ne
 800028c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000290:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000294:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000298:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800029c:	d204      	bcs.n	80002a8 <__aeabi_dmul+0x80>
 800029e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80002a2:	416d      	adcs	r5, r5
 80002a4:	eb46 0606 	adc.w	r6, r6, r6
 80002a8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80002ac:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80002b0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80002b4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80002b8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80002bc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80002c0:	bf88      	it	hi
 80002c2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80002c6:	d81e      	bhi.n	8000306 <__aeabi_dmul+0xde>
 80002c8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80002cc:	bf08      	it	eq
 80002ce:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80002d2:	f150 0000 	adcs.w	r0, r0, #0
 80002d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002da:	bd70      	pop	{r4, r5, r6, pc}
 80002dc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80002e0:	ea46 0101 	orr.w	r1, r6, r1
 80002e4:	ea40 0002 	orr.w	r0, r0, r2
 80002e8:	ea81 0103 	eor.w	r1, r1, r3
 80002ec:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80002f0:	bfc2      	ittt	gt
 80002f2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80002f6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80002fa:	bd70      	popgt	{r4, r5, r6, pc}
 80002fc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000300:	f04f 0e00 	mov.w	lr, #0
 8000304:	3c01      	subs	r4, #1
 8000306:	f300 80ab 	bgt.w	8000460 <__aeabi_dmul+0x238>
 800030a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800030e:	bfde      	ittt	le
 8000310:	2000      	movle	r0, #0
 8000312:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000316:	bd70      	pople	{r4, r5, r6, pc}
 8000318:	f1c4 0400 	rsb	r4, r4, #0
 800031c:	3c20      	subs	r4, #32
 800031e:	da35      	bge.n	800038c <__aeabi_dmul+0x164>
 8000320:	340c      	adds	r4, #12
 8000322:	dc1b      	bgt.n	800035c <__aeabi_dmul+0x134>
 8000324:	f104 0414 	add.w	r4, r4, #20
 8000328:	f1c4 0520 	rsb	r5, r4, #32
 800032c:	fa00 f305 	lsl.w	r3, r0, r5
 8000330:	fa20 f004 	lsr.w	r0, r0, r4
 8000334:	fa01 f205 	lsl.w	r2, r1, r5
 8000338:	ea40 0002 	orr.w	r0, r0, r2
 800033c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000340:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000344:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000348:	fa21 f604 	lsr.w	r6, r1, r4
 800034c:	eb42 0106 	adc.w	r1, r2, r6
 8000350:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000354:	bf08      	it	eq
 8000356:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800035a:	bd70      	pop	{r4, r5, r6, pc}
 800035c:	f1c4 040c 	rsb	r4, r4, #12
 8000360:	f1c4 0520 	rsb	r5, r4, #32
 8000364:	fa00 f304 	lsl.w	r3, r0, r4
 8000368:	fa20 f005 	lsr.w	r0, r0, r5
 800036c:	fa01 f204 	lsl.w	r2, r1, r4
 8000370:	ea40 0002 	orr.w	r0, r0, r2
 8000374:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000378:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800037c:	f141 0100 	adc.w	r1, r1, #0
 8000380:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000384:	bf08      	it	eq
 8000386:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800038a:	bd70      	pop	{r4, r5, r6, pc}
 800038c:	f1c4 0520 	rsb	r5, r4, #32
 8000390:	fa00 f205 	lsl.w	r2, r0, r5
 8000394:	ea4e 0e02 	orr.w	lr, lr, r2
 8000398:	fa20 f304 	lsr.w	r3, r0, r4
 800039c:	fa01 f205 	lsl.w	r2, r1, r5
 80003a0:	ea43 0302 	orr.w	r3, r3, r2
 80003a4:	fa21 f004 	lsr.w	r0, r1, r4
 80003a8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80003ac:	fa21 f204 	lsr.w	r2, r1, r4
 80003b0:	ea20 0002 	bic.w	r0, r0, r2
 80003b4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80003b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80003bc:	bf08      	it	eq
 80003be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80003c2:	bd70      	pop	{r4, r5, r6, pc}
 80003c4:	f094 0f00 	teq	r4, #0
 80003c8:	d10f      	bne.n	80003ea <__aeabi_dmul+0x1c2>
 80003ca:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80003ce:	0040      	lsls	r0, r0, #1
 80003d0:	eb41 0101 	adc.w	r1, r1, r1
 80003d4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003d8:	bf08      	it	eq
 80003da:	3c01      	subeq	r4, #1
 80003dc:	d0f7      	beq.n	80003ce <__aeabi_dmul+0x1a6>
 80003de:	ea41 0106 	orr.w	r1, r1, r6
 80003e2:	f095 0f00 	teq	r5, #0
 80003e6:	bf18      	it	ne
 80003e8:	4770      	bxne	lr
 80003ea:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80003ee:	0052      	lsls	r2, r2, #1
 80003f0:	eb43 0303 	adc.w	r3, r3, r3
 80003f4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80003f8:	bf08      	it	eq
 80003fa:	3d01      	subeq	r5, #1
 80003fc:	d0f7      	beq.n	80003ee <__aeabi_dmul+0x1c6>
 80003fe:	ea43 0306 	orr.w	r3, r3, r6
 8000402:	4770      	bx	lr
 8000404:	ea94 0f0c 	teq	r4, ip
 8000408:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800040c:	bf18      	it	ne
 800040e:	ea95 0f0c 	teqne	r5, ip
 8000412:	d00c      	beq.n	800042e <__aeabi_dmul+0x206>
 8000414:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000418:	bf18      	it	ne
 800041a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800041e:	d1d1      	bne.n	80003c4 <__aeabi_dmul+0x19c>
 8000420:	ea81 0103 	eor.w	r1, r1, r3
 8000424:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000428:	f04f 0000 	mov.w	r0, #0
 800042c:	bd70      	pop	{r4, r5, r6, pc}
 800042e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000432:	bf06      	itte	eq
 8000434:	4610      	moveq	r0, r2
 8000436:	4619      	moveq	r1, r3
 8000438:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800043c:	d019      	beq.n	8000472 <__aeabi_dmul+0x24a>
 800043e:	ea94 0f0c 	teq	r4, ip
 8000442:	d102      	bne.n	800044a <__aeabi_dmul+0x222>
 8000444:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000448:	d113      	bne.n	8000472 <__aeabi_dmul+0x24a>
 800044a:	ea95 0f0c 	teq	r5, ip
 800044e:	d105      	bne.n	800045c <__aeabi_dmul+0x234>
 8000450:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000454:	bf1c      	itt	ne
 8000456:	4610      	movne	r0, r2
 8000458:	4619      	movne	r1, r3
 800045a:	d10a      	bne.n	8000472 <__aeabi_dmul+0x24a>
 800045c:	ea81 0103 	eor.w	r1, r1, r3
 8000460:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000464:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000468:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800046c:	f04f 0000 	mov.w	r0, #0
 8000470:	bd70      	pop	{r4, r5, r6, pc}
 8000472:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000476:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800047a:	bd70      	pop	{r4, r5, r6, pc}

0800047c <__aeabi_drsub>:
 800047c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000480:	e002      	b.n	8000488 <__adddf3>
 8000482:	bf00      	nop

08000484 <__aeabi_dsub>:
 8000484:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000488 <__adddf3>:
 8000488:	b530      	push	{r4, r5, lr}
 800048a:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800048e:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000492:	ea94 0f05 	teq	r4, r5
 8000496:	bf08      	it	eq
 8000498:	ea90 0f02 	teqeq	r0, r2
 800049c:	bf1f      	itttt	ne
 800049e:	ea54 0c00 	orrsne.w	ip, r4, r0
 80004a2:	ea55 0c02 	orrsne.w	ip, r5, r2
 80004a6:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80004aa:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004ae:	f000 80e2 	beq.w	8000676 <__adddf3+0x1ee>
 80004b2:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80004b6:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80004ba:	bfb8      	it	lt
 80004bc:	426d      	neglt	r5, r5
 80004be:	dd0c      	ble.n	80004da <__adddf3+0x52>
 80004c0:	442c      	add	r4, r5
 80004c2:	ea80 0202 	eor.w	r2, r0, r2
 80004c6:	ea81 0303 	eor.w	r3, r1, r3
 80004ca:	ea82 0000 	eor.w	r0, r2, r0
 80004ce:	ea83 0101 	eor.w	r1, r3, r1
 80004d2:	ea80 0202 	eor.w	r2, r0, r2
 80004d6:	ea81 0303 	eor.w	r3, r1, r3
 80004da:	2d36      	cmp	r5, #54	; 0x36
 80004dc:	bf88      	it	hi
 80004de:	bd30      	pophi	{r4, r5, pc}
 80004e0:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80004e4:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80004e8:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80004ec:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80004f0:	d002      	beq.n	80004f8 <__adddf3+0x70>
 80004f2:	4240      	negs	r0, r0
 80004f4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004f8:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80004fc:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000500:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000504:	d002      	beq.n	800050c <__adddf3+0x84>
 8000506:	4252      	negs	r2, r2
 8000508:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800050c:	ea94 0f05 	teq	r4, r5
 8000510:	f000 80a7 	beq.w	8000662 <__adddf3+0x1da>
 8000514:	f1a4 0401 	sub.w	r4, r4, #1
 8000518:	f1d5 0e20 	rsbs	lr, r5, #32
 800051c:	db0d      	blt.n	800053a <__adddf3+0xb2>
 800051e:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000522:	fa22 f205 	lsr.w	r2, r2, r5
 8000526:	1880      	adds	r0, r0, r2
 8000528:	f141 0100 	adc.w	r1, r1, #0
 800052c:	fa03 f20e 	lsl.w	r2, r3, lr
 8000530:	1880      	adds	r0, r0, r2
 8000532:	fa43 f305 	asr.w	r3, r3, r5
 8000536:	4159      	adcs	r1, r3
 8000538:	e00e      	b.n	8000558 <__adddf3+0xd0>
 800053a:	f1a5 0520 	sub.w	r5, r5, #32
 800053e:	f10e 0e20 	add.w	lr, lr, #32
 8000542:	2a01      	cmp	r2, #1
 8000544:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000548:	bf28      	it	cs
 800054a:	f04c 0c02 	orrcs.w	ip, ip, #2
 800054e:	fa43 f305 	asr.w	r3, r3, r5
 8000552:	18c0      	adds	r0, r0, r3
 8000554:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000558:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800055c:	d507      	bpl.n	800056e <__adddf3+0xe6>
 800055e:	f04f 0e00 	mov.w	lr, #0
 8000562:	f1dc 0c00 	rsbs	ip, ip, #0
 8000566:	eb7e 0000 	sbcs.w	r0, lr, r0
 800056a:	eb6e 0101 	sbc.w	r1, lr, r1
 800056e:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000572:	d31b      	bcc.n	80005ac <__adddf3+0x124>
 8000574:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000578:	d30c      	bcc.n	8000594 <__adddf3+0x10c>
 800057a:	0849      	lsrs	r1, r1, #1
 800057c:	ea5f 0030 	movs.w	r0, r0, rrx
 8000580:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000584:	f104 0401 	add.w	r4, r4, #1
 8000588:	ea4f 5244 	mov.w	r2, r4, lsl #21
 800058c:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000590:	f080 809a 	bcs.w	80006c8 <__adddf3+0x240>
 8000594:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000598:	bf08      	it	eq
 800059a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800059e:	f150 0000 	adcs.w	r0, r0, #0
 80005a2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005a6:	ea41 0105 	orr.w	r1, r1, r5
 80005aa:	bd30      	pop	{r4, r5, pc}
 80005ac:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80005b0:	4140      	adcs	r0, r0
 80005b2:	eb41 0101 	adc.w	r1, r1, r1
 80005b6:	3c01      	subs	r4, #1
 80005b8:	bf28      	it	cs
 80005ba:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80005be:	d2e9      	bcs.n	8000594 <__adddf3+0x10c>
 80005c0:	f091 0f00 	teq	r1, #0
 80005c4:	bf04      	itt	eq
 80005c6:	4601      	moveq	r1, r0
 80005c8:	2000      	moveq	r0, #0
 80005ca:	fab1 f381 	clz	r3, r1
 80005ce:	bf08      	it	eq
 80005d0:	3320      	addeq	r3, #32
 80005d2:	f1a3 030b 	sub.w	r3, r3, #11
 80005d6:	f1b3 0220 	subs.w	r2, r3, #32
 80005da:	da0c      	bge.n	80005f6 <__adddf3+0x16e>
 80005dc:	320c      	adds	r2, #12
 80005de:	dd08      	ble.n	80005f2 <__adddf3+0x16a>
 80005e0:	f102 0c14 	add.w	ip, r2, #20
 80005e4:	f1c2 020c 	rsb	r2, r2, #12
 80005e8:	fa01 f00c 	lsl.w	r0, r1, ip
 80005ec:	fa21 f102 	lsr.w	r1, r1, r2
 80005f0:	e00c      	b.n	800060c <__adddf3+0x184>
 80005f2:	f102 0214 	add.w	r2, r2, #20
 80005f6:	bfd8      	it	le
 80005f8:	f1c2 0c20 	rsble	ip, r2, #32
 80005fc:	fa01 f102 	lsl.w	r1, r1, r2
 8000600:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000604:	bfdc      	itt	le
 8000606:	ea41 010c 	orrle.w	r1, r1, ip
 800060a:	4090      	lslle	r0, r2
 800060c:	1ae4      	subs	r4, r4, r3
 800060e:	bfa2      	ittt	ge
 8000610:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000614:	4329      	orrge	r1, r5
 8000616:	bd30      	popge	{r4, r5, pc}
 8000618:	ea6f 0404 	mvn.w	r4, r4
 800061c:	3c1f      	subs	r4, #31
 800061e:	da1c      	bge.n	800065a <__adddf3+0x1d2>
 8000620:	340c      	adds	r4, #12
 8000622:	dc0e      	bgt.n	8000642 <__adddf3+0x1ba>
 8000624:	f104 0414 	add.w	r4, r4, #20
 8000628:	f1c4 0220 	rsb	r2, r4, #32
 800062c:	fa20 f004 	lsr.w	r0, r0, r4
 8000630:	fa01 f302 	lsl.w	r3, r1, r2
 8000634:	ea40 0003 	orr.w	r0, r0, r3
 8000638:	fa21 f304 	lsr.w	r3, r1, r4
 800063c:	ea45 0103 	orr.w	r1, r5, r3
 8000640:	bd30      	pop	{r4, r5, pc}
 8000642:	f1c4 040c 	rsb	r4, r4, #12
 8000646:	f1c4 0220 	rsb	r2, r4, #32
 800064a:	fa20 f002 	lsr.w	r0, r0, r2
 800064e:	fa01 f304 	lsl.w	r3, r1, r4
 8000652:	ea40 0003 	orr.w	r0, r0, r3
 8000656:	4629      	mov	r1, r5
 8000658:	bd30      	pop	{r4, r5, pc}
 800065a:	fa21 f004 	lsr.w	r0, r1, r4
 800065e:	4629      	mov	r1, r5
 8000660:	bd30      	pop	{r4, r5, pc}
 8000662:	f094 0f00 	teq	r4, #0
 8000666:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800066a:	bf06      	itte	eq
 800066c:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000670:	3401      	addeq	r4, #1
 8000672:	3d01      	subne	r5, #1
 8000674:	e74e      	b.n	8000514 <__adddf3+0x8c>
 8000676:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800067a:	bf18      	it	ne
 800067c:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000680:	d029      	beq.n	80006d6 <__adddf3+0x24e>
 8000682:	ea94 0f05 	teq	r4, r5
 8000686:	bf08      	it	eq
 8000688:	ea90 0f02 	teqeq	r0, r2
 800068c:	d005      	beq.n	800069a <__adddf3+0x212>
 800068e:	ea54 0c00 	orrs.w	ip, r4, r0
 8000692:	bf04      	itt	eq
 8000694:	4619      	moveq	r1, r3
 8000696:	4610      	moveq	r0, r2
 8000698:	bd30      	pop	{r4, r5, pc}
 800069a:	ea91 0f03 	teq	r1, r3
 800069e:	bf1e      	ittt	ne
 80006a0:	2100      	movne	r1, #0
 80006a2:	2000      	movne	r0, #0
 80006a4:	bd30      	popne	{r4, r5, pc}
 80006a6:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80006aa:	d105      	bne.n	80006b8 <__adddf3+0x230>
 80006ac:	0040      	lsls	r0, r0, #1
 80006ae:	4149      	adcs	r1, r1
 80006b0:	bf28      	it	cs
 80006b2:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80006b6:	bd30      	pop	{r4, r5, pc}
 80006b8:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80006bc:	bf3c      	itt	cc
 80006be:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80006c2:	bd30      	popcc	{r4, r5, pc}
 80006c4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80006c8:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80006cc:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80006d0:	f04f 0000 	mov.w	r0, #0
 80006d4:	bd30      	pop	{r4, r5, pc}
 80006d6:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80006da:	bf1a      	itte	ne
 80006dc:	4619      	movne	r1, r3
 80006de:	4610      	movne	r0, r2
 80006e0:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80006e4:	bf1c      	itt	ne
 80006e6:	460b      	movne	r3, r1
 80006e8:	4602      	movne	r2, r0
 80006ea:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80006ee:	bf06      	itte	eq
 80006f0:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80006f4:	ea91 0f03 	teqeq	r1, r3
 80006f8:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80006fc:	bd30      	pop	{r4, r5, pc}
 80006fe:	bf00      	nop

08000700 <__aeabi_ui2d>:
 8000700:	f090 0f00 	teq	r0, #0
 8000704:	bf04      	itt	eq
 8000706:	2100      	moveq	r1, #0
 8000708:	4770      	bxeq	lr
 800070a:	b530      	push	{r4, r5, lr}
 800070c:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000710:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000714:	f04f 0500 	mov.w	r5, #0
 8000718:	f04f 0100 	mov.w	r1, #0
 800071c:	e750      	b.n	80005c0 <__adddf3+0x138>
 800071e:	bf00      	nop

08000720 <__aeabi_i2d>:
 8000720:	f090 0f00 	teq	r0, #0
 8000724:	bf04      	itt	eq
 8000726:	2100      	moveq	r1, #0
 8000728:	4770      	bxeq	lr
 800072a:	b530      	push	{r4, r5, lr}
 800072c:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000730:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000734:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000738:	bf48      	it	mi
 800073a:	4240      	negmi	r0, r0
 800073c:	f04f 0100 	mov.w	r1, #0
 8000740:	e73e      	b.n	80005c0 <__adddf3+0x138>
 8000742:	bf00      	nop

08000744 <__aeabi_f2d>:
 8000744:	0042      	lsls	r2, r0, #1
 8000746:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800074a:	ea4f 0131 	mov.w	r1, r1, rrx
 800074e:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000752:	bf1f      	itttt	ne
 8000754:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000758:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 800075c:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000760:	4770      	bxne	lr
 8000762:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000766:	bf08      	it	eq
 8000768:	4770      	bxeq	lr
 800076a:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800076e:	bf04      	itt	eq
 8000770:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000774:	4770      	bxeq	lr
 8000776:	b530      	push	{r4, r5, lr}
 8000778:	f44f 7460 	mov.w	r4, #896	; 0x380
 800077c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000780:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000784:	e71c      	b.n	80005c0 <__adddf3+0x138>
 8000786:	bf00      	nop

08000788 <__aeabi_ul2d>:
 8000788:	ea50 0201 	orrs.w	r2, r0, r1
 800078c:	bf08      	it	eq
 800078e:	4770      	bxeq	lr
 8000790:	b530      	push	{r4, r5, lr}
 8000792:	f04f 0500 	mov.w	r5, #0
 8000796:	e00a      	b.n	80007ae <__aeabi_l2d+0x16>

08000798 <__aeabi_l2d>:
 8000798:	ea50 0201 	orrs.w	r2, r0, r1
 800079c:	bf08      	it	eq
 800079e:	4770      	bxeq	lr
 80007a0:	b530      	push	{r4, r5, lr}
 80007a2:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80007a6:	d502      	bpl.n	80007ae <__aeabi_l2d+0x16>
 80007a8:	4240      	negs	r0, r0
 80007aa:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80007ae:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80007b2:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80007b6:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80007ba:	f43f aed8 	beq.w	800056e <__adddf3+0xe6>
 80007be:	f04f 0203 	mov.w	r2, #3
 80007c2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80007c6:	bf18      	it	ne
 80007c8:	3203      	addne	r2, #3
 80007ca:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80007ce:	bf18      	it	ne
 80007d0:	3203      	addne	r2, #3
 80007d2:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80007d6:	f1c2 0320 	rsb	r3, r2, #32
 80007da:	fa00 fc03 	lsl.w	ip, r0, r3
 80007de:	fa20 f002 	lsr.w	r0, r0, r2
 80007e2:	fa01 fe03 	lsl.w	lr, r1, r3
 80007e6:	ea40 000e 	orr.w	r0, r0, lr
 80007ea:	fa21 f102 	lsr.w	r1, r1, r2
 80007ee:	4414      	add	r4, r2
 80007f0:	e6bd      	b.n	800056e <__adddf3+0xe6>
 80007f2:	bf00      	nop

080007f4 <__gedf2>:
 80007f4:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 80007f8:	e006      	b.n	8000808 <__cmpdf2+0x4>
 80007fa:	bf00      	nop

080007fc <__ledf2>:
 80007fc:	f04f 0c01 	mov.w	ip, #1
 8000800:	e002      	b.n	8000808 <__cmpdf2+0x4>
 8000802:	bf00      	nop

08000804 <__cmpdf2>:
 8000804:	f04f 0c01 	mov.w	ip, #1
 8000808:	f84d cd04 	str.w	ip, [sp, #-4]!
 800080c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000810:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000814:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000818:	bf18      	it	ne
 800081a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800081e:	d01b      	beq.n	8000858 <__cmpdf2+0x54>
 8000820:	b001      	add	sp, #4
 8000822:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000826:	bf0c      	ite	eq
 8000828:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 800082c:	ea91 0f03 	teqne	r1, r3
 8000830:	bf02      	ittt	eq
 8000832:	ea90 0f02 	teqeq	r0, r2
 8000836:	2000      	moveq	r0, #0
 8000838:	4770      	bxeq	lr
 800083a:	f110 0f00 	cmn.w	r0, #0
 800083e:	ea91 0f03 	teq	r1, r3
 8000842:	bf58      	it	pl
 8000844:	4299      	cmppl	r1, r3
 8000846:	bf08      	it	eq
 8000848:	4290      	cmpeq	r0, r2
 800084a:	bf2c      	ite	cs
 800084c:	17d8      	asrcs	r0, r3, #31
 800084e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000852:	f040 0001 	orr.w	r0, r0, #1
 8000856:	4770      	bx	lr
 8000858:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 800085c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000860:	d102      	bne.n	8000868 <__cmpdf2+0x64>
 8000862:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000866:	d107      	bne.n	8000878 <__cmpdf2+0x74>
 8000868:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 800086c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000870:	d1d6      	bne.n	8000820 <__cmpdf2+0x1c>
 8000872:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000876:	d0d3      	beq.n	8000820 <__cmpdf2+0x1c>
 8000878:	f85d 0b04 	ldr.w	r0, [sp], #4
 800087c:	4770      	bx	lr
 800087e:	bf00      	nop

08000880 <__aeabi_cdrcmple>:
 8000880:	4684      	mov	ip, r0
 8000882:	4610      	mov	r0, r2
 8000884:	4662      	mov	r2, ip
 8000886:	468c      	mov	ip, r1
 8000888:	4619      	mov	r1, r3
 800088a:	4663      	mov	r3, ip
 800088c:	e000      	b.n	8000890 <__aeabi_cdcmpeq>
 800088e:	bf00      	nop

08000890 <__aeabi_cdcmpeq>:
 8000890:	b501      	push	{r0, lr}
 8000892:	f7ff ffb7 	bl	8000804 <__cmpdf2>
 8000896:	2800      	cmp	r0, #0
 8000898:	bf48      	it	mi
 800089a:	f110 0f00 	cmnmi.w	r0, #0
 800089e:	bd01      	pop	{r0, pc}

080008a0 <__aeabi_dcmpeq>:
 80008a0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80008a4:	f7ff fff4 	bl	8000890 <__aeabi_cdcmpeq>
 80008a8:	bf0c      	ite	eq
 80008aa:	2001      	moveq	r0, #1
 80008ac:	2000      	movne	r0, #0
 80008ae:	f85d fb08 	ldr.w	pc, [sp], #8
 80008b2:	bf00      	nop

080008b4 <__aeabi_dcmplt>:
 80008b4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80008b8:	f7ff ffea 	bl	8000890 <__aeabi_cdcmpeq>
 80008bc:	bf34      	ite	cc
 80008be:	2001      	movcc	r0, #1
 80008c0:	2000      	movcs	r0, #0
 80008c2:	f85d fb08 	ldr.w	pc, [sp], #8
 80008c6:	bf00      	nop

080008c8 <__aeabi_dcmple>:
 80008c8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80008cc:	f7ff ffe0 	bl	8000890 <__aeabi_cdcmpeq>
 80008d0:	bf94      	ite	ls
 80008d2:	2001      	movls	r0, #1
 80008d4:	2000      	movhi	r0, #0
 80008d6:	f85d fb08 	ldr.w	pc, [sp], #8
 80008da:	bf00      	nop

080008dc <__aeabi_dcmpge>:
 80008dc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80008e0:	f7ff ffce 	bl	8000880 <__aeabi_cdrcmple>
 80008e4:	bf94      	ite	ls
 80008e6:	2001      	movls	r0, #1
 80008e8:	2000      	movhi	r0, #0
 80008ea:	f85d fb08 	ldr.w	pc, [sp], #8
 80008ee:	bf00      	nop

080008f0 <__aeabi_dcmpgt>:
 80008f0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80008f4:	f7ff ffc4 	bl	8000880 <__aeabi_cdrcmple>
 80008f8:	bf34      	ite	cc
 80008fa:	2001      	movcc	r0, #1
 80008fc:	2000      	movcs	r0, #0
 80008fe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000902:	bf00      	nop

08000904 <__aeabi_d2iz>:
 8000904:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000908:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 800090c:	d215      	bcs.n	800093a <__aeabi_d2iz+0x36>
 800090e:	d511      	bpl.n	8000934 <__aeabi_d2iz+0x30>
 8000910:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000914:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000918:	d912      	bls.n	8000940 <__aeabi_d2iz+0x3c>
 800091a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 800091e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000922:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000926:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800092a:	fa23 f002 	lsr.w	r0, r3, r2
 800092e:	bf18      	it	ne
 8000930:	4240      	negne	r0, r0
 8000932:	4770      	bx	lr
 8000934:	f04f 0000 	mov.w	r0, #0
 8000938:	4770      	bx	lr
 800093a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 800093e:	d105      	bne.n	800094c <__aeabi_d2iz+0x48>
 8000940:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000944:	bf08      	it	eq
 8000946:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 800094a:	4770      	bx	lr
 800094c:	f04f 0000 	mov.w	r0, #0
 8000950:	4770      	bx	lr
 8000952:	bf00      	nop

08000954 <Delay>:
void		LCD_REG_Config          ( void );
void		LCD_FillColor           ( uint32_t ulAmout_Point, uint16_t usColor );
uint16_t	LCD_Read_PixelData      ( void );


void Delay ( __IO uint32_t nCount ){  for ( ; nCount != 0; nCount -- );}
 8000954:	b480      	push	{r7}
 8000956:	b083      	sub	sp, #12
 8000958:	af00      	add	r7, sp, #0
 800095a:	6078      	str	r0, [r7, #4]
 800095c:	e002      	b.n	8000964 <Delay+0x10>
 800095e:	687b      	ldr	r3, [r7, #4]
 8000960:	3b01      	subs	r3, #1
 8000962:	607b      	str	r3, [r7, #4]
 8000964:	687b      	ldr	r3, [r7, #4]
 8000966:	2b00      	cmp	r3, #0
 8000968:	d1f9      	bne.n	800095e <Delay+0xa>
 800096a:	bf00      	nop
 800096c:	bf00      	nop
 800096e:	370c      	adds	r7, #12
 8000970:	46bd      	mov	sp, r7
 8000972:	bc80      	pop	{r7}
 8000974:	4770      	bx	lr

08000976 <LCD_INIT>:

void LCD_INIT ( void )
{
 8000976:	b580      	push	{r7, lr}
 8000978:	b082      	sub	sp, #8
 800097a:	af02      	add	r7, sp, #8
	LCD_BackLed_Control(ENABLE);      
 800097c:	2001      	movs	r0, #1
 800097e:	f000 f829 	bl	80009d4 <LCD_BackLed_Control>
	LCD_Rst();
 8000982:	f000 f80f 	bl	80009a4 <LCD_Rst>
	LCD_REG_Config();
 8000986:	f000 f85f 	bl	8000a48 <LCD_REG_Config>
	LCD_Clear (0, 0, 240, 320, BACKGROUND);
 800098a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800098e:	9300      	str	r3, [sp, #0]
 8000990:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8000994:	22f0      	movs	r2, #240	; 0xf0
 8000996:	2100      	movs	r1, #0
 8000998:	2000      	movs	r0, #0
 800099a:	f000 f9e6 	bl	8000d6a <LCD_Clear>
}
 800099e:	bf00      	nop
 80009a0:	46bd      	mov	sp, r7
 80009a2:	bd80      	pop	{r7, pc}

080009a4 <LCD_Rst>:



void LCD_Rst ( void )
{			
 80009a4:	b580      	push	{r7, lr}
 80009a6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LCD_RST_PORT,LCD_RST_PIN,GPIO_PIN_RESET);
 80009a8:	2200      	movs	r2, #0
 80009aa:	2102      	movs	r1, #2
 80009ac:	4807      	ldr	r0, [pc, #28]	; (80009cc <LCD_Rst+0x28>)
 80009ae:	f001 f8ea 	bl	8001b86 <HAL_GPIO_WritePin>
	Delay ( 0xAFFf<<2 ); 					   
 80009b2:	4807      	ldr	r0, [pc, #28]	; (80009d0 <LCD_Rst+0x2c>)
 80009b4:	f7ff ffce 	bl	8000954 <Delay>
	HAL_GPIO_WritePin(LCD_RST_PORT,LCD_RST_PIN,GPIO_PIN_SET);
 80009b8:	2201      	movs	r2, #1
 80009ba:	2102      	movs	r1, #2
 80009bc:	4803      	ldr	r0, [pc, #12]	; (80009cc <LCD_Rst+0x28>)
 80009be:	f001 f8e2 	bl	8001b86 <HAL_GPIO_WritePin>
	Delay ( 0xAFFf<<2 ); 	
 80009c2:	4803      	ldr	r0, [pc, #12]	; (80009d0 <LCD_Rst+0x2c>)
 80009c4:	f7ff ffc6 	bl	8000954 <Delay>
}
 80009c8:	bf00      	nop
 80009ca:	bd80      	pop	{r7, pc}
 80009cc:	40011800 	.word	0x40011800
 80009d0:	0002bffc 	.word	0x0002bffc

080009d4 <LCD_BackLed_Control>:


void LCD_BackLed_Control ( FunctionalState enumState )
{
 80009d4:	b580      	push	{r7, lr}
 80009d6:	b082      	sub	sp, #8
 80009d8:	af00      	add	r7, sp, #0
 80009da:	4603      	mov	r3, r0
 80009dc:	71fb      	strb	r3, [r7, #7]
	if ( enumState )
 80009de:	79fb      	ldrb	r3, [r7, #7]
 80009e0:	2b00      	cmp	r3, #0
 80009e2:	d006      	beq.n	80009f2 <LCD_BackLed_Control+0x1e>
		HAL_GPIO_WritePin(LCD_BK_PORT,LCD_BK_PIN,GPIO_PIN_RESET);	
 80009e4:	2200      	movs	r2, #0
 80009e6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80009ea:	4807      	ldr	r0, [pc, #28]	; (8000a08 <LCD_BackLed_Control+0x34>)
 80009ec:	f001 f8cb 	bl	8001b86 <HAL_GPIO_WritePin>
	else
		HAL_GPIO_WritePin(LCD_BK_PORT,LCD_BK_PIN,GPIO_PIN_SET);			
}
 80009f0:	e005      	b.n	80009fe <LCD_BackLed_Control+0x2a>
		HAL_GPIO_WritePin(LCD_BK_PORT,LCD_BK_PIN,GPIO_PIN_SET);			
 80009f2:	2201      	movs	r2, #1
 80009f4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80009f8:	4803      	ldr	r0, [pc, #12]	; (8000a08 <LCD_BackLed_Control+0x34>)
 80009fa:	f001 f8c4 	bl	8001b86 <HAL_GPIO_WritePin>
}
 80009fe:	bf00      	nop
 8000a00:	3708      	adds	r7, #8
 8000a02:	46bd      	mov	sp, r7
 8000a04:	bd80      	pop	{r7, pc}
 8000a06:	bf00      	nop
 8000a08:	40011400 	.word	0x40011400

08000a0c <LCD_Write_Cmd>:




void LCD_Write_Cmd ( uint16_t usCmd )
{
 8000a0c:	b480      	push	{r7}
 8000a0e:	b083      	sub	sp, #12
 8000a10:	af00      	add	r7, sp, #0
 8000a12:	4603      	mov	r3, r0
 8000a14:	80fb      	strh	r3, [r7, #6]
	* ( __IO uint16_t * ) ( FSMC_Addr_LCD_CMD ) = usCmd;
 8000a16:	f04f 42c0 	mov.w	r2, #1610612736	; 0x60000000
 8000a1a:	88fb      	ldrh	r3, [r7, #6]
 8000a1c:	8013      	strh	r3, [r2, #0]
}
 8000a1e:	bf00      	nop
 8000a20:	370c      	adds	r7, #12
 8000a22:	46bd      	mov	sp, r7
 8000a24:	bc80      	pop	{r7}
 8000a26:	4770      	bx	lr

08000a28 <LCD_Write_Data>:




void LCD_Write_Data ( uint16_t usData )
{
 8000a28:	b480      	push	{r7}
 8000a2a:	b083      	sub	sp, #12
 8000a2c:	af00      	add	r7, sp, #0
 8000a2e:	4603      	mov	r3, r0
 8000a30:	80fb      	strh	r3, [r7, #6]
	* ( __IO uint16_t * ) ( FSMC_Addr_LCD_DATA ) = usData;
 8000a32:	4a04      	ldr	r2, [pc, #16]	; (8000a44 <LCD_Write_Data+0x1c>)
 8000a34:	88fb      	ldrh	r3, [r7, #6]
 8000a36:	8013      	strh	r3, [r2, #0]
}
 8000a38:	bf00      	nop
 8000a3a:	370c      	adds	r7, #12
 8000a3c:	46bd      	mov	sp, r7
 8000a3e:	bc80      	pop	{r7}
 8000a40:	4770      	bx	lr
 8000a42:	bf00      	nop
 8000a44:	60020000 	.word	0x60020000

08000a48 <LCD_REG_Config>:
	return ( * ( __IO uint16_t * ) ( FSMC_Addr_LCD_DATA ) );	
}


void LCD_REG_Config ( void )
{
 8000a48:	b580      	push	{r7, lr}
 8000a4a:	af00      	add	r7, sp, #0
	/*  Power control B (CFh)  */
	DEBUG_DELAY  ();
	LCD_Write_Cmd ( 0xCF  );
 8000a4c:	20cf      	movs	r0, #207	; 0xcf
 8000a4e:	f7ff ffdd 	bl	8000a0c <LCD_Write_Cmd>
	LCD_Write_Data ( 0x00  );
 8000a52:	2000      	movs	r0, #0
 8000a54:	f7ff ffe8 	bl	8000a28 <LCD_Write_Data>
	LCD_Write_Data ( 0x81  );
 8000a58:	2081      	movs	r0, #129	; 0x81
 8000a5a:	f7ff ffe5 	bl	8000a28 <LCD_Write_Data>
	LCD_Write_Data ( 0x30  );
 8000a5e:	2030      	movs	r0, #48	; 0x30
 8000a60:	f7ff ffe2 	bl	8000a28 <LCD_Write_Data>
	
	/*  Power on sequence control (EDh) */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( 0xED );
 8000a64:	20ed      	movs	r0, #237	; 0xed
 8000a66:	f7ff ffd1 	bl	8000a0c <LCD_Write_Cmd>
	LCD_Write_Data ( 0x64 );
 8000a6a:	2064      	movs	r0, #100	; 0x64
 8000a6c:	f7ff ffdc 	bl	8000a28 <LCD_Write_Data>
	LCD_Write_Data ( 0x03 );
 8000a70:	2003      	movs	r0, #3
 8000a72:	f7ff ffd9 	bl	8000a28 <LCD_Write_Data>
	LCD_Write_Data ( 0x12 );
 8000a76:	2012      	movs	r0, #18
 8000a78:	f7ff ffd6 	bl	8000a28 <LCD_Write_Data>
	LCD_Write_Data ( 0x81 );
 8000a7c:	2081      	movs	r0, #129	; 0x81
 8000a7e:	f7ff ffd3 	bl	8000a28 <LCD_Write_Data>
	
	/*  Driver timing control A (E8h) */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( 0xE8 );
 8000a82:	20e8      	movs	r0, #232	; 0xe8
 8000a84:	f7ff ffc2 	bl	8000a0c <LCD_Write_Cmd>
	LCD_Write_Data ( 0x85 );
 8000a88:	2085      	movs	r0, #133	; 0x85
 8000a8a:	f7ff ffcd 	bl	8000a28 <LCD_Write_Data>
	LCD_Write_Data ( 0x10 );
 8000a8e:	2010      	movs	r0, #16
 8000a90:	f7ff ffca 	bl	8000a28 <LCD_Write_Data>
	LCD_Write_Data ( 0x78 );
 8000a94:	2078      	movs	r0, #120	; 0x78
 8000a96:	f7ff ffc7 	bl	8000a28 <LCD_Write_Data>
	
	/*  Power control A (CBh) */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( 0xCB );
 8000a9a:	20cb      	movs	r0, #203	; 0xcb
 8000a9c:	f7ff ffb6 	bl	8000a0c <LCD_Write_Cmd>
	LCD_Write_Data ( 0x39 );
 8000aa0:	2039      	movs	r0, #57	; 0x39
 8000aa2:	f7ff ffc1 	bl	8000a28 <LCD_Write_Data>
	LCD_Write_Data ( 0x2C );
 8000aa6:	202c      	movs	r0, #44	; 0x2c
 8000aa8:	f7ff ffbe 	bl	8000a28 <LCD_Write_Data>
	LCD_Write_Data ( 0x00 );
 8000aac:	2000      	movs	r0, #0
 8000aae:	f7ff ffbb 	bl	8000a28 <LCD_Write_Data>
	LCD_Write_Data ( 0x34 );
 8000ab2:	2034      	movs	r0, #52	; 0x34
 8000ab4:	f7ff ffb8 	bl	8000a28 <LCD_Write_Data>
	LCD_Write_Data ( 0x02 );
 8000ab8:	2002      	movs	r0, #2
 8000aba:	f7ff ffb5 	bl	8000a28 <LCD_Write_Data>
	
	/* Pump ratio control (F7h) */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( 0xF7 );
 8000abe:	20f7      	movs	r0, #247	; 0xf7
 8000ac0:	f7ff ffa4 	bl	8000a0c <LCD_Write_Cmd>
	LCD_Write_Data ( 0x20 );
 8000ac4:	2020      	movs	r0, #32
 8000ac6:	f7ff ffaf 	bl	8000a28 <LCD_Write_Data>
	
	/* Driver timing control B */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( 0xEA );
 8000aca:	20ea      	movs	r0, #234	; 0xea
 8000acc:	f7ff ff9e 	bl	8000a0c <LCD_Write_Cmd>
	LCD_Write_Data ( 0x00 );
 8000ad0:	2000      	movs	r0, #0
 8000ad2:	f7ff ffa9 	bl	8000a28 <LCD_Write_Data>
	LCD_Write_Data ( 0x00 );
 8000ad6:	2000      	movs	r0, #0
 8000ad8:	f7ff ffa6 	bl	8000a28 <LCD_Write_Data>
	
	/* Frame Rate Control (In Normal Mode/Full Colors) (B1h) */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( 0xB1 );
 8000adc:	20b1      	movs	r0, #177	; 0xb1
 8000ade:	f7ff ff95 	bl	8000a0c <LCD_Write_Cmd>
	LCD_Write_Data ( 0x00 );
 8000ae2:	2000      	movs	r0, #0
 8000ae4:	f7ff ffa0 	bl	8000a28 <LCD_Write_Data>
	LCD_Write_Data ( 0x1B );
 8000ae8:	201b      	movs	r0, #27
 8000aea:	f7ff ff9d 	bl	8000a28 <LCD_Write_Data>
	
	/*  Display Function Control (B6h) */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( 0xB6 );
 8000aee:	20b6      	movs	r0, #182	; 0xb6
 8000af0:	f7ff ff8c 	bl	8000a0c <LCD_Write_Cmd>
	LCD_Write_Data ( 0x0A );
 8000af4:	200a      	movs	r0, #10
 8000af6:	f7ff ff97 	bl	8000a28 <LCD_Write_Data>
	LCD_Write_Data ( 0xA2 );
 8000afa:	20a2      	movs	r0, #162	; 0xa2
 8000afc:	f7ff ff94 	bl	8000a28 <LCD_Write_Data>
	
	/* Power Control 1 (C0h) */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( 0xC0 );
 8000b00:	20c0      	movs	r0, #192	; 0xc0
 8000b02:	f7ff ff83 	bl	8000a0c <LCD_Write_Cmd>
	LCD_Write_Data ( 0x35 );
 8000b06:	2035      	movs	r0, #53	; 0x35
 8000b08:	f7ff ff8e 	bl	8000a28 <LCD_Write_Data>
	
	/* Power Control 2 (C1h) */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( 0xC1 );
 8000b0c:	20c1      	movs	r0, #193	; 0xc1
 8000b0e:	f7ff ff7d 	bl	8000a0c <LCD_Write_Cmd>
	LCD_Write_Data ( 0x11 );
 8000b12:	2011      	movs	r0, #17
 8000b14:	f7ff ff88 	bl	8000a28 <LCD_Write_Data>
	
	/* VCOM Control 1 (C5h) */
	LCD_Write_Cmd ( 0xC5 );
 8000b18:	20c5      	movs	r0, #197	; 0xc5
 8000b1a:	f7ff ff77 	bl	8000a0c <LCD_Write_Cmd>
	LCD_Write_Data ( 0x45 );
 8000b1e:	2045      	movs	r0, #69	; 0x45
 8000b20:	f7ff ff82 	bl	8000a28 <LCD_Write_Data>
	LCD_Write_Data ( 0x45 );
 8000b24:	2045      	movs	r0, #69	; 0x45
 8000b26:	f7ff ff7f 	bl	8000a28 <LCD_Write_Data>
	
	/*  VCOM Control 2 (C7h)  */
	LCD_Write_Cmd ( 0xC7 );
 8000b2a:	20c7      	movs	r0, #199	; 0xc7
 8000b2c:	f7ff ff6e 	bl	8000a0c <LCD_Write_Cmd>
	LCD_Write_Data ( 0xA2 );
 8000b30:	20a2      	movs	r0, #162	; 0xa2
 8000b32:	f7ff ff79 	bl	8000a28 <LCD_Write_Data>
	
	/* Enable 3G (F2h) */
	LCD_Write_Cmd ( 0xF2 );
 8000b36:	20f2      	movs	r0, #242	; 0xf2
 8000b38:	f7ff ff68 	bl	8000a0c <LCD_Write_Cmd>
	LCD_Write_Data ( 0x00 );
 8000b3c:	2000      	movs	r0, #0
 8000b3e:	f7ff ff73 	bl	8000a28 <LCD_Write_Data>
	
	/* Gamma Set (26h) */
	LCD_Write_Cmd ( 0x26 );
 8000b42:	2026      	movs	r0, #38	; 0x26
 8000b44:	f7ff ff62 	bl	8000a0c <LCD_Write_Cmd>
	LCD_Write_Data ( 0x01 );
 8000b48:	2001      	movs	r0, #1
 8000b4a:	f7ff ff6d 	bl	8000a28 <LCD_Write_Data>
	DEBUG_DELAY ();
	
	/* Positive Gamma Correction */
	LCD_Write_Cmd ( 0xE0 ); //Set Gamma
 8000b4e:	20e0      	movs	r0, #224	; 0xe0
 8000b50:	f7ff ff5c 	bl	8000a0c <LCD_Write_Cmd>
	LCD_Write_Data ( 0x0F );
 8000b54:	200f      	movs	r0, #15
 8000b56:	f7ff ff67 	bl	8000a28 <LCD_Write_Data>
	LCD_Write_Data ( 0x26 );
 8000b5a:	2026      	movs	r0, #38	; 0x26
 8000b5c:	f7ff ff64 	bl	8000a28 <LCD_Write_Data>
	LCD_Write_Data ( 0x24 );
 8000b60:	2024      	movs	r0, #36	; 0x24
 8000b62:	f7ff ff61 	bl	8000a28 <LCD_Write_Data>
	LCD_Write_Data ( 0x0B );
 8000b66:	200b      	movs	r0, #11
 8000b68:	f7ff ff5e 	bl	8000a28 <LCD_Write_Data>
	LCD_Write_Data ( 0x0E );
 8000b6c:	200e      	movs	r0, #14
 8000b6e:	f7ff ff5b 	bl	8000a28 <LCD_Write_Data>
	LCD_Write_Data ( 0x09 );
 8000b72:	2009      	movs	r0, #9
 8000b74:	f7ff ff58 	bl	8000a28 <LCD_Write_Data>
	LCD_Write_Data ( 0x54 );
 8000b78:	2054      	movs	r0, #84	; 0x54
 8000b7a:	f7ff ff55 	bl	8000a28 <LCD_Write_Data>
	LCD_Write_Data ( 0xA8 );
 8000b7e:	20a8      	movs	r0, #168	; 0xa8
 8000b80:	f7ff ff52 	bl	8000a28 <LCD_Write_Data>
	LCD_Write_Data ( 0x46 );
 8000b84:	2046      	movs	r0, #70	; 0x46
 8000b86:	f7ff ff4f 	bl	8000a28 <LCD_Write_Data>
	LCD_Write_Data ( 0x0C );
 8000b8a:	200c      	movs	r0, #12
 8000b8c:	f7ff ff4c 	bl	8000a28 <LCD_Write_Data>
	LCD_Write_Data ( 0x17 );
 8000b90:	2017      	movs	r0, #23
 8000b92:	f7ff ff49 	bl	8000a28 <LCD_Write_Data>
	LCD_Write_Data ( 0x09 );
 8000b96:	2009      	movs	r0, #9
 8000b98:	f7ff ff46 	bl	8000a28 <LCD_Write_Data>
	LCD_Write_Data ( 0x0F );
 8000b9c:	200f      	movs	r0, #15
 8000b9e:	f7ff ff43 	bl	8000a28 <LCD_Write_Data>
	LCD_Write_Data ( 0x07 );
 8000ba2:	2007      	movs	r0, #7
 8000ba4:	f7ff ff40 	bl	8000a28 <LCD_Write_Data>
	LCD_Write_Data ( 0x00 );
 8000ba8:	2000      	movs	r0, #0
 8000baa:	f7ff ff3d 	bl	8000a28 <LCD_Write_Data>
	
	/* Negative Gamma Correction (E1h) */
	LCD_Write_Cmd ( 0XE1 ); //Set Gamma
 8000bae:	20e1      	movs	r0, #225	; 0xe1
 8000bb0:	f7ff ff2c 	bl	8000a0c <LCD_Write_Cmd>
	LCD_Write_Data ( 0x00 );
 8000bb4:	2000      	movs	r0, #0
 8000bb6:	f7ff ff37 	bl	8000a28 <LCD_Write_Data>
	LCD_Write_Data ( 0x19 );
 8000bba:	2019      	movs	r0, #25
 8000bbc:	f7ff ff34 	bl	8000a28 <LCD_Write_Data>
	LCD_Write_Data ( 0x1B );
 8000bc0:	201b      	movs	r0, #27
 8000bc2:	f7ff ff31 	bl	8000a28 <LCD_Write_Data>
	LCD_Write_Data ( 0x04 );
 8000bc6:	2004      	movs	r0, #4
 8000bc8:	f7ff ff2e 	bl	8000a28 <LCD_Write_Data>
	LCD_Write_Data ( 0x10 );
 8000bcc:	2010      	movs	r0, #16
 8000bce:	f7ff ff2b 	bl	8000a28 <LCD_Write_Data>
	LCD_Write_Data ( 0x07 );
 8000bd2:	2007      	movs	r0, #7
 8000bd4:	f7ff ff28 	bl	8000a28 <LCD_Write_Data>
	LCD_Write_Data ( 0x2A );
 8000bd8:	202a      	movs	r0, #42	; 0x2a
 8000bda:	f7ff ff25 	bl	8000a28 <LCD_Write_Data>
	LCD_Write_Data ( 0x47 );
 8000bde:	2047      	movs	r0, #71	; 0x47
 8000be0:	f7ff ff22 	bl	8000a28 <LCD_Write_Data>
	LCD_Write_Data ( 0x39 );
 8000be4:	2039      	movs	r0, #57	; 0x39
 8000be6:	f7ff ff1f 	bl	8000a28 <LCD_Write_Data>
	LCD_Write_Data ( 0x03 );
 8000bea:	2003      	movs	r0, #3
 8000bec:	f7ff ff1c 	bl	8000a28 <LCD_Write_Data>
	LCD_Write_Data ( 0x06 );
 8000bf0:	2006      	movs	r0, #6
 8000bf2:	f7ff ff19 	bl	8000a28 <LCD_Write_Data>
	LCD_Write_Data ( 0x06 );
 8000bf6:	2006      	movs	r0, #6
 8000bf8:	f7ff ff16 	bl	8000a28 <LCD_Write_Data>
	LCD_Write_Data ( 0x30 );
 8000bfc:	2030      	movs	r0, #48	; 0x30
 8000bfe:	f7ff ff13 	bl	8000a28 <LCD_Write_Data>
	LCD_Write_Data ( 0x38 );
 8000c02:	2038      	movs	r0, #56	; 0x38
 8000c04:	f7ff ff10 	bl	8000a28 <LCD_Write_Data>
	LCD_Write_Data ( 0x0F );
 8000c08:	200f      	movs	r0, #15
 8000c0a:	f7ff ff0d 	bl	8000a28 <LCD_Write_Data>
	
	/* memory access control set */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( 0x36 ); 	
 8000c0e:	2036      	movs	r0, #54	; 0x36
 8000c10:	f7ff fefc 	bl	8000a0c <LCD_Write_Cmd>
	LCD_Write_Data ( 0xC8 );  // Version 1
 8000c14:	20c8      	movs	r0, #200	; 0xc8
 8000c16:	f7ff ff07 	bl	8000a28 <LCD_Write_Data>
	/* display inversion */
//	LCD_Write_Cmd ( 0x21 );   // Version 2
	DEBUG_DELAY ();
	
	/* column address control set */
	LCD_Write_Cmd ( CMD_Set_COLUMN ); 
 8000c1a:	202a      	movs	r0, #42	; 0x2a
 8000c1c:	f7ff fef6 	bl	8000a0c <LCD_Write_Cmd>
	LCD_Write_Data ( 0x00 );
 8000c20:	2000      	movs	r0, #0
 8000c22:	f7ff ff01 	bl	8000a28 <LCD_Write_Data>
	LCD_Write_Data ( 0x00 );
 8000c26:	2000      	movs	r0, #0
 8000c28:	f7ff fefe 	bl	8000a28 <LCD_Write_Data>
	LCD_Write_Data ( 0x00 );
 8000c2c:	2000      	movs	r0, #0
 8000c2e:	f7ff fefb 	bl	8000a28 <LCD_Write_Data>
	LCD_Write_Data ( 0xEF );
 8000c32:	20ef      	movs	r0, #239	; 0xef
 8000c34:	f7ff fef8 	bl	8000a28 <LCD_Write_Data>
	
	/* page address control set */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( CMD_Set_PAGE ); 
 8000c38:	202b      	movs	r0, #43	; 0x2b
 8000c3a:	f7ff fee7 	bl	8000a0c <LCD_Write_Cmd>
	LCD_Write_Data ( 0x00 );
 8000c3e:	2000      	movs	r0, #0
 8000c40:	f7ff fef2 	bl	8000a28 <LCD_Write_Data>
	LCD_Write_Data ( 0x00 );
 8000c44:	2000      	movs	r0, #0
 8000c46:	f7ff feef 	bl	8000a28 <LCD_Write_Data>
	LCD_Write_Data ( 0x01 );
 8000c4a:	2001      	movs	r0, #1
 8000c4c:	f7ff feec 	bl	8000a28 <LCD_Write_Data>
	LCD_Write_Data ( 0x3F );
 8000c50:	203f      	movs	r0, #63	; 0x3f
 8000c52:	f7ff fee9 	bl	8000a28 <LCD_Write_Data>
	
	/*  Pixel Format Set (3Ah)  */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( 0x3a ); 
 8000c56:	203a      	movs	r0, #58	; 0x3a
 8000c58:	f7ff fed8 	bl	8000a0c <LCD_Write_Cmd>
	LCD_Write_Data ( 0x55 );
 8000c5c:	2055      	movs	r0, #85	; 0x55
 8000c5e:	f7ff fee3 	bl	8000a28 <LCD_Write_Data>
	
	/* Sleep Out (11h)  */
	LCD_Write_Cmd ( 0x11 );	
 8000c62:	2011      	movs	r0, #17
 8000c64:	f7ff fed2 	bl	8000a0c <LCD_Write_Cmd>
	Delay ( 0xAFFf<<2 );
 8000c68:	4803      	ldr	r0, [pc, #12]	; (8000c78 <LCD_REG_Config+0x230>)
 8000c6a:	f7ff fe73 	bl	8000954 <Delay>
	DEBUG_DELAY ();
	
	/* Display ON (29h) */
	LCD_Write_Cmd ( 0x29 ); 
 8000c6e:	2029      	movs	r0, #41	; 0x29
 8000c70:	f7ff fecc 	bl	8000a0c <LCD_Write_Cmd>
	
	
}
 8000c74:	bf00      	nop
 8000c76:	bd80      	pop	{r7, pc}
 8000c78:	0002bffc 	.word	0x0002bffc

08000c7c <LCD_OpenWindow>:



void LCD_OpenWindow ( uint16_t usCOLUMN, uint16_t usPAGE, uint16_t usWidth, uint16_t usHeight )
{	
 8000c7c:	b590      	push	{r4, r7, lr}
 8000c7e:	b083      	sub	sp, #12
 8000c80:	af00      	add	r7, sp, #0
 8000c82:	4604      	mov	r4, r0
 8000c84:	4608      	mov	r0, r1
 8000c86:	4611      	mov	r1, r2
 8000c88:	461a      	mov	r2, r3
 8000c8a:	4623      	mov	r3, r4
 8000c8c:	80fb      	strh	r3, [r7, #6]
 8000c8e:	4603      	mov	r3, r0
 8000c90:	80bb      	strh	r3, [r7, #4]
 8000c92:	460b      	mov	r3, r1
 8000c94:	807b      	strh	r3, [r7, #2]
 8000c96:	4613      	mov	r3, r2
 8000c98:	803b      	strh	r3, [r7, #0]
	LCD_Write_Cmd ( CMD_Set_COLUMN ); 				
 8000c9a:	202a      	movs	r0, #42	; 0x2a
 8000c9c:	f7ff feb6 	bl	8000a0c <LCD_Write_Cmd>
	LCD_Write_Data ( usCOLUMN >> 8  );	 // read the most significant 8 byte
 8000ca0:	88fb      	ldrh	r3, [r7, #6]
 8000ca2:	0a1b      	lsrs	r3, r3, #8
 8000ca4:	b29b      	uxth	r3, r3
 8000ca6:	4618      	mov	r0, r3
 8000ca8:	f7ff febe 	bl	8000a28 <LCD_Write_Data>
	LCD_Write_Data ( usCOLUMN & 0xff  ); // read the least significant 8 byte
 8000cac:	88fb      	ldrh	r3, [r7, #6]
 8000cae:	b2db      	uxtb	r3, r3
 8000cb0:	b29b      	uxth	r3, r3
 8000cb2:	4618      	mov	r0, r3
 8000cb4:	f7ff feb8 	bl	8000a28 <LCD_Write_Data>
	LCD_Write_Data ( ( usCOLUMN + usWidth - 1 ) >> 8  );  	// write most significant byte of the ending column address (usCOLUMN + usWidth - 1)
 8000cb8:	88fa      	ldrh	r2, [r7, #6]
 8000cba:	887b      	ldrh	r3, [r7, #2]
 8000cbc:	4413      	add	r3, r2
 8000cbe:	3b01      	subs	r3, #1
 8000cc0:	121b      	asrs	r3, r3, #8
 8000cc2:	b29b      	uxth	r3, r3
 8000cc4:	4618      	mov	r0, r3
 8000cc6:	f7ff feaf 	bl	8000a28 <LCD_Write_Data>
	LCD_Write_Data ( ( usCOLUMN + usWidth - 1 ) & 0xff  ); // write least significant byte of the ending column address (usCOLUMN + usWidth - 1)
 8000cca:	88fa      	ldrh	r2, [r7, #6]
 8000ccc:	887b      	ldrh	r3, [r7, #2]
 8000cce:	4413      	add	r3, r2
 8000cd0:	b29b      	uxth	r3, r3
 8000cd2:	3b01      	subs	r3, #1
 8000cd4:	b29b      	uxth	r3, r3
 8000cd6:	b2db      	uxtb	r3, r3
 8000cd8:	b29b      	uxth	r3, r3
 8000cda:	4618      	mov	r0, r3
 8000cdc:	f7ff fea4 	bl	8000a28 <LCD_Write_Data>

	LCD_Write_Cmd ( CMD_Set_PAGE ); 			     
 8000ce0:	202b      	movs	r0, #43	; 0x2b
 8000ce2:	f7ff fe93 	bl	8000a0c <LCD_Write_Cmd>
	LCD_Write_Data ( usPAGE >> 8  );
 8000ce6:	88bb      	ldrh	r3, [r7, #4]
 8000ce8:	0a1b      	lsrs	r3, r3, #8
 8000cea:	b29b      	uxth	r3, r3
 8000cec:	4618      	mov	r0, r3
 8000cee:	f7ff fe9b 	bl	8000a28 <LCD_Write_Data>
	LCD_Write_Data ( usPAGE & 0xff  );
 8000cf2:	88bb      	ldrh	r3, [r7, #4]
 8000cf4:	b2db      	uxtb	r3, r3
 8000cf6:	b29b      	uxth	r3, r3
 8000cf8:	4618      	mov	r0, r3
 8000cfa:	f7ff fe95 	bl	8000a28 <LCD_Write_Data>
	LCD_Write_Data ( ( usPAGE + usHeight - 1 ) >> 8 );
 8000cfe:	88ba      	ldrh	r2, [r7, #4]
 8000d00:	883b      	ldrh	r3, [r7, #0]
 8000d02:	4413      	add	r3, r2
 8000d04:	3b01      	subs	r3, #1
 8000d06:	121b      	asrs	r3, r3, #8
 8000d08:	b29b      	uxth	r3, r3
 8000d0a:	4618      	mov	r0, r3
 8000d0c:	f7ff fe8c 	bl	8000a28 <LCD_Write_Data>
	LCD_Write_Data ( ( usPAGE + usHeight - 1) & 0xff );
 8000d10:	88ba      	ldrh	r2, [r7, #4]
 8000d12:	883b      	ldrh	r3, [r7, #0]
 8000d14:	4413      	add	r3, r2
 8000d16:	b29b      	uxth	r3, r3
 8000d18:	3b01      	subs	r3, #1
 8000d1a:	b29b      	uxth	r3, r3
 8000d1c:	b2db      	uxtb	r3, r3
 8000d1e:	b29b      	uxth	r3, r3
 8000d20:	4618      	mov	r0, r3
 8000d22:	f7ff fe81 	bl	8000a28 <LCD_Write_Data>
	
}
 8000d26:	bf00      	nop
 8000d28:	370c      	adds	r7, #12
 8000d2a:	46bd      	mov	sp, r7
 8000d2c:	bd90      	pop	{r4, r7, pc}

08000d2e <LCD_FillColor>:


void LCD_FillColor ( uint32_t usPoint, uint16_t usColor )
{
 8000d2e:	b580      	push	{r7, lr}
 8000d30:	b084      	sub	sp, #16
 8000d32:	af00      	add	r7, sp, #0
 8000d34:	6078      	str	r0, [r7, #4]
 8000d36:	460b      	mov	r3, r1
 8000d38:	807b      	strh	r3, [r7, #2]
	uint32_t i = 0;
 8000d3a:	2300      	movs	r3, #0
 8000d3c:	60fb      	str	r3, [r7, #12]
	
	/* memory write */
	LCD_Write_Cmd ( CMD_SetPixel );	
 8000d3e:	202c      	movs	r0, #44	; 0x2c
 8000d40:	f7ff fe64 	bl	8000a0c <LCD_Write_Cmd>
		
	for ( i = 0; i < usPoint; i ++ )
 8000d44:	2300      	movs	r3, #0
 8000d46:	60fb      	str	r3, [r7, #12]
 8000d48:	e006      	b.n	8000d58 <LCD_FillColor+0x2a>
		LCD_Write_Data ( usColor );
 8000d4a:	887b      	ldrh	r3, [r7, #2]
 8000d4c:	4618      	mov	r0, r3
 8000d4e:	f7ff fe6b 	bl	8000a28 <LCD_Write_Data>
	for ( i = 0; i < usPoint; i ++ )
 8000d52:	68fb      	ldr	r3, [r7, #12]
 8000d54:	3301      	adds	r3, #1
 8000d56:	60fb      	str	r3, [r7, #12]
 8000d58:	68fa      	ldr	r2, [r7, #12]
 8000d5a:	687b      	ldr	r3, [r7, #4]
 8000d5c:	429a      	cmp	r2, r3
 8000d5e:	d3f4      	bcc.n	8000d4a <LCD_FillColor+0x1c>
		
}
 8000d60:	bf00      	nop
 8000d62:	bf00      	nop
 8000d64:	3710      	adds	r7, #16
 8000d66:	46bd      	mov	sp, r7
 8000d68:	bd80      	pop	{r7, pc}

08000d6a <LCD_Clear>:




void LCD_Clear ( uint16_t usCOLUMN, uint16_t usPAGE, uint16_t usWidth, uint16_t usHeight, uint16_t usColor )
{
 8000d6a:	b590      	push	{r4, r7, lr}
 8000d6c:	b083      	sub	sp, #12
 8000d6e:	af00      	add	r7, sp, #0
 8000d70:	4604      	mov	r4, r0
 8000d72:	4608      	mov	r0, r1
 8000d74:	4611      	mov	r1, r2
 8000d76:	461a      	mov	r2, r3
 8000d78:	4623      	mov	r3, r4
 8000d7a:	80fb      	strh	r3, [r7, #6]
 8000d7c:	4603      	mov	r3, r0
 8000d7e:	80bb      	strh	r3, [r7, #4]
 8000d80:	460b      	mov	r3, r1
 8000d82:	807b      	strh	r3, [r7, #2]
 8000d84:	4613      	mov	r3, r2
 8000d86:	803b      	strh	r3, [r7, #0]
	LCD_OpenWindow ( usCOLUMN, usPAGE, usWidth, usHeight );
 8000d88:	883b      	ldrh	r3, [r7, #0]
 8000d8a:	887a      	ldrh	r2, [r7, #2]
 8000d8c:	88b9      	ldrh	r1, [r7, #4]
 8000d8e:	88f8      	ldrh	r0, [r7, #6]
 8000d90:	f7ff ff74 	bl	8000c7c <LCD_OpenWindow>
	LCD_FillColor ( usWidth * usHeight, usColor );		
 8000d94:	887b      	ldrh	r3, [r7, #2]
 8000d96:	883a      	ldrh	r2, [r7, #0]
 8000d98:	fb02 f303 	mul.w	r3, r2, r3
 8000d9c:	461a      	mov	r2, r3
 8000d9e:	8b3b      	ldrh	r3, [r7, #24]
 8000da0:	4619      	mov	r1, r3
 8000da2:	4610      	mov	r0, r2
 8000da4:	f7ff ffc3 	bl	8000d2e <LCD_FillColor>
	
}
 8000da8:	bf00      	nop
 8000daa:	370c      	adds	r7, #12
 8000dac:	46bd      	mov	sp, r7
 8000dae:	bd90      	pop	{r4, r7, pc}

08000db0 <LCD_DrawChar>:
	
}   


void LCD_DrawChar ( uint16_t usC, uint16_t usP, const char cChar )
{
 8000db0:	b580      	push	{r7, lr}
 8000db2:	b084      	sub	sp, #16
 8000db4:	af00      	add	r7, sp, #0
 8000db6:	4603      	mov	r3, r0
 8000db8:	80fb      	strh	r3, [r7, #6]
 8000dba:	460b      	mov	r3, r1
 8000dbc:	80bb      	strh	r3, [r7, #4]
 8000dbe:	4613      	mov	r3, r2
 8000dc0:	70fb      	strb	r3, [r7, #3]
	uint8_t ucTemp, ucRelativePositon, ucPage, ucColumn;

	
	ucRelativePositon = cChar - ' ';
 8000dc2:	78fb      	ldrb	r3, [r7, #3]
 8000dc4:	3b20      	subs	r3, #32
 8000dc6:	733b      	strb	r3, [r7, #12]
	
	LCD_OpenWindow ( usC, usP, WIDTH_EN_CHAR, HEIGHT_EN_CHAR );
 8000dc8:	88b9      	ldrh	r1, [r7, #4]
 8000dca:	88f8      	ldrh	r0, [r7, #6]
 8000dcc:	2310      	movs	r3, #16
 8000dce:	2208      	movs	r2, #8
 8000dd0:	f7ff ff54 	bl	8000c7c <LCD_OpenWindow>
	
	LCD_Write_Cmd ( CMD_SetPixel );	
 8000dd4:	202c      	movs	r0, #44	; 0x2c
 8000dd6:	f7ff fe19 	bl	8000a0c <LCD_Write_Cmd>
	
	for ( ucPage = 0; ucPage < HEIGHT_EN_CHAR; ucPage ++ )
 8000dda:	2300      	movs	r3, #0
 8000ddc:	73bb      	strb	r3, [r7, #14]
 8000dde:	e023      	b.n	8000e28 <LCD_DrawChar+0x78>
	{
		ucTemp = ucAscii_1608 [ ucRelativePositon ] [ ucPage ];
 8000de0:	7b3a      	ldrb	r2, [r7, #12]
 8000de2:	7bbb      	ldrb	r3, [r7, #14]
 8000de4:	4914      	ldr	r1, [pc, #80]	; (8000e38 <LCD_DrawChar+0x88>)
 8000de6:	0112      	lsls	r2, r2, #4
 8000de8:	440a      	add	r2, r1
 8000dea:	4413      	add	r3, r2
 8000dec:	781b      	ldrb	r3, [r3, #0]
 8000dee:	73fb      	strb	r3, [r7, #15]
		
		for ( ucColumn = 0; ucColumn < WIDTH_EN_CHAR; ucColumn ++ )
 8000df0:	2300      	movs	r3, #0
 8000df2:	737b      	strb	r3, [r7, #13]
 8000df4:	e012      	b.n	8000e1c <LCD_DrawChar+0x6c>
		{
			if ( ucTemp & 0x01 )
 8000df6:	7bfb      	ldrb	r3, [r7, #15]
 8000df8:	f003 0301 	and.w	r3, r3, #1
 8000dfc:	2b00      	cmp	r3, #0
 8000dfe:	d003      	beq.n	8000e08 <LCD_DrawChar+0x58>
				LCD_Write_Data ( 0x001F );
 8000e00:	201f      	movs	r0, #31
 8000e02:	f7ff fe11 	bl	8000a28 <LCD_Write_Data>
 8000e06:	e003      	b.n	8000e10 <LCD_DrawChar+0x60>
			
			else
				LCD_Write_Data (  0xFFFF );								
 8000e08:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8000e0c:	f7ff fe0c 	bl	8000a28 <LCD_Write_Data>
			
			ucTemp >>= 1;		
 8000e10:	7bfb      	ldrb	r3, [r7, #15]
 8000e12:	085b      	lsrs	r3, r3, #1
 8000e14:	73fb      	strb	r3, [r7, #15]
		for ( ucColumn = 0; ucColumn < WIDTH_EN_CHAR; ucColumn ++ )
 8000e16:	7b7b      	ldrb	r3, [r7, #13]
 8000e18:	3301      	adds	r3, #1
 8000e1a:	737b      	strb	r3, [r7, #13]
 8000e1c:	7b7b      	ldrb	r3, [r7, #13]
 8000e1e:	2b07      	cmp	r3, #7
 8000e20:	d9e9      	bls.n	8000df6 <LCD_DrawChar+0x46>
	for ( ucPage = 0; ucPage < HEIGHT_EN_CHAR; ucPage ++ )
 8000e22:	7bbb      	ldrb	r3, [r7, #14]
 8000e24:	3301      	adds	r3, #1
 8000e26:	73bb      	strb	r3, [r7, #14]
 8000e28:	7bbb      	ldrb	r3, [r7, #14]
 8000e2a:	2b0f      	cmp	r3, #15
 8000e2c:	d9d8      	bls.n	8000de0 <LCD_DrawChar+0x30>
			
		}
		
	}
	
}
 8000e2e:	bf00      	nop
 8000e30:	bf00      	nop
 8000e32:	3710      	adds	r7, #16
 8000e34:	46bd      	mov	sp, r7
 8000e36:	bd80      	pop	{r7, pc}
 8000e38:	0800393c 	.word	0x0800393c

08000e3c <LCD_DrawString>:




void LCD_DrawString ( uint16_t usC, uint16_t usP, const char * pStr )
{
 8000e3c:	b580      	push	{r7, lr}
 8000e3e:	b082      	sub	sp, #8
 8000e40:	af00      	add	r7, sp, #0
 8000e42:	4603      	mov	r3, r0
 8000e44:	603a      	str	r2, [r7, #0]
 8000e46:	80fb      	strh	r3, [r7, #6]
 8000e48:	460b      	mov	r3, r1
 8000e4a:	80bb      	strh	r3, [r7, #4]
	while ( * pStr != '\0' )
 8000e4c:	e01c      	b.n	8000e88 <LCD_DrawString+0x4c>
	{
		if ( ( usC - LCD_DispWindow_Start_COLUMN + WIDTH_EN_CHAR ) > LCD_DispWindow_COLUMN )
 8000e4e:	88fb      	ldrh	r3, [r7, #6]
 8000e50:	2be8      	cmp	r3, #232	; 0xe8
 8000e52:	d904      	bls.n	8000e5e <LCD_DrawString+0x22>
		{
			usC = LCD_DispWindow_Start_COLUMN;
 8000e54:	2300      	movs	r3, #0
 8000e56:	80fb      	strh	r3, [r7, #6]
			usP += HEIGHT_EN_CHAR;
 8000e58:	88bb      	ldrh	r3, [r7, #4]
 8000e5a:	3310      	adds	r3, #16
 8000e5c:	80bb      	strh	r3, [r7, #4]
		}
		
		if ( ( usP - LCD_DispWindow_Start_PAGE + HEIGHT_EN_CHAR ) > LCD_DispWindow_PAGE )
 8000e5e:	88bb      	ldrh	r3, [r7, #4]
 8000e60:	f5b3 7f98 	cmp.w	r3, #304	; 0x130
 8000e64:	d903      	bls.n	8000e6e <LCD_DrawString+0x32>
		{
			usC = LCD_DispWindow_Start_COLUMN;
 8000e66:	2300      	movs	r3, #0
 8000e68:	80fb      	strh	r3, [r7, #6]
			usP = LCD_DispWindow_Start_PAGE;
 8000e6a:	2300      	movs	r3, #0
 8000e6c:	80bb      	strh	r3, [r7, #4]
		}
		
		LCD_DrawChar ( usC, usP, * pStr );
 8000e6e:	683b      	ldr	r3, [r7, #0]
 8000e70:	781a      	ldrb	r2, [r3, #0]
 8000e72:	88b9      	ldrh	r1, [r7, #4]
 8000e74:	88fb      	ldrh	r3, [r7, #6]
 8000e76:	4618      	mov	r0, r3
 8000e78:	f7ff ff9a 	bl	8000db0 <LCD_DrawChar>
		
		pStr ++;
 8000e7c:	683b      	ldr	r3, [r7, #0]
 8000e7e:	3301      	adds	r3, #1
 8000e80:	603b      	str	r3, [r7, #0]
		
		usC += WIDTH_EN_CHAR;
 8000e82:	88fb      	ldrh	r3, [r7, #6]
 8000e84:	3308      	adds	r3, #8
 8000e86:	80fb      	strh	r3, [r7, #6]
	while ( * pStr != '\0' )
 8000e88:	683b      	ldr	r3, [r7, #0]
 8000e8a:	781b      	ldrb	r3, [r3, #0]
 8000e8c:	2b00      	cmp	r3, #0
 8000e8e:	d1de      	bne.n	8000e4e <LCD_DrawString+0x12>
		
	}
	
}
 8000e90:	bf00      	nop
 8000e92:	bf00      	nop
 8000e94:	3708      	adds	r7, #8
 8000e96:	46bd      	mov	sp, r7
 8000e98:	bd80      	pop	{r7, pc}

08000e9a <LCD_DrawDot>:


//Task 2
void LCD_DrawDot(uint16_t usCOLUMN, uint16_t usPAGE, uint16_t usColor)	
{	
 8000e9a:	b580      	push	{r7, lr}
 8000e9c:	b082      	sub	sp, #8
 8000e9e:	af00      	add	r7, sp, #0
 8000ea0:	4603      	mov	r3, r0
 8000ea2:	80fb      	strh	r3, [r7, #6]
 8000ea4:	460b      	mov	r3, r1
 8000ea6:	80bb      	strh	r3, [r7, #4]
 8000ea8:	4613      	mov	r3, r2
 8000eaa:	807b      	strh	r3, [r7, #2]
	/*
	 *  Task 2 : Implement the LCD_DrawDot to turn on a particular dot on the LCD.
	 */
	LCD_OpenWindow(usCOLUMN, usPAGE, 1, 1);
 8000eac:	88b9      	ldrh	r1, [r7, #4]
 8000eae:	88f8      	ldrh	r0, [r7, #6]
 8000eb0:	2301      	movs	r3, #1
 8000eb2:	2201      	movs	r2, #1
 8000eb4:	f7ff fee2 	bl	8000c7c <LCD_OpenWindow>
	LCD_FillColor(1, usColor);
 8000eb8:	887b      	ldrh	r3, [r7, #2]
 8000eba:	4619      	mov	r1, r3
 8000ebc:	2001      	movs	r0, #1
 8000ebe:	f7ff ff36 	bl	8000d2e <LCD_FillColor>
		
}
 8000ec2:	bf00      	nop
 8000ec4:	3708      	adds	r7, #8
 8000ec6:	46bd      	mov	sp, r7
 8000ec8:	bd80      	pop	{r7, pc}
	...

08000ecc <LCD_DrawEllipse>:

//Task 3
void LCD_DrawEllipse ( uint16_t usC, uint16_t usP, uint16_t SR, uint16_t LR, uint16_t usColor)
{	
 8000ecc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8000ed0:	b086      	sub	sp, #24
 8000ed2:	af00      	add	r7, sp, #0
 8000ed4:	4604      	mov	r4, r0
 8000ed6:	4608      	mov	r0, r1
 8000ed8:	4611      	mov	r1, r2
 8000eda:	461a      	mov	r2, r3
 8000edc:	4623      	mov	r3, r4
 8000ede:	80fb      	strh	r3, [r7, #6]
 8000ee0:	4603      	mov	r3, r0
 8000ee2:	80bb      	strh	r3, [r7, #4]
 8000ee4:	460b      	mov	r3, r1
 8000ee6:	807b      	strh	r3, [r7, #2]
 8000ee8:	4613      	mov	r3, r2
 8000eea:	803b      	strh	r3, [r7, #0]
	/*
	 *  Task 3 : Implement LCD_DrawEllipse by using LCD_DrawDot
	 */
	float val = PI / 180;
 8000eec:	4b48      	ldr	r3, [pc, #288]	; (8001010 <LCD_DrawEllipse+0x144>)
 8000eee:	613b      	str	r3, [r7, #16]
	int x;
	int y;

	for(int i=0; i<720; i++){
 8000ef0:	2300      	movs	r3, #0
 8000ef2:	617b      	str	r3, [r7, #20]
 8000ef4:	e080      	b.n	8000ff8 <LCD_DrawEllipse+0x12c>
		x = usC + SR * cos(0.5*i*val);
 8000ef6:	88fb      	ldrh	r3, [r7, #6]
 8000ef8:	4618      	mov	r0, r3
 8000efa:	f7ff fc11 	bl	8000720 <__aeabi_i2d>
 8000efe:	4604      	mov	r4, r0
 8000f00:	460d      	mov	r5, r1
 8000f02:	887b      	ldrh	r3, [r7, #2]
 8000f04:	4618      	mov	r0, r3
 8000f06:	f7ff fc0b 	bl	8000720 <__aeabi_i2d>
 8000f0a:	4680      	mov	r8, r0
 8000f0c:	4689      	mov	r9, r1
 8000f0e:	6978      	ldr	r0, [r7, #20]
 8000f10:	f7ff fc06 	bl	8000720 <__aeabi_i2d>
 8000f14:	f04f 0200 	mov.w	r2, #0
 8000f18:	4b3e      	ldr	r3, [pc, #248]	; (8001014 <LCD_DrawEllipse+0x148>)
 8000f1a:	f7ff f985 	bl	8000228 <__aeabi_dmul>
 8000f1e:	4602      	mov	r2, r0
 8000f20:	460b      	mov	r3, r1
 8000f22:	4692      	mov	sl, r2
 8000f24:	469b      	mov	fp, r3
 8000f26:	6938      	ldr	r0, [r7, #16]
 8000f28:	f7ff fc0c 	bl	8000744 <__aeabi_f2d>
 8000f2c:	4602      	mov	r2, r0
 8000f2e:	460b      	mov	r3, r1
 8000f30:	4650      	mov	r0, sl
 8000f32:	4659      	mov	r1, fp
 8000f34:	f7ff f978 	bl	8000228 <__aeabi_dmul>
 8000f38:	4602      	mov	r2, r0
 8000f3a:	460b      	mov	r3, r1
 8000f3c:	4610      	mov	r0, r2
 8000f3e:	4619      	mov	r1, r3
 8000f40:	f001 fb80 	bl	8002644 <cos>
 8000f44:	4602      	mov	r2, r0
 8000f46:	460b      	mov	r3, r1
 8000f48:	4640      	mov	r0, r8
 8000f4a:	4649      	mov	r1, r9
 8000f4c:	f7ff f96c 	bl	8000228 <__aeabi_dmul>
 8000f50:	4602      	mov	r2, r0
 8000f52:	460b      	mov	r3, r1
 8000f54:	4620      	mov	r0, r4
 8000f56:	4629      	mov	r1, r5
 8000f58:	f7ff fa96 	bl	8000488 <__adddf3>
 8000f5c:	4602      	mov	r2, r0
 8000f5e:	460b      	mov	r3, r1
 8000f60:	4610      	mov	r0, r2
 8000f62:	4619      	mov	r1, r3
 8000f64:	f7ff fcce 	bl	8000904 <__aeabi_d2iz>
 8000f68:	4603      	mov	r3, r0
 8000f6a:	60fb      	str	r3, [r7, #12]
		y = usP + LR * sin(0.5*i*val);
 8000f6c:	88bb      	ldrh	r3, [r7, #4]
 8000f6e:	4618      	mov	r0, r3
 8000f70:	f7ff fbd6 	bl	8000720 <__aeabi_i2d>
 8000f74:	4604      	mov	r4, r0
 8000f76:	460d      	mov	r5, r1
 8000f78:	883b      	ldrh	r3, [r7, #0]
 8000f7a:	4618      	mov	r0, r3
 8000f7c:	f7ff fbd0 	bl	8000720 <__aeabi_i2d>
 8000f80:	4680      	mov	r8, r0
 8000f82:	4689      	mov	r9, r1
 8000f84:	6978      	ldr	r0, [r7, #20]
 8000f86:	f7ff fbcb 	bl	8000720 <__aeabi_i2d>
 8000f8a:	f04f 0200 	mov.w	r2, #0
 8000f8e:	4b21      	ldr	r3, [pc, #132]	; (8001014 <LCD_DrawEllipse+0x148>)
 8000f90:	f7ff f94a 	bl	8000228 <__aeabi_dmul>
 8000f94:	4602      	mov	r2, r0
 8000f96:	460b      	mov	r3, r1
 8000f98:	4692      	mov	sl, r2
 8000f9a:	469b      	mov	fp, r3
 8000f9c:	6938      	ldr	r0, [r7, #16]
 8000f9e:	f7ff fbd1 	bl	8000744 <__aeabi_f2d>
 8000fa2:	4602      	mov	r2, r0
 8000fa4:	460b      	mov	r3, r1
 8000fa6:	4650      	mov	r0, sl
 8000fa8:	4659      	mov	r1, fp
 8000faa:	f7ff f93d 	bl	8000228 <__aeabi_dmul>
 8000fae:	4602      	mov	r2, r0
 8000fb0:	460b      	mov	r3, r1
 8000fb2:	4610      	mov	r0, r2
 8000fb4:	4619      	mov	r1, r3
 8000fb6:	f001 fb8b 	bl	80026d0 <sin>
 8000fba:	4602      	mov	r2, r0
 8000fbc:	460b      	mov	r3, r1
 8000fbe:	4640      	mov	r0, r8
 8000fc0:	4649      	mov	r1, r9
 8000fc2:	f7ff f931 	bl	8000228 <__aeabi_dmul>
 8000fc6:	4602      	mov	r2, r0
 8000fc8:	460b      	mov	r3, r1
 8000fca:	4620      	mov	r0, r4
 8000fcc:	4629      	mov	r1, r5
 8000fce:	f7ff fa5b 	bl	8000488 <__adddf3>
 8000fd2:	4602      	mov	r2, r0
 8000fd4:	460b      	mov	r3, r1
 8000fd6:	4610      	mov	r0, r2
 8000fd8:	4619      	mov	r1, r3
 8000fda:	f7ff fc93 	bl	8000904 <__aeabi_d2iz>
 8000fde:	4603      	mov	r3, r0
 8000fe0:	60bb      	str	r3, [r7, #8]
		LCD_DrawDot(x,y,usColor);
 8000fe2:	68fb      	ldr	r3, [r7, #12]
 8000fe4:	b29b      	uxth	r3, r3
 8000fe6:	68ba      	ldr	r2, [r7, #8]
 8000fe8:	b291      	uxth	r1, r2
 8000fea:	8f3a      	ldrh	r2, [r7, #56]	; 0x38
 8000fec:	4618      	mov	r0, r3
 8000fee:	f7ff ff54 	bl	8000e9a <LCD_DrawDot>
	for(int i=0; i<720; i++){
 8000ff2:	697b      	ldr	r3, [r7, #20]
 8000ff4:	3301      	adds	r3, #1
 8000ff6:	617b      	str	r3, [r7, #20]
 8000ff8:	697b      	ldr	r3, [r7, #20]
 8000ffa:	f5b3 7f34 	cmp.w	r3, #720	; 0x2d0
 8000ffe:	f6ff af7a 	blt.w	8000ef6 <LCD_DrawEllipse+0x2a>
	}

}
 8001002:	bf00      	nop
 8001004:	bf00      	nop
 8001006:	3718      	adds	r7, #24
 8001008:	46bd      	mov	sp, r7
 800100a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800100e:	bf00      	nop
 8001010:	3c8efa35 	.word	0x3c8efa35
 8001014:	3fe00000 	.word	0x3fe00000

08001018 <LCD_DrawChinese>:

//Task 4
void LCD_DrawChinese (uint16_t usC, uint16_t usP, const unsigned char *arr, uint16_t usWidth, uint16_t usHeight)
{
 8001018:	b580      	push	{r7, lr}
 800101a:	b088      	sub	sp, #32
 800101c:	af00      	add	r7, sp, #0
 800101e:	60ba      	str	r2, [r7, #8]
 8001020:	461a      	mov	r2, r3
 8001022:	4603      	mov	r3, r0
 8001024:	81fb      	strh	r3, [r7, #14]
 8001026:	460b      	mov	r3, r1
 8001028:	81bb      	strh	r3, [r7, #12]
 800102a:	4613      	mov	r3, r2
 800102c:	80fb      	strh	r3, [r7, #6]
	//LCD_Clear (0, 0, 240, 320, BACKGROUND);

	uint16_t color;
	//LCD_OpenWindow(0, 0, 240, 360);
	LCD_OpenWindow(usC, usP, usWidth, usHeight);
 800102e:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8001030:	88fa      	ldrh	r2, [r7, #6]
 8001032:	89b9      	ldrh	r1, [r7, #12]
 8001034:	89f8      	ldrh	r0, [r7, #14]
 8001036:	f7ff fe21 	bl	8000c7c <LCD_OpenWindow>
	for(int i=0; i<usHeight; i++){
 800103a:	2300      	movs	r3, #0
 800103c:	61bb      	str	r3, [r7, #24]
 800103e:	e02e      	b.n	800109e <LCD_DrawChinese+0x86>
		for(int j=0; j<usWidth; j++){
 8001040:	2300      	movs	r3, #0
 8001042:	617b      	str	r3, [r7, #20]
 8001044:	e024      	b.n	8001090 <LCD_DrawChinese+0x78>
			color = *((arr+i*usWidth) + j);
 8001046:	88fb      	ldrh	r3, [r7, #6]
 8001048:	69ba      	ldr	r2, [r7, #24]
 800104a:	fb02 f303 	mul.w	r3, r2, r3
 800104e:	461a      	mov	r2, r3
 8001050:	697b      	ldr	r3, [r7, #20]
 8001052:	4413      	add	r3, r2
 8001054:	68ba      	ldr	r2, [r7, #8]
 8001056:	4413      	add	r3, r2
 8001058:	781b      	ldrb	r3, [r3, #0]
 800105a:	83fb      	strh	r3, [r7, #30]

			if (color == 0x00){
 800105c:	8bfb      	ldrh	r3, [r7, #30]
 800105e:	2b00      	cmp	r3, #0
 8001060:	d103      	bne.n	800106a <LCD_DrawChinese+0x52>
				color = 0xFFFF;
 8001062:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001066:	83fb      	strh	r3, [r7, #30]
 8001068:	e001      	b.n	800106e <LCD_DrawChinese+0x56>
			}else{
				color = 0x0000;
 800106a:	2300      	movs	r3, #0
 800106c:	83fb      	strh	r3, [r7, #30]
			}

			LCD_DrawDot(usC+j, usP+i, color);
 800106e:	697b      	ldr	r3, [r7, #20]
 8001070:	b29a      	uxth	r2, r3
 8001072:	89fb      	ldrh	r3, [r7, #14]
 8001074:	4413      	add	r3, r2
 8001076:	b298      	uxth	r0, r3
 8001078:	69bb      	ldr	r3, [r7, #24]
 800107a:	b29a      	uxth	r2, r3
 800107c:	89bb      	ldrh	r3, [r7, #12]
 800107e:	4413      	add	r3, r2
 8001080:	b29b      	uxth	r3, r3
 8001082:	8bfa      	ldrh	r2, [r7, #30]
 8001084:	4619      	mov	r1, r3
 8001086:	f7ff ff08 	bl	8000e9a <LCD_DrawDot>
		for(int j=0; j<usWidth; j++){
 800108a:	697b      	ldr	r3, [r7, #20]
 800108c:	3301      	adds	r3, #1
 800108e:	617b      	str	r3, [r7, #20]
 8001090:	88fb      	ldrh	r3, [r7, #6]
 8001092:	697a      	ldr	r2, [r7, #20]
 8001094:	429a      	cmp	r2, r3
 8001096:	dbd6      	blt.n	8001046 <LCD_DrawChinese+0x2e>
	for(int i=0; i<usHeight; i++){
 8001098:	69bb      	ldr	r3, [r7, #24]
 800109a:	3301      	adds	r3, #1
 800109c:	61bb      	str	r3, [r7, #24]
 800109e:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80010a0:	69ba      	ldr	r2, [r7, #24]
 80010a2:	429a      	cmp	r2, r3
 80010a4:	dbcc      	blt.n	8001040 <LCD_DrawChinese+0x28>
		}
	}
}
 80010a6:	bf00      	nop
 80010a8:	bf00      	nop
 80010aa:	3720      	adds	r7, #32
 80010ac:	46bd      	mov	sp, r7
 80010ae:	bd80      	pop	{r7, pc}

080010b0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80010b0:	b580      	push	{r7, lr}
 80010b2:	f5ad 7d16 	sub.w	sp, sp, #600	; 0x258
 80010b6:	af02      	add	r7, sp, #8
  /* USER CODE BEGIN 1 */
	const unsigned char arr [] = {
 80010b8:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80010bc:	f5a3 7314 	sub.w	r3, r3, #592	; 0x250
 80010c0:	4a35      	ldr	r2, [pc, #212]	; (8001198 <main+0xe8>)
 80010c2:	4618      	mov	r0, r3
 80010c4:	4611      	mov	r1, r2
 80010c6:	f44f 7310 	mov.w	r3, #576	; 0x240
 80010ca:	461a      	mov	r2, r3
 80010cc:	f001 faa4 	bl	8002618 <memcpy>
	0x00, 0x00, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
	};
	int w = 24;
 80010d0:	2318      	movs	r3, #24
 80010d2:	f8c7 3244 	str.w	r3, [r7, #580]	; 0x244
	int h = 24;
 80010d6:	2318      	movs	r3, #24
 80010d8:	f8c7 3240 	str.w	r3, [r7, #576]	; 0x240
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80010dc:	f000 fa62 	bl	80015a4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80010e0:	f000 f860 	bl	80011a4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80010e4:	f000 f8a4 	bl	8001230 <MX_GPIO_Init>
  MX_FSMC_Init();
 80010e8:	f000 f91e 	bl	8001328 <MX_FSMC_Init>
  /* USER CODE BEGIN 2 */
  LCD_INIT();
 80010ec:	f7ff fc43 	bl	8000976 <LCD_INIT>

  int state = 0;
 80010f0:	2300      	movs	r3, #0
 80010f2:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
  int curr_page = 1;
 80010f6:	2301      	movs	r3, #1
 80010f8:	f8c7 3248 	str.w	r3, [r7, #584]	; 0x248
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  if (curr_page == 1) {
 80010fc:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 8001100:	2b01      	cmp	r3, #1
 8001102:	d113      	bne.n	800112c <main+0x7c>
		  LCD_DrawString(0, 0, "LI, Yu-hsi");
 8001104:	4a25      	ldr	r2, [pc, #148]	; (800119c <main+0xec>)
 8001106:	2100      	movs	r1, #0
 8001108:	2000      	movs	r0, #0
 800110a:	f7ff fe97 	bl	8000e3c <LCD_DrawString>
		  LCD_DrawDot(50, 100, RED);
 800110e:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 8001112:	2164      	movs	r1, #100	; 0x64
 8001114:	2032      	movs	r0, #50	; 0x32
 8001116:	f7ff fec0 	bl	8000e9a <LCD_DrawDot>
		  LCD_DrawEllipse(120, 160, 25, 75, BLACK);
 800111a:	2300      	movs	r3, #0
 800111c:	9300      	str	r3, [sp, #0]
 800111e:	234b      	movs	r3, #75	; 0x4b
 8001120:	2219      	movs	r2, #25
 8001122:	21a0      	movs	r1, #160	; 0xa0
 8001124:	2078      	movs	r0, #120	; 0x78
 8001126:	f7ff fed1 	bl	8000ecc <LCD_DrawEllipse>
 800112a:	e00c      	b.n	8001146 <main+0x96>

	  }
	  else {
		  LCD_DrawChinese(180, 50, (const unsigned char*) arr, w, h);
 800112c:	f8d7 3244 	ldr.w	r3, [r7, #580]	; 0x244
 8001130:	b299      	uxth	r1, r3
 8001132:	f8d7 3240 	ldr.w	r3, [r7, #576]	; 0x240
 8001136:	b29b      	uxth	r3, r3
 8001138:	463a      	mov	r2, r7
 800113a:	9300      	str	r3, [sp, #0]
 800113c:	460b      	mov	r3, r1
 800113e:	2132      	movs	r1, #50	; 0x32
 8001140:	20b4      	movs	r0, #180	; 0xb4
 8001142:	f7ff ff69 	bl	8001018 <LCD_DrawChinese>
	  }

	  if (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13) && !state) {
 8001146:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800114a:	4815      	ldr	r0, [pc, #84]	; (80011a0 <main+0xf0>)
 800114c:	f000 fd04 	bl	8001b58 <HAL_GPIO_ReadPin>
 8001150:	4603      	mov	r3, r0
 8001152:	2b00      	cmp	r3, #0
 8001154:	d016      	beq.n	8001184 <main+0xd4>
 8001156:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 800115a:	2b00      	cmp	r3, #0
 800115c:	d112      	bne.n	8001184 <main+0xd4>
		  curr_page = !curr_page;
 800115e:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 8001162:	2b00      	cmp	r3, #0
 8001164:	bf0c      	ite	eq
 8001166:	2301      	moveq	r3, #1
 8001168:	2300      	movne	r3, #0
 800116a:	b2db      	uxtb	r3, r3
 800116c:	f8c7 3248 	str.w	r3, [r7, #584]	; 0x248
		  LCD_Clear(0, 0, 240, 320, WHITE);
 8001170:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001174:	9300      	str	r3, [sp, #0]
 8001176:	f44f 73a0 	mov.w	r3, #320	; 0x140
 800117a:	22f0      	movs	r2, #240	; 0xf0
 800117c:	2100      	movs	r1, #0
 800117e:	2000      	movs	r0, #0
 8001180:	f7ff fdf3 	bl	8000d6a <LCD_Clear>
	  }
	  state = HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13);
 8001184:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001188:	4805      	ldr	r0, [pc, #20]	; (80011a0 <main+0xf0>)
 800118a:	f000 fce5 	bl	8001b58 <HAL_GPIO_ReadPin>
 800118e:	4603      	mov	r3, r0
 8001190:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
	  if (curr_page == 1) {
 8001194:	e7b2      	b.n	80010fc <main+0x4c>
 8001196:	bf00      	nop
 8001198:	080036ec 	.word	0x080036ec
 800119c:	080036e0 	.word	0x080036e0
 80011a0:	40011000 	.word	0x40011000

080011a4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80011a4:	b580      	push	{r7, lr}
 80011a6:	b090      	sub	sp, #64	; 0x40
 80011a8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80011aa:	f107 0318 	add.w	r3, r7, #24
 80011ae:	2228      	movs	r2, #40	; 0x28
 80011b0:	2100      	movs	r1, #0
 80011b2:	4618      	mov	r0, r3
 80011b4:	f001 fa3e 	bl	8002634 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80011b8:	1d3b      	adds	r3, r7, #4
 80011ba:	2200      	movs	r2, #0
 80011bc:	601a      	str	r2, [r3, #0]
 80011be:	605a      	str	r2, [r3, #4]
 80011c0:	609a      	str	r2, [r3, #8]
 80011c2:	60da      	str	r2, [r3, #12]
 80011c4:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80011c6:	2301      	movs	r3, #1
 80011c8:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80011ca:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80011ce:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80011d0:	2300      	movs	r3, #0
 80011d2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80011d4:	2301      	movs	r3, #1
 80011d6:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80011d8:	2302      	movs	r3, #2
 80011da:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80011dc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80011e0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80011e2:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80011e6:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80011e8:	f107 0318 	add.w	r3, r7, #24
 80011ec:	4618      	mov	r0, r3
 80011ee:	f000 fce3 	bl	8001bb8 <HAL_RCC_OscConfig>
 80011f2:	4603      	mov	r3, r0
 80011f4:	2b00      	cmp	r3, #0
 80011f6:	d001      	beq.n	80011fc <SystemClock_Config+0x58>
  {
    Error_Handler();
 80011f8:	f000 f8fa 	bl	80013f0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80011fc:	230f      	movs	r3, #15
 80011fe:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001200:	2302      	movs	r3, #2
 8001202:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001204:	2300      	movs	r3, #0
 8001206:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001208:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800120c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800120e:	2300      	movs	r3, #0
 8001210:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001212:	1d3b      	adds	r3, r7, #4
 8001214:	2102      	movs	r1, #2
 8001216:	4618      	mov	r0, r3
 8001218:	f000 ff50 	bl	80020bc <HAL_RCC_ClockConfig>
 800121c:	4603      	mov	r3, r0
 800121e:	2b00      	cmp	r3, #0
 8001220:	d001      	beq.n	8001226 <SystemClock_Config+0x82>
  {
    Error_Handler();
 8001222:	f000 f8e5 	bl	80013f0 <Error_Handler>
  }
}
 8001226:	bf00      	nop
 8001228:	3740      	adds	r7, #64	; 0x40
 800122a:	46bd      	mov	sp, r7
 800122c:	bd80      	pop	{r7, pc}
	...

08001230 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001230:	b580      	push	{r7, lr}
 8001232:	b088      	sub	sp, #32
 8001234:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001236:	f107 0310 	add.w	r3, r7, #16
 800123a:	2200      	movs	r2, #0
 800123c:	601a      	str	r2, [r3, #0]
 800123e:	605a      	str	r2, [r3, #4]
 8001240:	609a      	str	r2, [r3, #8]
 8001242:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001244:	4b34      	ldr	r3, [pc, #208]	; (8001318 <MX_GPIO_Init+0xe8>)
 8001246:	699b      	ldr	r3, [r3, #24]
 8001248:	4a33      	ldr	r2, [pc, #204]	; (8001318 <MX_GPIO_Init+0xe8>)
 800124a:	f043 0310 	orr.w	r3, r3, #16
 800124e:	6193      	str	r3, [r2, #24]
 8001250:	4b31      	ldr	r3, [pc, #196]	; (8001318 <MX_GPIO_Init+0xe8>)
 8001252:	699b      	ldr	r3, [r3, #24]
 8001254:	f003 0310 	and.w	r3, r3, #16
 8001258:	60fb      	str	r3, [r7, #12]
 800125a:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800125c:	4b2e      	ldr	r3, [pc, #184]	; (8001318 <MX_GPIO_Init+0xe8>)
 800125e:	699b      	ldr	r3, [r3, #24]
 8001260:	4a2d      	ldr	r2, [pc, #180]	; (8001318 <MX_GPIO_Init+0xe8>)
 8001262:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001266:	6193      	str	r3, [r2, #24]
 8001268:	4b2b      	ldr	r3, [pc, #172]	; (8001318 <MX_GPIO_Init+0xe8>)
 800126a:	699b      	ldr	r3, [r3, #24]
 800126c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001270:	60bb      	str	r3, [r7, #8]
 8001272:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001274:	4b28      	ldr	r3, [pc, #160]	; (8001318 <MX_GPIO_Init+0xe8>)
 8001276:	699b      	ldr	r3, [r3, #24]
 8001278:	4a27      	ldr	r2, [pc, #156]	; (8001318 <MX_GPIO_Init+0xe8>)
 800127a:	f043 0320 	orr.w	r3, r3, #32
 800127e:	6193      	str	r3, [r2, #24]
 8001280:	4b25      	ldr	r3, [pc, #148]	; (8001318 <MX_GPIO_Init+0xe8>)
 8001282:	699b      	ldr	r3, [r3, #24]
 8001284:	f003 0320 	and.w	r3, r3, #32
 8001288:	607b      	str	r3, [r7, #4]
 800128a:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800128c:	4b22      	ldr	r3, [pc, #136]	; (8001318 <MX_GPIO_Init+0xe8>)
 800128e:	699b      	ldr	r3, [r3, #24]
 8001290:	4a21      	ldr	r2, [pc, #132]	; (8001318 <MX_GPIO_Init+0xe8>)
 8001292:	f043 0304 	orr.w	r3, r3, #4
 8001296:	6193      	str	r3, [r2, #24]
 8001298:	4b1f      	ldr	r3, [pc, #124]	; (8001318 <MX_GPIO_Init+0xe8>)
 800129a:	699b      	ldr	r3, [r3, #24]
 800129c:	f003 0304 	and.w	r3, r3, #4
 80012a0:	603b      	str	r3, [r7, #0]
 80012a2:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_RESET);
 80012a4:	2200      	movs	r2, #0
 80012a6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80012aa:	481c      	ldr	r0, [pc, #112]	; (800131c <MX_GPIO_Init+0xec>)
 80012ac:	f000 fc6b 	bl	8001b86 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_1, GPIO_PIN_RESET);
 80012b0:	2200      	movs	r2, #0
 80012b2:	2102      	movs	r1, #2
 80012b4:	481a      	ldr	r0, [pc, #104]	; (8001320 <MX_GPIO_Init+0xf0>)
 80012b6:	f000 fc66 	bl	8001b86 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 80012ba:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80012be:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80012c0:	2300      	movs	r3, #0
 80012c2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80012c4:	2302      	movs	r3, #2
 80012c6:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80012c8:	f107 0310 	add.w	r3, r7, #16
 80012cc:	4619      	mov	r1, r3
 80012ce:	4815      	ldr	r0, [pc, #84]	; (8001324 <MX_GPIO_Init+0xf4>)
 80012d0:	f000 faae 	bl	8001830 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD12 */
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 80012d4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80012d8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012da:	2301      	movs	r3, #1
 80012dc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012de:	2300      	movs	r3, #0
 80012e0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80012e2:	2303      	movs	r3, #3
 80012e4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80012e6:	f107 0310 	add.w	r3, r7, #16
 80012ea:	4619      	mov	r1, r3
 80012ec:	480b      	ldr	r0, [pc, #44]	; (800131c <MX_GPIO_Init+0xec>)
 80012ee:	f000 fa9f 	bl	8001830 <HAL_GPIO_Init>

  /*Configure GPIO pin : PE1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 80012f2:	2302      	movs	r3, #2
 80012f4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012f6:	2301      	movs	r3, #1
 80012f8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012fa:	2300      	movs	r3, #0
 80012fc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80012fe:	2303      	movs	r3, #3
 8001300:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001302:	f107 0310 	add.w	r3, r7, #16
 8001306:	4619      	mov	r1, r3
 8001308:	4805      	ldr	r0, [pc, #20]	; (8001320 <MX_GPIO_Init+0xf0>)
 800130a:	f000 fa91 	bl	8001830 <HAL_GPIO_Init>

}
 800130e:	bf00      	nop
 8001310:	3720      	adds	r7, #32
 8001312:	46bd      	mov	sp, r7
 8001314:	bd80      	pop	{r7, pc}
 8001316:	bf00      	nop
 8001318:	40021000 	.word	0x40021000
 800131c:	40011400 	.word	0x40011400
 8001320:	40011800 	.word	0x40011800
 8001324:	40011000 	.word	0x40011000

08001328 <MX_FSMC_Init>:

/* FSMC initialization function */
static void MX_FSMC_Init(void)
{
 8001328:	b580      	push	{r7, lr}
 800132a:	b088      	sub	sp, #32
 800132c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN FSMC_Init 0 */

  /* USER CODE END FSMC_Init 0 */

  FSMC_NORSRAM_TimingTypeDef Timing = {0};
 800132e:	1d3b      	adds	r3, r7, #4
 8001330:	2200      	movs	r2, #0
 8001332:	601a      	str	r2, [r3, #0]
 8001334:	605a      	str	r2, [r3, #4]
 8001336:	609a      	str	r2, [r3, #8]
 8001338:	60da      	str	r2, [r3, #12]
 800133a:	611a      	str	r2, [r3, #16]
 800133c:	615a      	str	r2, [r3, #20]
 800133e:	619a      	str	r2, [r3, #24]

  /* USER CODE END FSMC_Init 1 */

  /** Perform the SRAM1 memory initialization sequence
  */
  hsram1.Instance = FSMC_NORSRAM_DEVICE;
 8001340:	4b28      	ldr	r3, [pc, #160]	; (80013e4 <MX_FSMC_Init+0xbc>)
 8001342:	f04f 4220 	mov.w	r2, #2684354560	; 0xa0000000
 8001346:	601a      	str	r2, [r3, #0]
  hsram1.Extended = FSMC_NORSRAM_EXTENDED_DEVICE;
 8001348:	4b26      	ldr	r3, [pc, #152]	; (80013e4 <MX_FSMC_Init+0xbc>)
 800134a:	4a27      	ldr	r2, [pc, #156]	; (80013e8 <MX_FSMC_Init+0xc0>)
 800134c:	605a      	str	r2, [r3, #4]
  /* hsram1.Init */
  hsram1.Init.NSBank = FSMC_NORSRAM_BANK1;
 800134e:	4b25      	ldr	r3, [pc, #148]	; (80013e4 <MX_FSMC_Init+0xbc>)
 8001350:	2200      	movs	r2, #0
 8001352:	609a      	str	r2, [r3, #8]
  hsram1.Init.DataAddressMux = FSMC_DATA_ADDRESS_MUX_DISABLE;
 8001354:	4b23      	ldr	r3, [pc, #140]	; (80013e4 <MX_FSMC_Init+0xbc>)
 8001356:	2200      	movs	r2, #0
 8001358:	60da      	str	r2, [r3, #12]
  hsram1.Init.MemoryType = FSMC_MEMORY_TYPE_SRAM;
 800135a:	4b22      	ldr	r3, [pc, #136]	; (80013e4 <MX_FSMC_Init+0xbc>)
 800135c:	2200      	movs	r2, #0
 800135e:	611a      	str	r2, [r3, #16]
  hsram1.Init.MemoryDataWidth = FSMC_NORSRAM_MEM_BUS_WIDTH_16;
 8001360:	4b20      	ldr	r3, [pc, #128]	; (80013e4 <MX_FSMC_Init+0xbc>)
 8001362:	2210      	movs	r2, #16
 8001364:	615a      	str	r2, [r3, #20]
  hsram1.Init.BurstAccessMode = FSMC_BURST_ACCESS_MODE_DISABLE;
 8001366:	4b1f      	ldr	r3, [pc, #124]	; (80013e4 <MX_FSMC_Init+0xbc>)
 8001368:	2200      	movs	r2, #0
 800136a:	619a      	str	r2, [r3, #24]
  hsram1.Init.WaitSignalPolarity = FSMC_WAIT_SIGNAL_POLARITY_LOW;
 800136c:	4b1d      	ldr	r3, [pc, #116]	; (80013e4 <MX_FSMC_Init+0xbc>)
 800136e:	2200      	movs	r2, #0
 8001370:	61da      	str	r2, [r3, #28]
  hsram1.Init.WrapMode = FSMC_WRAP_MODE_DISABLE;
 8001372:	4b1c      	ldr	r3, [pc, #112]	; (80013e4 <MX_FSMC_Init+0xbc>)
 8001374:	2200      	movs	r2, #0
 8001376:	621a      	str	r2, [r3, #32]
  hsram1.Init.WaitSignalActive = FSMC_WAIT_TIMING_BEFORE_WS;
 8001378:	4b1a      	ldr	r3, [pc, #104]	; (80013e4 <MX_FSMC_Init+0xbc>)
 800137a:	2200      	movs	r2, #0
 800137c:	625a      	str	r2, [r3, #36]	; 0x24
  hsram1.Init.WriteOperation = FSMC_WRITE_OPERATION_ENABLE;
 800137e:	4b19      	ldr	r3, [pc, #100]	; (80013e4 <MX_FSMC_Init+0xbc>)
 8001380:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001384:	629a      	str	r2, [r3, #40]	; 0x28
  hsram1.Init.WaitSignal = FSMC_WAIT_SIGNAL_DISABLE;
 8001386:	4b17      	ldr	r3, [pc, #92]	; (80013e4 <MX_FSMC_Init+0xbc>)
 8001388:	2200      	movs	r2, #0
 800138a:	62da      	str	r2, [r3, #44]	; 0x2c
  hsram1.Init.ExtendedMode = FSMC_EXTENDED_MODE_DISABLE;
 800138c:	4b15      	ldr	r3, [pc, #84]	; (80013e4 <MX_FSMC_Init+0xbc>)
 800138e:	2200      	movs	r2, #0
 8001390:	631a      	str	r2, [r3, #48]	; 0x30
  hsram1.Init.AsynchronousWait = FSMC_ASYNCHRONOUS_WAIT_DISABLE;
 8001392:	4b14      	ldr	r3, [pc, #80]	; (80013e4 <MX_FSMC_Init+0xbc>)
 8001394:	2200      	movs	r2, #0
 8001396:	635a      	str	r2, [r3, #52]	; 0x34
  hsram1.Init.WriteBurst = FSMC_WRITE_BURST_DISABLE;
 8001398:	4b12      	ldr	r3, [pc, #72]	; (80013e4 <MX_FSMC_Init+0xbc>)
 800139a:	2200      	movs	r2, #0
 800139c:	639a      	str	r2, [r3, #56]	; 0x38
  /* Timing */
  Timing.AddressSetupTime = 15;
 800139e:	230f      	movs	r3, #15
 80013a0:	607b      	str	r3, [r7, #4]
  Timing.AddressHoldTime = 15;
 80013a2:	230f      	movs	r3, #15
 80013a4:	60bb      	str	r3, [r7, #8]
  Timing.DataSetupTime = 255;
 80013a6:	23ff      	movs	r3, #255	; 0xff
 80013a8:	60fb      	str	r3, [r7, #12]
  Timing.BusTurnAroundDuration = 15;
 80013aa:	230f      	movs	r3, #15
 80013ac:	613b      	str	r3, [r7, #16]
  Timing.CLKDivision = 16;
 80013ae:	2310      	movs	r3, #16
 80013b0:	617b      	str	r3, [r7, #20]
  Timing.DataLatency = 17;
 80013b2:	2311      	movs	r3, #17
 80013b4:	61bb      	str	r3, [r7, #24]
  Timing.AccessMode = FSMC_ACCESS_MODE_A;
 80013b6:	2300      	movs	r3, #0
 80013b8:	61fb      	str	r3, [r7, #28]
  /* ExtTiming */

  if (HAL_SRAM_Init(&hsram1, &Timing, NULL) != HAL_OK)
 80013ba:	1d3b      	adds	r3, r7, #4
 80013bc:	2200      	movs	r2, #0
 80013be:	4619      	mov	r1, r3
 80013c0:	4808      	ldr	r0, [pc, #32]	; (80013e4 <MX_FSMC_Init+0xbc>)
 80013c2:	f000 ffe1 	bl	8002388 <HAL_SRAM_Init>
 80013c6:	4603      	mov	r3, r0
 80013c8:	2b00      	cmp	r3, #0
 80013ca:	d001      	beq.n	80013d0 <MX_FSMC_Init+0xa8>
  {
    Error_Handler( );
 80013cc:	f000 f810 	bl	80013f0 <Error_Handler>
  }

  /** Disconnect NADV
  */

  __HAL_AFIO_FSMCNADV_DISCONNECTED();
 80013d0:	4b06      	ldr	r3, [pc, #24]	; (80013ec <MX_FSMC_Init+0xc4>)
 80013d2:	69db      	ldr	r3, [r3, #28]
 80013d4:	4a05      	ldr	r2, [pc, #20]	; (80013ec <MX_FSMC_Init+0xc4>)
 80013d6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80013da:	61d3      	str	r3, [r2, #28]

  /* USER CODE BEGIN FSMC_Init 2 */

  /* USER CODE END FSMC_Init 2 */
}
 80013dc:	bf00      	nop
 80013de:	3720      	adds	r7, #32
 80013e0:	46bd      	mov	sp, r7
 80013e2:	bd80      	pop	{r7, pc}
 80013e4:	20000028 	.word	0x20000028
 80013e8:	a0000104 	.word	0xa0000104
 80013ec:	40010000 	.word	0x40010000

080013f0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80013f0:	b480      	push	{r7}
 80013f2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80013f4:	b672      	cpsid	i
}
 80013f6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80013f8:	e7fe      	b.n	80013f8 <Error_Handler+0x8>
	...

080013fc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80013fc:	b480      	push	{r7}
 80013fe:	b085      	sub	sp, #20
 8001400:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001402:	4b15      	ldr	r3, [pc, #84]	; (8001458 <HAL_MspInit+0x5c>)
 8001404:	699b      	ldr	r3, [r3, #24]
 8001406:	4a14      	ldr	r2, [pc, #80]	; (8001458 <HAL_MspInit+0x5c>)
 8001408:	f043 0301 	orr.w	r3, r3, #1
 800140c:	6193      	str	r3, [r2, #24]
 800140e:	4b12      	ldr	r3, [pc, #72]	; (8001458 <HAL_MspInit+0x5c>)
 8001410:	699b      	ldr	r3, [r3, #24]
 8001412:	f003 0301 	and.w	r3, r3, #1
 8001416:	60bb      	str	r3, [r7, #8]
 8001418:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800141a:	4b0f      	ldr	r3, [pc, #60]	; (8001458 <HAL_MspInit+0x5c>)
 800141c:	69db      	ldr	r3, [r3, #28]
 800141e:	4a0e      	ldr	r2, [pc, #56]	; (8001458 <HAL_MspInit+0x5c>)
 8001420:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001424:	61d3      	str	r3, [r2, #28]
 8001426:	4b0c      	ldr	r3, [pc, #48]	; (8001458 <HAL_MspInit+0x5c>)
 8001428:	69db      	ldr	r3, [r3, #28]
 800142a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800142e:	607b      	str	r3, [r7, #4]
 8001430:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001432:	4b0a      	ldr	r3, [pc, #40]	; (800145c <HAL_MspInit+0x60>)
 8001434:	685b      	ldr	r3, [r3, #4]
 8001436:	60fb      	str	r3, [r7, #12]
 8001438:	68fb      	ldr	r3, [r7, #12]
 800143a:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800143e:	60fb      	str	r3, [r7, #12]
 8001440:	68fb      	ldr	r3, [r7, #12]
 8001442:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001446:	60fb      	str	r3, [r7, #12]
 8001448:	4a04      	ldr	r2, [pc, #16]	; (800145c <HAL_MspInit+0x60>)
 800144a:	68fb      	ldr	r3, [r7, #12]
 800144c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800144e:	bf00      	nop
 8001450:	3714      	adds	r7, #20
 8001452:	46bd      	mov	sp, r7
 8001454:	bc80      	pop	{r7}
 8001456:	4770      	bx	lr
 8001458:	40021000 	.word	0x40021000
 800145c:	40010000 	.word	0x40010000

08001460 <HAL_FSMC_MspInit>:

static uint32_t FSMC_Initialized = 0;

static void HAL_FSMC_MspInit(void){
 8001460:	b580      	push	{r7, lr}
 8001462:	b086      	sub	sp, #24
 8001464:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FSMC_MspInit 0 */

  /* USER CODE END FSMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 8001466:	f107 0308 	add.w	r3, r7, #8
 800146a:	2200      	movs	r2, #0
 800146c:	601a      	str	r2, [r3, #0]
 800146e:	605a      	str	r2, [r3, #4]
 8001470:	609a      	str	r2, [r3, #8]
 8001472:	60da      	str	r2, [r3, #12]
  if (FSMC_Initialized) {
 8001474:	4b18      	ldr	r3, [pc, #96]	; (80014d8 <HAL_FSMC_MspInit+0x78>)
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	2b00      	cmp	r3, #0
 800147a:	d129      	bne.n	80014d0 <HAL_FSMC_MspInit+0x70>
    return;
  }
  FSMC_Initialized = 1;
 800147c:	4b16      	ldr	r3, [pc, #88]	; (80014d8 <HAL_FSMC_MspInit+0x78>)
 800147e:	2201      	movs	r2, #1
 8001480:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FSMC_CLK_ENABLE();
 8001482:	4b16      	ldr	r3, [pc, #88]	; (80014dc <HAL_FSMC_MspInit+0x7c>)
 8001484:	695b      	ldr	r3, [r3, #20]
 8001486:	4a15      	ldr	r2, [pc, #84]	; (80014dc <HAL_FSMC_MspInit+0x7c>)
 8001488:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800148c:	6153      	str	r3, [r2, #20]
 800148e:	4b13      	ldr	r3, [pc, #76]	; (80014dc <HAL_FSMC_MspInit+0x7c>)
 8001490:	695b      	ldr	r3, [r3, #20]
 8001492:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001496:	607b      	str	r3, [r7, #4]
 8001498:	687b      	ldr	r3, [r7, #4]
  PD1   ------> FSMC_D3
  PD4   ------> FSMC_NOE
  PD5   ------> FSMC_NWE
  PD7   ------> FSMC_NE1
  */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
 800149a:	f64f 7380 	movw	r3, #65408	; 0xff80
 800149e:	60bb      	str	r3, [r7, #8]
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14
                          |GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014a0:	2302      	movs	r3, #2
 80014a2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80014a4:	2303      	movs	r3, #3
 80014a6:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80014a8:	f107 0308 	add.w	r3, r7, #8
 80014ac:	4619      	mov	r1, r3
 80014ae:	480c      	ldr	r0, [pc, #48]	; (80014e0 <HAL_FSMC_MspInit+0x80>)
 80014b0:	f000 f9be 	bl	8001830 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 80014b4:	f64c 73b3 	movw	r3, #53171	; 0xcfb3
 80014b8:	60bb      	str	r3, [r7, #8]
                          |GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014ba:	2302      	movs	r3, #2
 80014bc:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80014be:	2303      	movs	r3, #3
 80014c0:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80014c2:	f107 0308 	add.w	r3, r7, #8
 80014c6:	4619      	mov	r1, r3
 80014c8:	4806      	ldr	r0, [pc, #24]	; (80014e4 <HAL_FSMC_MspInit+0x84>)
 80014ca:	f000 f9b1 	bl	8001830 <HAL_GPIO_Init>
 80014ce:	e000      	b.n	80014d2 <HAL_FSMC_MspInit+0x72>
    return;
 80014d0:	bf00      	nop

  /* USER CODE BEGIN FSMC_MspInit 1 */

  /* USER CODE END FSMC_MspInit 1 */
}
 80014d2:	3718      	adds	r7, #24
 80014d4:	46bd      	mov	sp, r7
 80014d6:	bd80      	pop	{r7, pc}
 80014d8:	20000070 	.word	0x20000070
 80014dc:	40021000 	.word	0x40021000
 80014e0:	40011800 	.word	0x40011800
 80014e4:	40011400 	.word	0x40011400

080014e8 <HAL_SRAM_MspInit>:

void HAL_SRAM_MspInit(SRAM_HandleTypeDef* hsram){
 80014e8:	b580      	push	{r7, lr}
 80014ea:	b082      	sub	sp, #8
 80014ec:	af00      	add	r7, sp, #0
 80014ee:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SRAM_MspInit 0 */

  /* USER CODE END SRAM_MspInit 0 */
  HAL_FSMC_MspInit();
 80014f0:	f7ff ffb6 	bl	8001460 <HAL_FSMC_MspInit>
  /* USER CODE BEGIN SRAM_MspInit 1 */

  /* USER CODE END SRAM_MspInit 1 */
}
 80014f4:	bf00      	nop
 80014f6:	3708      	adds	r7, #8
 80014f8:	46bd      	mov	sp, r7
 80014fa:	bd80      	pop	{r7, pc}

080014fc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80014fc:	b480      	push	{r7}
 80014fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
	while (1) {
 8001500:	e7fe      	b.n	8001500 <NMI_Handler+0x4>

08001502 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001502:	b480      	push	{r7}
 8001504:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001506:	e7fe      	b.n	8001506 <HardFault_Handler+0x4>

08001508 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001508:	b480      	push	{r7}
 800150a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800150c:	e7fe      	b.n	800150c <MemManage_Handler+0x4>

0800150e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800150e:	b480      	push	{r7}
 8001510:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001512:	e7fe      	b.n	8001512 <BusFault_Handler+0x4>

08001514 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001514:	b480      	push	{r7}
 8001516:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001518:	e7fe      	b.n	8001518 <UsageFault_Handler+0x4>

0800151a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800151a:	b480      	push	{r7}
 800151c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800151e:	bf00      	nop
 8001520:	46bd      	mov	sp, r7
 8001522:	bc80      	pop	{r7}
 8001524:	4770      	bx	lr

08001526 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001526:	b480      	push	{r7}
 8001528:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800152a:	bf00      	nop
 800152c:	46bd      	mov	sp, r7
 800152e:	bc80      	pop	{r7}
 8001530:	4770      	bx	lr

08001532 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001532:	b480      	push	{r7}
 8001534:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001536:	bf00      	nop
 8001538:	46bd      	mov	sp, r7
 800153a:	bc80      	pop	{r7}
 800153c:	4770      	bx	lr

0800153e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800153e:	b580      	push	{r7, lr}
 8001540:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001542:	f000 f875 	bl	8001630 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001546:	bf00      	nop
 8001548:	bd80      	pop	{r7, pc}

0800154a <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800154a:	b480      	push	{r7}
 800154c:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800154e:	bf00      	nop
 8001550:	46bd      	mov	sp, r7
 8001552:	bc80      	pop	{r7}
 8001554:	4770      	bx	lr
	...

08001558 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001558:	f7ff fff7 	bl	800154a <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800155c:	480b      	ldr	r0, [pc, #44]	; (800158c <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 800155e:	490c      	ldr	r1, [pc, #48]	; (8001590 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001560:	4a0c      	ldr	r2, [pc, #48]	; (8001594 <LoopFillZerobss+0x16>)
  movs r3, #0
 8001562:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001564:	e002      	b.n	800156c <LoopCopyDataInit>

08001566 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001566:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001568:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800156a:	3304      	adds	r3, #4

0800156c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800156c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800156e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001570:	d3f9      	bcc.n	8001566 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001572:	4a09      	ldr	r2, [pc, #36]	; (8001598 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001574:	4c09      	ldr	r4, [pc, #36]	; (800159c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001576:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001578:	e001      	b.n	800157e <LoopFillZerobss>

0800157a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800157a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800157c:	3204      	adds	r2, #4

0800157e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800157e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001580:	d3fb      	bcc.n	800157a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001582:	f001 f825 	bl	80025d0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001586:	f7ff fd93 	bl	80010b0 <main>
  bx lr
 800158a:	4770      	bx	lr
  ldr r0, =_sdata
 800158c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001590:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8001594:	08004120 	.word	0x08004120
  ldr r2, =_sbss
 8001598:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 800159c:	20000078 	.word	0x20000078

080015a0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80015a0:	e7fe      	b.n	80015a0 <ADC1_2_IRQHandler>
	...

080015a4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80015a4:	b580      	push	{r7, lr}
 80015a6:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80015a8:	4b08      	ldr	r3, [pc, #32]	; (80015cc <HAL_Init+0x28>)
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	4a07      	ldr	r2, [pc, #28]	; (80015cc <HAL_Init+0x28>)
 80015ae:	f043 0310 	orr.w	r3, r3, #16
 80015b2:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80015b4:	2003      	movs	r0, #3
 80015b6:	f000 f907 	bl	80017c8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80015ba:	200f      	movs	r0, #15
 80015bc:	f000 f808 	bl	80015d0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80015c0:	f7ff ff1c 	bl	80013fc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80015c4:	2300      	movs	r3, #0
}
 80015c6:	4618      	mov	r0, r3
 80015c8:	bd80      	pop	{r7, pc}
 80015ca:	bf00      	nop
 80015cc:	40022000 	.word	0x40022000

080015d0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80015d0:	b580      	push	{r7, lr}
 80015d2:	b082      	sub	sp, #8
 80015d4:	af00      	add	r7, sp, #0
 80015d6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80015d8:	4b12      	ldr	r3, [pc, #72]	; (8001624 <HAL_InitTick+0x54>)
 80015da:	681a      	ldr	r2, [r3, #0]
 80015dc:	4b12      	ldr	r3, [pc, #72]	; (8001628 <HAL_InitTick+0x58>)
 80015de:	781b      	ldrb	r3, [r3, #0]
 80015e0:	4619      	mov	r1, r3
 80015e2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80015e6:	fbb3 f3f1 	udiv	r3, r3, r1
 80015ea:	fbb2 f3f3 	udiv	r3, r2, r3
 80015ee:	4618      	mov	r0, r3
 80015f0:	f000 f911 	bl	8001816 <HAL_SYSTICK_Config>
 80015f4:	4603      	mov	r3, r0
 80015f6:	2b00      	cmp	r3, #0
 80015f8:	d001      	beq.n	80015fe <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80015fa:	2301      	movs	r3, #1
 80015fc:	e00e      	b.n	800161c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	2b0f      	cmp	r3, #15
 8001602:	d80a      	bhi.n	800161a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001604:	2200      	movs	r2, #0
 8001606:	6879      	ldr	r1, [r7, #4]
 8001608:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800160c:	f000 f8e7 	bl	80017de <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001610:	4a06      	ldr	r2, [pc, #24]	; (800162c <HAL_InitTick+0x5c>)
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001616:	2300      	movs	r3, #0
 8001618:	e000      	b.n	800161c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800161a:	2301      	movs	r3, #1
}
 800161c:	4618      	mov	r0, r3
 800161e:	3708      	adds	r7, #8
 8001620:	46bd      	mov	sp, r7
 8001622:	bd80      	pop	{r7, pc}
 8001624:	20000000 	.word	0x20000000
 8001628:	20000008 	.word	0x20000008
 800162c:	20000004 	.word	0x20000004

08001630 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001630:	b480      	push	{r7}
 8001632:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001634:	4b05      	ldr	r3, [pc, #20]	; (800164c <HAL_IncTick+0x1c>)
 8001636:	781b      	ldrb	r3, [r3, #0]
 8001638:	461a      	mov	r2, r3
 800163a:	4b05      	ldr	r3, [pc, #20]	; (8001650 <HAL_IncTick+0x20>)
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	4413      	add	r3, r2
 8001640:	4a03      	ldr	r2, [pc, #12]	; (8001650 <HAL_IncTick+0x20>)
 8001642:	6013      	str	r3, [r2, #0]
}
 8001644:	bf00      	nop
 8001646:	46bd      	mov	sp, r7
 8001648:	bc80      	pop	{r7}
 800164a:	4770      	bx	lr
 800164c:	20000008 	.word	0x20000008
 8001650:	20000074 	.word	0x20000074

08001654 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001654:	b480      	push	{r7}
 8001656:	af00      	add	r7, sp, #0
  return uwTick;
 8001658:	4b02      	ldr	r3, [pc, #8]	; (8001664 <HAL_GetTick+0x10>)
 800165a:	681b      	ldr	r3, [r3, #0]
}
 800165c:	4618      	mov	r0, r3
 800165e:	46bd      	mov	sp, r7
 8001660:	bc80      	pop	{r7}
 8001662:	4770      	bx	lr
 8001664:	20000074 	.word	0x20000074

08001668 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001668:	b480      	push	{r7}
 800166a:	b085      	sub	sp, #20
 800166c:	af00      	add	r7, sp, #0
 800166e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	f003 0307 	and.w	r3, r3, #7
 8001676:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001678:	4b0c      	ldr	r3, [pc, #48]	; (80016ac <__NVIC_SetPriorityGrouping+0x44>)
 800167a:	68db      	ldr	r3, [r3, #12]
 800167c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800167e:	68ba      	ldr	r2, [r7, #8]
 8001680:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001684:	4013      	ands	r3, r2
 8001686:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001688:	68fb      	ldr	r3, [r7, #12]
 800168a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800168c:	68bb      	ldr	r3, [r7, #8]
 800168e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001690:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001694:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001698:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800169a:	4a04      	ldr	r2, [pc, #16]	; (80016ac <__NVIC_SetPriorityGrouping+0x44>)
 800169c:	68bb      	ldr	r3, [r7, #8]
 800169e:	60d3      	str	r3, [r2, #12]
}
 80016a0:	bf00      	nop
 80016a2:	3714      	adds	r7, #20
 80016a4:	46bd      	mov	sp, r7
 80016a6:	bc80      	pop	{r7}
 80016a8:	4770      	bx	lr
 80016aa:	bf00      	nop
 80016ac:	e000ed00 	.word	0xe000ed00

080016b0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80016b0:	b480      	push	{r7}
 80016b2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80016b4:	4b04      	ldr	r3, [pc, #16]	; (80016c8 <__NVIC_GetPriorityGrouping+0x18>)
 80016b6:	68db      	ldr	r3, [r3, #12]
 80016b8:	0a1b      	lsrs	r3, r3, #8
 80016ba:	f003 0307 	and.w	r3, r3, #7
}
 80016be:	4618      	mov	r0, r3
 80016c0:	46bd      	mov	sp, r7
 80016c2:	bc80      	pop	{r7}
 80016c4:	4770      	bx	lr
 80016c6:	bf00      	nop
 80016c8:	e000ed00 	.word	0xe000ed00

080016cc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80016cc:	b480      	push	{r7}
 80016ce:	b083      	sub	sp, #12
 80016d0:	af00      	add	r7, sp, #0
 80016d2:	4603      	mov	r3, r0
 80016d4:	6039      	str	r1, [r7, #0]
 80016d6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80016d8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016dc:	2b00      	cmp	r3, #0
 80016de:	db0a      	blt.n	80016f6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80016e0:	683b      	ldr	r3, [r7, #0]
 80016e2:	b2da      	uxtb	r2, r3
 80016e4:	490c      	ldr	r1, [pc, #48]	; (8001718 <__NVIC_SetPriority+0x4c>)
 80016e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016ea:	0112      	lsls	r2, r2, #4
 80016ec:	b2d2      	uxtb	r2, r2
 80016ee:	440b      	add	r3, r1
 80016f0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80016f4:	e00a      	b.n	800170c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80016f6:	683b      	ldr	r3, [r7, #0]
 80016f8:	b2da      	uxtb	r2, r3
 80016fa:	4908      	ldr	r1, [pc, #32]	; (800171c <__NVIC_SetPriority+0x50>)
 80016fc:	79fb      	ldrb	r3, [r7, #7]
 80016fe:	f003 030f 	and.w	r3, r3, #15
 8001702:	3b04      	subs	r3, #4
 8001704:	0112      	lsls	r2, r2, #4
 8001706:	b2d2      	uxtb	r2, r2
 8001708:	440b      	add	r3, r1
 800170a:	761a      	strb	r2, [r3, #24]
}
 800170c:	bf00      	nop
 800170e:	370c      	adds	r7, #12
 8001710:	46bd      	mov	sp, r7
 8001712:	bc80      	pop	{r7}
 8001714:	4770      	bx	lr
 8001716:	bf00      	nop
 8001718:	e000e100 	.word	0xe000e100
 800171c:	e000ed00 	.word	0xe000ed00

08001720 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001720:	b480      	push	{r7}
 8001722:	b089      	sub	sp, #36	; 0x24
 8001724:	af00      	add	r7, sp, #0
 8001726:	60f8      	str	r0, [r7, #12]
 8001728:	60b9      	str	r1, [r7, #8]
 800172a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800172c:	68fb      	ldr	r3, [r7, #12]
 800172e:	f003 0307 	and.w	r3, r3, #7
 8001732:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001734:	69fb      	ldr	r3, [r7, #28]
 8001736:	f1c3 0307 	rsb	r3, r3, #7
 800173a:	2b04      	cmp	r3, #4
 800173c:	bf28      	it	cs
 800173e:	2304      	movcs	r3, #4
 8001740:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001742:	69fb      	ldr	r3, [r7, #28]
 8001744:	3304      	adds	r3, #4
 8001746:	2b06      	cmp	r3, #6
 8001748:	d902      	bls.n	8001750 <NVIC_EncodePriority+0x30>
 800174a:	69fb      	ldr	r3, [r7, #28]
 800174c:	3b03      	subs	r3, #3
 800174e:	e000      	b.n	8001752 <NVIC_EncodePriority+0x32>
 8001750:	2300      	movs	r3, #0
 8001752:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001754:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001758:	69bb      	ldr	r3, [r7, #24]
 800175a:	fa02 f303 	lsl.w	r3, r2, r3
 800175e:	43da      	mvns	r2, r3
 8001760:	68bb      	ldr	r3, [r7, #8]
 8001762:	401a      	ands	r2, r3
 8001764:	697b      	ldr	r3, [r7, #20]
 8001766:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001768:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800176c:	697b      	ldr	r3, [r7, #20]
 800176e:	fa01 f303 	lsl.w	r3, r1, r3
 8001772:	43d9      	mvns	r1, r3
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001778:	4313      	orrs	r3, r2
         );
}
 800177a:	4618      	mov	r0, r3
 800177c:	3724      	adds	r7, #36	; 0x24
 800177e:	46bd      	mov	sp, r7
 8001780:	bc80      	pop	{r7}
 8001782:	4770      	bx	lr

08001784 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001784:	b580      	push	{r7, lr}
 8001786:	b082      	sub	sp, #8
 8001788:	af00      	add	r7, sp, #0
 800178a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	3b01      	subs	r3, #1
 8001790:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001794:	d301      	bcc.n	800179a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001796:	2301      	movs	r3, #1
 8001798:	e00f      	b.n	80017ba <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800179a:	4a0a      	ldr	r2, [pc, #40]	; (80017c4 <SysTick_Config+0x40>)
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	3b01      	subs	r3, #1
 80017a0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80017a2:	210f      	movs	r1, #15
 80017a4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80017a8:	f7ff ff90 	bl	80016cc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80017ac:	4b05      	ldr	r3, [pc, #20]	; (80017c4 <SysTick_Config+0x40>)
 80017ae:	2200      	movs	r2, #0
 80017b0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80017b2:	4b04      	ldr	r3, [pc, #16]	; (80017c4 <SysTick_Config+0x40>)
 80017b4:	2207      	movs	r2, #7
 80017b6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80017b8:	2300      	movs	r3, #0
}
 80017ba:	4618      	mov	r0, r3
 80017bc:	3708      	adds	r7, #8
 80017be:	46bd      	mov	sp, r7
 80017c0:	bd80      	pop	{r7, pc}
 80017c2:	bf00      	nop
 80017c4:	e000e010 	.word	0xe000e010

080017c8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80017c8:	b580      	push	{r7, lr}
 80017ca:	b082      	sub	sp, #8
 80017cc:	af00      	add	r7, sp, #0
 80017ce:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80017d0:	6878      	ldr	r0, [r7, #4]
 80017d2:	f7ff ff49 	bl	8001668 <__NVIC_SetPriorityGrouping>
}
 80017d6:	bf00      	nop
 80017d8:	3708      	adds	r7, #8
 80017da:	46bd      	mov	sp, r7
 80017dc:	bd80      	pop	{r7, pc}

080017de <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80017de:	b580      	push	{r7, lr}
 80017e0:	b086      	sub	sp, #24
 80017e2:	af00      	add	r7, sp, #0
 80017e4:	4603      	mov	r3, r0
 80017e6:	60b9      	str	r1, [r7, #8]
 80017e8:	607a      	str	r2, [r7, #4]
 80017ea:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80017ec:	2300      	movs	r3, #0
 80017ee:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80017f0:	f7ff ff5e 	bl	80016b0 <__NVIC_GetPriorityGrouping>
 80017f4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80017f6:	687a      	ldr	r2, [r7, #4]
 80017f8:	68b9      	ldr	r1, [r7, #8]
 80017fa:	6978      	ldr	r0, [r7, #20]
 80017fc:	f7ff ff90 	bl	8001720 <NVIC_EncodePriority>
 8001800:	4602      	mov	r2, r0
 8001802:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001806:	4611      	mov	r1, r2
 8001808:	4618      	mov	r0, r3
 800180a:	f7ff ff5f 	bl	80016cc <__NVIC_SetPriority>
}
 800180e:	bf00      	nop
 8001810:	3718      	adds	r7, #24
 8001812:	46bd      	mov	sp, r7
 8001814:	bd80      	pop	{r7, pc}

08001816 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001816:	b580      	push	{r7, lr}
 8001818:	b082      	sub	sp, #8
 800181a:	af00      	add	r7, sp, #0
 800181c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800181e:	6878      	ldr	r0, [r7, #4]
 8001820:	f7ff ffb0 	bl	8001784 <SysTick_Config>
 8001824:	4603      	mov	r3, r0
}
 8001826:	4618      	mov	r0, r3
 8001828:	3708      	adds	r7, #8
 800182a:	46bd      	mov	sp, r7
 800182c:	bd80      	pop	{r7, pc}
	...

08001830 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001830:	b480      	push	{r7}
 8001832:	b08b      	sub	sp, #44	; 0x2c
 8001834:	af00      	add	r7, sp, #0
 8001836:	6078      	str	r0, [r7, #4]
 8001838:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800183a:	2300      	movs	r3, #0
 800183c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800183e:	2300      	movs	r3, #0
 8001840:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001842:	e179      	b.n	8001b38 <HAL_GPIO_Init+0x308>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001844:	2201      	movs	r2, #1
 8001846:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001848:	fa02 f303 	lsl.w	r3, r2, r3
 800184c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800184e:	683b      	ldr	r3, [r7, #0]
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	69fa      	ldr	r2, [r7, #28]
 8001854:	4013      	ands	r3, r2
 8001856:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001858:	69ba      	ldr	r2, [r7, #24]
 800185a:	69fb      	ldr	r3, [r7, #28]
 800185c:	429a      	cmp	r2, r3
 800185e:	f040 8168 	bne.w	8001b32 <HAL_GPIO_Init+0x302>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001862:	683b      	ldr	r3, [r7, #0]
 8001864:	685b      	ldr	r3, [r3, #4]
 8001866:	4a96      	ldr	r2, [pc, #600]	; (8001ac0 <HAL_GPIO_Init+0x290>)
 8001868:	4293      	cmp	r3, r2
 800186a:	d05e      	beq.n	800192a <HAL_GPIO_Init+0xfa>
 800186c:	4a94      	ldr	r2, [pc, #592]	; (8001ac0 <HAL_GPIO_Init+0x290>)
 800186e:	4293      	cmp	r3, r2
 8001870:	d875      	bhi.n	800195e <HAL_GPIO_Init+0x12e>
 8001872:	4a94      	ldr	r2, [pc, #592]	; (8001ac4 <HAL_GPIO_Init+0x294>)
 8001874:	4293      	cmp	r3, r2
 8001876:	d058      	beq.n	800192a <HAL_GPIO_Init+0xfa>
 8001878:	4a92      	ldr	r2, [pc, #584]	; (8001ac4 <HAL_GPIO_Init+0x294>)
 800187a:	4293      	cmp	r3, r2
 800187c:	d86f      	bhi.n	800195e <HAL_GPIO_Init+0x12e>
 800187e:	4a92      	ldr	r2, [pc, #584]	; (8001ac8 <HAL_GPIO_Init+0x298>)
 8001880:	4293      	cmp	r3, r2
 8001882:	d052      	beq.n	800192a <HAL_GPIO_Init+0xfa>
 8001884:	4a90      	ldr	r2, [pc, #576]	; (8001ac8 <HAL_GPIO_Init+0x298>)
 8001886:	4293      	cmp	r3, r2
 8001888:	d869      	bhi.n	800195e <HAL_GPIO_Init+0x12e>
 800188a:	4a90      	ldr	r2, [pc, #576]	; (8001acc <HAL_GPIO_Init+0x29c>)
 800188c:	4293      	cmp	r3, r2
 800188e:	d04c      	beq.n	800192a <HAL_GPIO_Init+0xfa>
 8001890:	4a8e      	ldr	r2, [pc, #568]	; (8001acc <HAL_GPIO_Init+0x29c>)
 8001892:	4293      	cmp	r3, r2
 8001894:	d863      	bhi.n	800195e <HAL_GPIO_Init+0x12e>
 8001896:	4a8e      	ldr	r2, [pc, #568]	; (8001ad0 <HAL_GPIO_Init+0x2a0>)
 8001898:	4293      	cmp	r3, r2
 800189a:	d046      	beq.n	800192a <HAL_GPIO_Init+0xfa>
 800189c:	4a8c      	ldr	r2, [pc, #560]	; (8001ad0 <HAL_GPIO_Init+0x2a0>)
 800189e:	4293      	cmp	r3, r2
 80018a0:	d85d      	bhi.n	800195e <HAL_GPIO_Init+0x12e>
 80018a2:	2b12      	cmp	r3, #18
 80018a4:	d82a      	bhi.n	80018fc <HAL_GPIO_Init+0xcc>
 80018a6:	2b12      	cmp	r3, #18
 80018a8:	d859      	bhi.n	800195e <HAL_GPIO_Init+0x12e>
 80018aa:	a201      	add	r2, pc, #4	; (adr r2, 80018b0 <HAL_GPIO_Init+0x80>)
 80018ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80018b0:	0800192b 	.word	0x0800192b
 80018b4:	08001905 	.word	0x08001905
 80018b8:	08001917 	.word	0x08001917
 80018bc:	08001959 	.word	0x08001959
 80018c0:	0800195f 	.word	0x0800195f
 80018c4:	0800195f 	.word	0x0800195f
 80018c8:	0800195f 	.word	0x0800195f
 80018cc:	0800195f 	.word	0x0800195f
 80018d0:	0800195f 	.word	0x0800195f
 80018d4:	0800195f 	.word	0x0800195f
 80018d8:	0800195f 	.word	0x0800195f
 80018dc:	0800195f 	.word	0x0800195f
 80018e0:	0800195f 	.word	0x0800195f
 80018e4:	0800195f 	.word	0x0800195f
 80018e8:	0800195f 	.word	0x0800195f
 80018ec:	0800195f 	.word	0x0800195f
 80018f0:	0800195f 	.word	0x0800195f
 80018f4:	0800190d 	.word	0x0800190d
 80018f8:	08001921 	.word	0x08001921
 80018fc:	4a75      	ldr	r2, [pc, #468]	; (8001ad4 <HAL_GPIO_Init+0x2a4>)
 80018fe:	4293      	cmp	r3, r2
 8001900:	d013      	beq.n	800192a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001902:	e02c      	b.n	800195e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001904:	683b      	ldr	r3, [r7, #0]
 8001906:	68db      	ldr	r3, [r3, #12]
 8001908:	623b      	str	r3, [r7, #32]
          break;
 800190a:	e029      	b.n	8001960 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 800190c:	683b      	ldr	r3, [r7, #0]
 800190e:	68db      	ldr	r3, [r3, #12]
 8001910:	3304      	adds	r3, #4
 8001912:	623b      	str	r3, [r7, #32]
          break;
 8001914:	e024      	b.n	8001960 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001916:	683b      	ldr	r3, [r7, #0]
 8001918:	68db      	ldr	r3, [r3, #12]
 800191a:	3308      	adds	r3, #8
 800191c:	623b      	str	r3, [r7, #32]
          break;
 800191e:	e01f      	b.n	8001960 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001920:	683b      	ldr	r3, [r7, #0]
 8001922:	68db      	ldr	r3, [r3, #12]
 8001924:	330c      	adds	r3, #12
 8001926:	623b      	str	r3, [r7, #32]
          break;
 8001928:	e01a      	b.n	8001960 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800192a:	683b      	ldr	r3, [r7, #0]
 800192c:	689b      	ldr	r3, [r3, #8]
 800192e:	2b00      	cmp	r3, #0
 8001930:	d102      	bne.n	8001938 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001932:	2304      	movs	r3, #4
 8001934:	623b      	str	r3, [r7, #32]
          break;
 8001936:	e013      	b.n	8001960 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001938:	683b      	ldr	r3, [r7, #0]
 800193a:	689b      	ldr	r3, [r3, #8]
 800193c:	2b01      	cmp	r3, #1
 800193e:	d105      	bne.n	800194c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001940:	2308      	movs	r3, #8
 8001942:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	69fa      	ldr	r2, [r7, #28]
 8001948:	611a      	str	r2, [r3, #16]
          break;
 800194a:	e009      	b.n	8001960 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800194c:	2308      	movs	r3, #8
 800194e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	69fa      	ldr	r2, [r7, #28]
 8001954:	615a      	str	r2, [r3, #20]
          break;
 8001956:	e003      	b.n	8001960 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001958:	2300      	movs	r3, #0
 800195a:	623b      	str	r3, [r7, #32]
          break;
 800195c:	e000      	b.n	8001960 <HAL_GPIO_Init+0x130>
          break;
 800195e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001960:	69bb      	ldr	r3, [r7, #24]
 8001962:	2bff      	cmp	r3, #255	; 0xff
 8001964:	d801      	bhi.n	800196a <HAL_GPIO_Init+0x13a>
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	e001      	b.n	800196e <HAL_GPIO_Init+0x13e>
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	3304      	adds	r3, #4
 800196e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001970:	69bb      	ldr	r3, [r7, #24]
 8001972:	2bff      	cmp	r3, #255	; 0xff
 8001974:	d802      	bhi.n	800197c <HAL_GPIO_Init+0x14c>
 8001976:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001978:	009b      	lsls	r3, r3, #2
 800197a:	e002      	b.n	8001982 <HAL_GPIO_Init+0x152>
 800197c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800197e:	3b08      	subs	r3, #8
 8001980:	009b      	lsls	r3, r3, #2
 8001982:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001984:	697b      	ldr	r3, [r7, #20]
 8001986:	681a      	ldr	r2, [r3, #0]
 8001988:	210f      	movs	r1, #15
 800198a:	693b      	ldr	r3, [r7, #16]
 800198c:	fa01 f303 	lsl.w	r3, r1, r3
 8001990:	43db      	mvns	r3, r3
 8001992:	401a      	ands	r2, r3
 8001994:	6a39      	ldr	r1, [r7, #32]
 8001996:	693b      	ldr	r3, [r7, #16]
 8001998:	fa01 f303 	lsl.w	r3, r1, r3
 800199c:	431a      	orrs	r2, r3
 800199e:	697b      	ldr	r3, [r7, #20]
 80019a0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80019a2:	683b      	ldr	r3, [r7, #0]
 80019a4:	685b      	ldr	r3, [r3, #4]
 80019a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80019aa:	2b00      	cmp	r3, #0
 80019ac:	f000 80c1 	beq.w	8001b32 <HAL_GPIO_Init+0x302>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80019b0:	4b49      	ldr	r3, [pc, #292]	; (8001ad8 <HAL_GPIO_Init+0x2a8>)
 80019b2:	699b      	ldr	r3, [r3, #24]
 80019b4:	4a48      	ldr	r2, [pc, #288]	; (8001ad8 <HAL_GPIO_Init+0x2a8>)
 80019b6:	f043 0301 	orr.w	r3, r3, #1
 80019ba:	6193      	str	r3, [r2, #24]
 80019bc:	4b46      	ldr	r3, [pc, #280]	; (8001ad8 <HAL_GPIO_Init+0x2a8>)
 80019be:	699b      	ldr	r3, [r3, #24]
 80019c0:	f003 0301 	and.w	r3, r3, #1
 80019c4:	60bb      	str	r3, [r7, #8]
 80019c6:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80019c8:	4a44      	ldr	r2, [pc, #272]	; (8001adc <HAL_GPIO_Init+0x2ac>)
 80019ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019cc:	089b      	lsrs	r3, r3, #2
 80019ce:	3302      	adds	r3, #2
 80019d0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80019d4:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80019d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019d8:	f003 0303 	and.w	r3, r3, #3
 80019dc:	009b      	lsls	r3, r3, #2
 80019de:	220f      	movs	r2, #15
 80019e0:	fa02 f303 	lsl.w	r3, r2, r3
 80019e4:	43db      	mvns	r3, r3
 80019e6:	68fa      	ldr	r2, [r7, #12]
 80019e8:	4013      	ands	r3, r2
 80019ea:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	4a3c      	ldr	r2, [pc, #240]	; (8001ae0 <HAL_GPIO_Init+0x2b0>)
 80019f0:	4293      	cmp	r3, r2
 80019f2:	d01f      	beq.n	8001a34 <HAL_GPIO_Init+0x204>
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	4a3b      	ldr	r2, [pc, #236]	; (8001ae4 <HAL_GPIO_Init+0x2b4>)
 80019f8:	4293      	cmp	r3, r2
 80019fa:	d019      	beq.n	8001a30 <HAL_GPIO_Init+0x200>
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	4a3a      	ldr	r2, [pc, #232]	; (8001ae8 <HAL_GPIO_Init+0x2b8>)
 8001a00:	4293      	cmp	r3, r2
 8001a02:	d013      	beq.n	8001a2c <HAL_GPIO_Init+0x1fc>
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	4a39      	ldr	r2, [pc, #228]	; (8001aec <HAL_GPIO_Init+0x2bc>)
 8001a08:	4293      	cmp	r3, r2
 8001a0a:	d00d      	beq.n	8001a28 <HAL_GPIO_Init+0x1f8>
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	4a38      	ldr	r2, [pc, #224]	; (8001af0 <HAL_GPIO_Init+0x2c0>)
 8001a10:	4293      	cmp	r3, r2
 8001a12:	d007      	beq.n	8001a24 <HAL_GPIO_Init+0x1f4>
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	4a37      	ldr	r2, [pc, #220]	; (8001af4 <HAL_GPIO_Init+0x2c4>)
 8001a18:	4293      	cmp	r3, r2
 8001a1a:	d101      	bne.n	8001a20 <HAL_GPIO_Init+0x1f0>
 8001a1c:	2305      	movs	r3, #5
 8001a1e:	e00a      	b.n	8001a36 <HAL_GPIO_Init+0x206>
 8001a20:	2306      	movs	r3, #6
 8001a22:	e008      	b.n	8001a36 <HAL_GPIO_Init+0x206>
 8001a24:	2304      	movs	r3, #4
 8001a26:	e006      	b.n	8001a36 <HAL_GPIO_Init+0x206>
 8001a28:	2303      	movs	r3, #3
 8001a2a:	e004      	b.n	8001a36 <HAL_GPIO_Init+0x206>
 8001a2c:	2302      	movs	r3, #2
 8001a2e:	e002      	b.n	8001a36 <HAL_GPIO_Init+0x206>
 8001a30:	2301      	movs	r3, #1
 8001a32:	e000      	b.n	8001a36 <HAL_GPIO_Init+0x206>
 8001a34:	2300      	movs	r3, #0
 8001a36:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001a38:	f002 0203 	and.w	r2, r2, #3
 8001a3c:	0092      	lsls	r2, r2, #2
 8001a3e:	4093      	lsls	r3, r2
 8001a40:	68fa      	ldr	r2, [r7, #12]
 8001a42:	4313      	orrs	r3, r2
 8001a44:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001a46:	4925      	ldr	r1, [pc, #148]	; (8001adc <HAL_GPIO_Init+0x2ac>)
 8001a48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a4a:	089b      	lsrs	r3, r3, #2
 8001a4c:	3302      	adds	r3, #2
 8001a4e:	68fa      	ldr	r2, [r7, #12]
 8001a50:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001a54:	683b      	ldr	r3, [r7, #0]
 8001a56:	685b      	ldr	r3, [r3, #4]
 8001a58:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001a5c:	2b00      	cmp	r3, #0
 8001a5e:	d006      	beq.n	8001a6e <HAL_GPIO_Init+0x23e>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001a60:	4b25      	ldr	r3, [pc, #148]	; (8001af8 <HAL_GPIO_Init+0x2c8>)
 8001a62:	681a      	ldr	r2, [r3, #0]
 8001a64:	4924      	ldr	r1, [pc, #144]	; (8001af8 <HAL_GPIO_Init+0x2c8>)
 8001a66:	69bb      	ldr	r3, [r7, #24]
 8001a68:	4313      	orrs	r3, r2
 8001a6a:	600b      	str	r3, [r1, #0]
 8001a6c:	e006      	b.n	8001a7c <HAL_GPIO_Init+0x24c>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001a6e:	4b22      	ldr	r3, [pc, #136]	; (8001af8 <HAL_GPIO_Init+0x2c8>)
 8001a70:	681a      	ldr	r2, [r3, #0]
 8001a72:	69bb      	ldr	r3, [r7, #24]
 8001a74:	43db      	mvns	r3, r3
 8001a76:	4920      	ldr	r1, [pc, #128]	; (8001af8 <HAL_GPIO_Init+0x2c8>)
 8001a78:	4013      	ands	r3, r2
 8001a7a:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001a7c:	683b      	ldr	r3, [r7, #0]
 8001a7e:	685b      	ldr	r3, [r3, #4]
 8001a80:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a84:	2b00      	cmp	r3, #0
 8001a86:	d006      	beq.n	8001a96 <HAL_GPIO_Init+0x266>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001a88:	4b1b      	ldr	r3, [pc, #108]	; (8001af8 <HAL_GPIO_Init+0x2c8>)
 8001a8a:	685a      	ldr	r2, [r3, #4]
 8001a8c:	491a      	ldr	r1, [pc, #104]	; (8001af8 <HAL_GPIO_Init+0x2c8>)
 8001a8e:	69bb      	ldr	r3, [r7, #24]
 8001a90:	4313      	orrs	r3, r2
 8001a92:	604b      	str	r3, [r1, #4]
 8001a94:	e006      	b.n	8001aa4 <HAL_GPIO_Init+0x274>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001a96:	4b18      	ldr	r3, [pc, #96]	; (8001af8 <HAL_GPIO_Init+0x2c8>)
 8001a98:	685a      	ldr	r2, [r3, #4]
 8001a9a:	69bb      	ldr	r3, [r7, #24]
 8001a9c:	43db      	mvns	r3, r3
 8001a9e:	4916      	ldr	r1, [pc, #88]	; (8001af8 <HAL_GPIO_Init+0x2c8>)
 8001aa0:	4013      	ands	r3, r2
 8001aa2:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001aa4:	683b      	ldr	r3, [r7, #0]
 8001aa6:	685b      	ldr	r3, [r3, #4]
 8001aa8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001aac:	2b00      	cmp	r3, #0
 8001aae:	d025      	beq.n	8001afc <HAL_GPIO_Init+0x2cc>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001ab0:	4b11      	ldr	r3, [pc, #68]	; (8001af8 <HAL_GPIO_Init+0x2c8>)
 8001ab2:	689a      	ldr	r2, [r3, #8]
 8001ab4:	4910      	ldr	r1, [pc, #64]	; (8001af8 <HAL_GPIO_Init+0x2c8>)
 8001ab6:	69bb      	ldr	r3, [r7, #24]
 8001ab8:	4313      	orrs	r3, r2
 8001aba:	608b      	str	r3, [r1, #8]
 8001abc:	e025      	b.n	8001b0a <HAL_GPIO_Init+0x2da>
 8001abe:	bf00      	nop
 8001ac0:	10320000 	.word	0x10320000
 8001ac4:	10310000 	.word	0x10310000
 8001ac8:	10220000 	.word	0x10220000
 8001acc:	10210000 	.word	0x10210000
 8001ad0:	10120000 	.word	0x10120000
 8001ad4:	10110000 	.word	0x10110000
 8001ad8:	40021000 	.word	0x40021000
 8001adc:	40010000 	.word	0x40010000
 8001ae0:	40010800 	.word	0x40010800
 8001ae4:	40010c00 	.word	0x40010c00
 8001ae8:	40011000 	.word	0x40011000
 8001aec:	40011400 	.word	0x40011400
 8001af0:	40011800 	.word	0x40011800
 8001af4:	40011c00 	.word	0x40011c00
 8001af8:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001afc:	4b15      	ldr	r3, [pc, #84]	; (8001b54 <HAL_GPIO_Init+0x324>)
 8001afe:	689a      	ldr	r2, [r3, #8]
 8001b00:	69bb      	ldr	r3, [r7, #24]
 8001b02:	43db      	mvns	r3, r3
 8001b04:	4913      	ldr	r1, [pc, #76]	; (8001b54 <HAL_GPIO_Init+0x324>)
 8001b06:	4013      	ands	r3, r2
 8001b08:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001b0a:	683b      	ldr	r3, [r7, #0]
 8001b0c:	685b      	ldr	r3, [r3, #4]
 8001b0e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001b12:	2b00      	cmp	r3, #0
 8001b14:	d006      	beq.n	8001b24 <HAL_GPIO_Init+0x2f4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001b16:	4b0f      	ldr	r3, [pc, #60]	; (8001b54 <HAL_GPIO_Init+0x324>)
 8001b18:	68da      	ldr	r2, [r3, #12]
 8001b1a:	490e      	ldr	r1, [pc, #56]	; (8001b54 <HAL_GPIO_Init+0x324>)
 8001b1c:	69bb      	ldr	r3, [r7, #24]
 8001b1e:	4313      	orrs	r3, r2
 8001b20:	60cb      	str	r3, [r1, #12]
 8001b22:	e006      	b.n	8001b32 <HAL_GPIO_Init+0x302>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001b24:	4b0b      	ldr	r3, [pc, #44]	; (8001b54 <HAL_GPIO_Init+0x324>)
 8001b26:	68da      	ldr	r2, [r3, #12]
 8001b28:	69bb      	ldr	r3, [r7, #24]
 8001b2a:	43db      	mvns	r3, r3
 8001b2c:	4909      	ldr	r1, [pc, #36]	; (8001b54 <HAL_GPIO_Init+0x324>)
 8001b2e:	4013      	ands	r3, r2
 8001b30:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8001b32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b34:	3301      	adds	r3, #1
 8001b36:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001b38:	683b      	ldr	r3, [r7, #0]
 8001b3a:	681a      	ldr	r2, [r3, #0]
 8001b3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b3e:	fa22 f303 	lsr.w	r3, r2, r3
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	f47f ae7e 	bne.w	8001844 <HAL_GPIO_Init+0x14>
  }
}
 8001b48:	bf00      	nop
 8001b4a:	bf00      	nop
 8001b4c:	372c      	adds	r7, #44	; 0x2c
 8001b4e:	46bd      	mov	sp, r7
 8001b50:	bc80      	pop	{r7}
 8001b52:	4770      	bx	lr
 8001b54:	40010400 	.word	0x40010400

08001b58 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001b58:	b480      	push	{r7}
 8001b5a:	b085      	sub	sp, #20
 8001b5c:	af00      	add	r7, sp, #0
 8001b5e:	6078      	str	r0, [r7, #4]
 8001b60:	460b      	mov	r3, r1
 8001b62:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	689a      	ldr	r2, [r3, #8]
 8001b68:	887b      	ldrh	r3, [r7, #2]
 8001b6a:	4013      	ands	r3, r2
 8001b6c:	2b00      	cmp	r3, #0
 8001b6e:	d002      	beq.n	8001b76 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001b70:	2301      	movs	r3, #1
 8001b72:	73fb      	strb	r3, [r7, #15]
 8001b74:	e001      	b.n	8001b7a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001b76:	2300      	movs	r3, #0
 8001b78:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001b7a:	7bfb      	ldrb	r3, [r7, #15]
}
 8001b7c:	4618      	mov	r0, r3
 8001b7e:	3714      	adds	r7, #20
 8001b80:	46bd      	mov	sp, r7
 8001b82:	bc80      	pop	{r7}
 8001b84:	4770      	bx	lr

08001b86 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001b86:	b480      	push	{r7}
 8001b88:	b083      	sub	sp, #12
 8001b8a:	af00      	add	r7, sp, #0
 8001b8c:	6078      	str	r0, [r7, #4]
 8001b8e:	460b      	mov	r3, r1
 8001b90:	807b      	strh	r3, [r7, #2]
 8001b92:	4613      	mov	r3, r2
 8001b94:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001b96:	787b      	ldrb	r3, [r7, #1]
 8001b98:	2b00      	cmp	r3, #0
 8001b9a:	d003      	beq.n	8001ba4 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001b9c:	887a      	ldrh	r2, [r7, #2]
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001ba2:	e003      	b.n	8001bac <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001ba4:	887b      	ldrh	r3, [r7, #2]
 8001ba6:	041a      	lsls	r2, r3, #16
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	611a      	str	r2, [r3, #16]
}
 8001bac:	bf00      	nop
 8001bae:	370c      	adds	r7, #12
 8001bb0:	46bd      	mov	sp, r7
 8001bb2:	bc80      	pop	{r7}
 8001bb4:	4770      	bx	lr
	...

08001bb8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001bb8:	b580      	push	{r7, lr}
 8001bba:	b086      	sub	sp, #24
 8001bbc:	af00      	add	r7, sp, #0
 8001bbe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	2b00      	cmp	r3, #0
 8001bc4:	d101      	bne.n	8001bca <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001bc6:	2301      	movs	r3, #1
 8001bc8:	e272      	b.n	80020b0 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	f003 0301 	and.w	r3, r3, #1
 8001bd2:	2b00      	cmp	r3, #0
 8001bd4:	f000 8087 	beq.w	8001ce6 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001bd8:	4b92      	ldr	r3, [pc, #584]	; (8001e24 <HAL_RCC_OscConfig+0x26c>)
 8001bda:	685b      	ldr	r3, [r3, #4]
 8001bdc:	f003 030c 	and.w	r3, r3, #12
 8001be0:	2b04      	cmp	r3, #4
 8001be2:	d00c      	beq.n	8001bfe <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001be4:	4b8f      	ldr	r3, [pc, #572]	; (8001e24 <HAL_RCC_OscConfig+0x26c>)
 8001be6:	685b      	ldr	r3, [r3, #4]
 8001be8:	f003 030c 	and.w	r3, r3, #12
 8001bec:	2b08      	cmp	r3, #8
 8001bee:	d112      	bne.n	8001c16 <HAL_RCC_OscConfig+0x5e>
 8001bf0:	4b8c      	ldr	r3, [pc, #560]	; (8001e24 <HAL_RCC_OscConfig+0x26c>)
 8001bf2:	685b      	ldr	r3, [r3, #4]
 8001bf4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001bf8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001bfc:	d10b      	bne.n	8001c16 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001bfe:	4b89      	ldr	r3, [pc, #548]	; (8001e24 <HAL_RCC_OscConfig+0x26c>)
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c06:	2b00      	cmp	r3, #0
 8001c08:	d06c      	beq.n	8001ce4 <HAL_RCC_OscConfig+0x12c>
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	685b      	ldr	r3, [r3, #4]
 8001c0e:	2b00      	cmp	r3, #0
 8001c10:	d168      	bne.n	8001ce4 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001c12:	2301      	movs	r3, #1
 8001c14:	e24c      	b.n	80020b0 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	685b      	ldr	r3, [r3, #4]
 8001c1a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001c1e:	d106      	bne.n	8001c2e <HAL_RCC_OscConfig+0x76>
 8001c20:	4b80      	ldr	r3, [pc, #512]	; (8001e24 <HAL_RCC_OscConfig+0x26c>)
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	4a7f      	ldr	r2, [pc, #508]	; (8001e24 <HAL_RCC_OscConfig+0x26c>)
 8001c26:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001c2a:	6013      	str	r3, [r2, #0]
 8001c2c:	e02e      	b.n	8001c8c <HAL_RCC_OscConfig+0xd4>
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	685b      	ldr	r3, [r3, #4]
 8001c32:	2b00      	cmp	r3, #0
 8001c34:	d10c      	bne.n	8001c50 <HAL_RCC_OscConfig+0x98>
 8001c36:	4b7b      	ldr	r3, [pc, #492]	; (8001e24 <HAL_RCC_OscConfig+0x26c>)
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	4a7a      	ldr	r2, [pc, #488]	; (8001e24 <HAL_RCC_OscConfig+0x26c>)
 8001c3c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001c40:	6013      	str	r3, [r2, #0]
 8001c42:	4b78      	ldr	r3, [pc, #480]	; (8001e24 <HAL_RCC_OscConfig+0x26c>)
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	4a77      	ldr	r2, [pc, #476]	; (8001e24 <HAL_RCC_OscConfig+0x26c>)
 8001c48:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001c4c:	6013      	str	r3, [r2, #0]
 8001c4e:	e01d      	b.n	8001c8c <HAL_RCC_OscConfig+0xd4>
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	685b      	ldr	r3, [r3, #4]
 8001c54:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001c58:	d10c      	bne.n	8001c74 <HAL_RCC_OscConfig+0xbc>
 8001c5a:	4b72      	ldr	r3, [pc, #456]	; (8001e24 <HAL_RCC_OscConfig+0x26c>)
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	4a71      	ldr	r2, [pc, #452]	; (8001e24 <HAL_RCC_OscConfig+0x26c>)
 8001c60:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001c64:	6013      	str	r3, [r2, #0]
 8001c66:	4b6f      	ldr	r3, [pc, #444]	; (8001e24 <HAL_RCC_OscConfig+0x26c>)
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	4a6e      	ldr	r2, [pc, #440]	; (8001e24 <HAL_RCC_OscConfig+0x26c>)
 8001c6c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001c70:	6013      	str	r3, [r2, #0]
 8001c72:	e00b      	b.n	8001c8c <HAL_RCC_OscConfig+0xd4>
 8001c74:	4b6b      	ldr	r3, [pc, #428]	; (8001e24 <HAL_RCC_OscConfig+0x26c>)
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	4a6a      	ldr	r2, [pc, #424]	; (8001e24 <HAL_RCC_OscConfig+0x26c>)
 8001c7a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001c7e:	6013      	str	r3, [r2, #0]
 8001c80:	4b68      	ldr	r3, [pc, #416]	; (8001e24 <HAL_RCC_OscConfig+0x26c>)
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	4a67      	ldr	r2, [pc, #412]	; (8001e24 <HAL_RCC_OscConfig+0x26c>)
 8001c86:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001c8a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	685b      	ldr	r3, [r3, #4]
 8001c90:	2b00      	cmp	r3, #0
 8001c92:	d013      	beq.n	8001cbc <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c94:	f7ff fcde 	bl	8001654 <HAL_GetTick>
 8001c98:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c9a:	e008      	b.n	8001cae <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001c9c:	f7ff fcda 	bl	8001654 <HAL_GetTick>
 8001ca0:	4602      	mov	r2, r0
 8001ca2:	693b      	ldr	r3, [r7, #16]
 8001ca4:	1ad3      	subs	r3, r2, r3
 8001ca6:	2b64      	cmp	r3, #100	; 0x64
 8001ca8:	d901      	bls.n	8001cae <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001caa:	2303      	movs	r3, #3
 8001cac:	e200      	b.n	80020b0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001cae:	4b5d      	ldr	r3, [pc, #372]	; (8001e24 <HAL_RCC_OscConfig+0x26c>)
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	d0f0      	beq.n	8001c9c <HAL_RCC_OscConfig+0xe4>
 8001cba:	e014      	b.n	8001ce6 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001cbc:	f7ff fcca 	bl	8001654 <HAL_GetTick>
 8001cc0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001cc2:	e008      	b.n	8001cd6 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001cc4:	f7ff fcc6 	bl	8001654 <HAL_GetTick>
 8001cc8:	4602      	mov	r2, r0
 8001cca:	693b      	ldr	r3, [r7, #16]
 8001ccc:	1ad3      	subs	r3, r2, r3
 8001cce:	2b64      	cmp	r3, #100	; 0x64
 8001cd0:	d901      	bls.n	8001cd6 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001cd2:	2303      	movs	r3, #3
 8001cd4:	e1ec      	b.n	80020b0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001cd6:	4b53      	ldr	r3, [pc, #332]	; (8001e24 <HAL_RCC_OscConfig+0x26c>)
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001cde:	2b00      	cmp	r3, #0
 8001ce0:	d1f0      	bne.n	8001cc4 <HAL_RCC_OscConfig+0x10c>
 8001ce2:	e000      	b.n	8001ce6 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001ce4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	f003 0302 	and.w	r3, r3, #2
 8001cee:	2b00      	cmp	r3, #0
 8001cf0:	d063      	beq.n	8001dba <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001cf2:	4b4c      	ldr	r3, [pc, #304]	; (8001e24 <HAL_RCC_OscConfig+0x26c>)
 8001cf4:	685b      	ldr	r3, [r3, #4]
 8001cf6:	f003 030c 	and.w	r3, r3, #12
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	d00b      	beq.n	8001d16 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001cfe:	4b49      	ldr	r3, [pc, #292]	; (8001e24 <HAL_RCC_OscConfig+0x26c>)
 8001d00:	685b      	ldr	r3, [r3, #4]
 8001d02:	f003 030c 	and.w	r3, r3, #12
 8001d06:	2b08      	cmp	r3, #8
 8001d08:	d11c      	bne.n	8001d44 <HAL_RCC_OscConfig+0x18c>
 8001d0a:	4b46      	ldr	r3, [pc, #280]	; (8001e24 <HAL_RCC_OscConfig+0x26c>)
 8001d0c:	685b      	ldr	r3, [r3, #4]
 8001d0e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	d116      	bne.n	8001d44 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001d16:	4b43      	ldr	r3, [pc, #268]	; (8001e24 <HAL_RCC_OscConfig+0x26c>)
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	f003 0302 	and.w	r3, r3, #2
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	d005      	beq.n	8001d2e <HAL_RCC_OscConfig+0x176>
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	691b      	ldr	r3, [r3, #16]
 8001d26:	2b01      	cmp	r3, #1
 8001d28:	d001      	beq.n	8001d2e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001d2a:	2301      	movs	r3, #1
 8001d2c:	e1c0      	b.n	80020b0 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001d2e:	4b3d      	ldr	r3, [pc, #244]	; (8001e24 <HAL_RCC_OscConfig+0x26c>)
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	695b      	ldr	r3, [r3, #20]
 8001d3a:	00db      	lsls	r3, r3, #3
 8001d3c:	4939      	ldr	r1, [pc, #228]	; (8001e24 <HAL_RCC_OscConfig+0x26c>)
 8001d3e:	4313      	orrs	r3, r2
 8001d40:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001d42:	e03a      	b.n	8001dba <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	691b      	ldr	r3, [r3, #16]
 8001d48:	2b00      	cmp	r3, #0
 8001d4a:	d020      	beq.n	8001d8e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001d4c:	4b36      	ldr	r3, [pc, #216]	; (8001e28 <HAL_RCC_OscConfig+0x270>)
 8001d4e:	2201      	movs	r2, #1
 8001d50:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d52:	f7ff fc7f 	bl	8001654 <HAL_GetTick>
 8001d56:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d58:	e008      	b.n	8001d6c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001d5a:	f7ff fc7b 	bl	8001654 <HAL_GetTick>
 8001d5e:	4602      	mov	r2, r0
 8001d60:	693b      	ldr	r3, [r7, #16]
 8001d62:	1ad3      	subs	r3, r2, r3
 8001d64:	2b02      	cmp	r3, #2
 8001d66:	d901      	bls.n	8001d6c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001d68:	2303      	movs	r3, #3
 8001d6a:	e1a1      	b.n	80020b0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d6c:	4b2d      	ldr	r3, [pc, #180]	; (8001e24 <HAL_RCC_OscConfig+0x26c>)
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	f003 0302 	and.w	r3, r3, #2
 8001d74:	2b00      	cmp	r3, #0
 8001d76:	d0f0      	beq.n	8001d5a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001d78:	4b2a      	ldr	r3, [pc, #168]	; (8001e24 <HAL_RCC_OscConfig+0x26c>)
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	695b      	ldr	r3, [r3, #20]
 8001d84:	00db      	lsls	r3, r3, #3
 8001d86:	4927      	ldr	r1, [pc, #156]	; (8001e24 <HAL_RCC_OscConfig+0x26c>)
 8001d88:	4313      	orrs	r3, r2
 8001d8a:	600b      	str	r3, [r1, #0]
 8001d8c:	e015      	b.n	8001dba <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001d8e:	4b26      	ldr	r3, [pc, #152]	; (8001e28 <HAL_RCC_OscConfig+0x270>)
 8001d90:	2200      	movs	r2, #0
 8001d92:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d94:	f7ff fc5e 	bl	8001654 <HAL_GetTick>
 8001d98:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001d9a:	e008      	b.n	8001dae <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001d9c:	f7ff fc5a 	bl	8001654 <HAL_GetTick>
 8001da0:	4602      	mov	r2, r0
 8001da2:	693b      	ldr	r3, [r7, #16]
 8001da4:	1ad3      	subs	r3, r2, r3
 8001da6:	2b02      	cmp	r3, #2
 8001da8:	d901      	bls.n	8001dae <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001daa:	2303      	movs	r3, #3
 8001dac:	e180      	b.n	80020b0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001dae:	4b1d      	ldr	r3, [pc, #116]	; (8001e24 <HAL_RCC_OscConfig+0x26c>)
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	f003 0302 	and.w	r3, r3, #2
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	d1f0      	bne.n	8001d9c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	f003 0308 	and.w	r3, r3, #8
 8001dc2:	2b00      	cmp	r3, #0
 8001dc4:	d03a      	beq.n	8001e3c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	699b      	ldr	r3, [r3, #24]
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	d019      	beq.n	8001e02 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001dce:	4b17      	ldr	r3, [pc, #92]	; (8001e2c <HAL_RCC_OscConfig+0x274>)
 8001dd0:	2201      	movs	r2, #1
 8001dd2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001dd4:	f7ff fc3e 	bl	8001654 <HAL_GetTick>
 8001dd8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001dda:	e008      	b.n	8001dee <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001ddc:	f7ff fc3a 	bl	8001654 <HAL_GetTick>
 8001de0:	4602      	mov	r2, r0
 8001de2:	693b      	ldr	r3, [r7, #16]
 8001de4:	1ad3      	subs	r3, r2, r3
 8001de6:	2b02      	cmp	r3, #2
 8001de8:	d901      	bls.n	8001dee <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001dea:	2303      	movs	r3, #3
 8001dec:	e160      	b.n	80020b0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001dee:	4b0d      	ldr	r3, [pc, #52]	; (8001e24 <HAL_RCC_OscConfig+0x26c>)
 8001df0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001df2:	f003 0302 	and.w	r3, r3, #2
 8001df6:	2b00      	cmp	r3, #0
 8001df8:	d0f0      	beq.n	8001ddc <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001dfa:	2001      	movs	r0, #1
 8001dfc:	f000 faa6 	bl	800234c <RCC_Delay>
 8001e00:	e01c      	b.n	8001e3c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001e02:	4b0a      	ldr	r3, [pc, #40]	; (8001e2c <HAL_RCC_OscConfig+0x274>)
 8001e04:	2200      	movs	r2, #0
 8001e06:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e08:	f7ff fc24 	bl	8001654 <HAL_GetTick>
 8001e0c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001e0e:	e00f      	b.n	8001e30 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001e10:	f7ff fc20 	bl	8001654 <HAL_GetTick>
 8001e14:	4602      	mov	r2, r0
 8001e16:	693b      	ldr	r3, [r7, #16]
 8001e18:	1ad3      	subs	r3, r2, r3
 8001e1a:	2b02      	cmp	r3, #2
 8001e1c:	d908      	bls.n	8001e30 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001e1e:	2303      	movs	r3, #3
 8001e20:	e146      	b.n	80020b0 <HAL_RCC_OscConfig+0x4f8>
 8001e22:	bf00      	nop
 8001e24:	40021000 	.word	0x40021000
 8001e28:	42420000 	.word	0x42420000
 8001e2c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001e30:	4b92      	ldr	r3, [pc, #584]	; (800207c <HAL_RCC_OscConfig+0x4c4>)
 8001e32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e34:	f003 0302 	and.w	r3, r3, #2
 8001e38:	2b00      	cmp	r3, #0
 8001e3a:	d1e9      	bne.n	8001e10 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	f003 0304 	and.w	r3, r3, #4
 8001e44:	2b00      	cmp	r3, #0
 8001e46:	f000 80a6 	beq.w	8001f96 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001e4a:	2300      	movs	r3, #0
 8001e4c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001e4e:	4b8b      	ldr	r3, [pc, #556]	; (800207c <HAL_RCC_OscConfig+0x4c4>)
 8001e50:	69db      	ldr	r3, [r3, #28]
 8001e52:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	d10d      	bne.n	8001e76 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001e5a:	4b88      	ldr	r3, [pc, #544]	; (800207c <HAL_RCC_OscConfig+0x4c4>)
 8001e5c:	69db      	ldr	r3, [r3, #28]
 8001e5e:	4a87      	ldr	r2, [pc, #540]	; (800207c <HAL_RCC_OscConfig+0x4c4>)
 8001e60:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001e64:	61d3      	str	r3, [r2, #28]
 8001e66:	4b85      	ldr	r3, [pc, #532]	; (800207c <HAL_RCC_OscConfig+0x4c4>)
 8001e68:	69db      	ldr	r3, [r3, #28]
 8001e6a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e6e:	60bb      	str	r3, [r7, #8]
 8001e70:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001e72:	2301      	movs	r3, #1
 8001e74:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e76:	4b82      	ldr	r3, [pc, #520]	; (8002080 <HAL_RCC_OscConfig+0x4c8>)
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	d118      	bne.n	8001eb4 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001e82:	4b7f      	ldr	r3, [pc, #508]	; (8002080 <HAL_RCC_OscConfig+0x4c8>)
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	4a7e      	ldr	r2, [pc, #504]	; (8002080 <HAL_RCC_OscConfig+0x4c8>)
 8001e88:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001e8c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001e8e:	f7ff fbe1 	bl	8001654 <HAL_GetTick>
 8001e92:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e94:	e008      	b.n	8001ea8 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001e96:	f7ff fbdd 	bl	8001654 <HAL_GetTick>
 8001e9a:	4602      	mov	r2, r0
 8001e9c:	693b      	ldr	r3, [r7, #16]
 8001e9e:	1ad3      	subs	r3, r2, r3
 8001ea0:	2b64      	cmp	r3, #100	; 0x64
 8001ea2:	d901      	bls.n	8001ea8 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001ea4:	2303      	movs	r3, #3
 8001ea6:	e103      	b.n	80020b0 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ea8:	4b75      	ldr	r3, [pc, #468]	; (8002080 <HAL_RCC_OscConfig+0x4c8>)
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001eb0:	2b00      	cmp	r3, #0
 8001eb2:	d0f0      	beq.n	8001e96 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	68db      	ldr	r3, [r3, #12]
 8001eb8:	2b01      	cmp	r3, #1
 8001eba:	d106      	bne.n	8001eca <HAL_RCC_OscConfig+0x312>
 8001ebc:	4b6f      	ldr	r3, [pc, #444]	; (800207c <HAL_RCC_OscConfig+0x4c4>)
 8001ebe:	6a1b      	ldr	r3, [r3, #32]
 8001ec0:	4a6e      	ldr	r2, [pc, #440]	; (800207c <HAL_RCC_OscConfig+0x4c4>)
 8001ec2:	f043 0301 	orr.w	r3, r3, #1
 8001ec6:	6213      	str	r3, [r2, #32]
 8001ec8:	e02d      	b.n	8001f26 <HAL_RCC_OscConfig+0x36e>
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	68db      	ldr	r3, [r3, #12]
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	d10c      	bne.n	8001eec <HAL_RCC_OscConfig+0x334>
 8001ed2:	4b6a      	ldr	r3, [pc, #424]	; (800207c <HAL_RCC_OscConfig+0x4c4>)
 8001ed4:	6a1b      	ldr	r3, [r3, #32]
 8001ed6:	4a69      	ldr	r2, [pc, #420]	; (800207c <HAL_RCC_OscConfig+0x4c4>)
 8001ed8:	f023 0301 	bic.w	r3, r3, #1
 8001edc:	6213      	str	r3, [r2, #32]
 8001ede:	4b67      	ldr	r3, [pc, #412]	; (800207c <HAL_RCC_OscConfig+0x4c4>)
 8001ee0:	6a1b      	ldr	r3, [r3, #32]
 8001ee2:	4a66      	ldr	r2, [pc, #408]	; (800207c <HAL_RCC_OscConfig+0x4c4>)
 8001ee4:	f023 0304 	bic.w	r3, r3, #4
 8001ee8:	6213      	str	r3, [r2, #32]
 8001eea:	e01c      	b.n	8001f26 <HAL_RCC_OscConfig+0x36e>
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	68db      	ldr	r3, [r3, #12]
 8001ef0:	2b05      	cmp	r3, #5
 8001ef2:	d10c      	bne.n	8001f0e <HAL_RCC_OscConfig+0x356>
 8001ef4:	4b61      	ldr	r3, [pc, #388]	; (800207c <HAL_RCC_OscConfig+0x4c4>)
 8001ef6:	6a1b      	ldr	r3, [r3, #32]
 8001ef8:	4a60      	ldr	r2, [pc, #384]	; (800207c <HAL_RCC_OscConfig+0x4c4>)
 8001efa:	f043 0304 	orr.w	r3, r3, #4
 8001efe:	6213      	str	r3, [r2, #32]
 8001f00:	4b5e      	ldr	r3, [pc, #376]	; (800207c <HAL_RCC_OscConfig+0x4c4>)
 8001f02:	6a1b      	ldr	r3, [r3, #32]
 8001f04:	4a5d      	ldr	r2, [pc, #372]	; (800207c <HAL_RCC_OscConfig+0x4c4>)
 8001f06:	f043 0301 	orr.w	r3, r3, #1
 8001f0a:	6213      	str	r3, [r2, #32]
 8001f0c:	e00b      	b.n	8001f26 <HAL_RCC_OscConfig+0x36e>
 8001f0e:	4b5b      	ldr	r3, [pc, #364]	; (800207c <HAL_RCC_OscConfig+0x4c4>)
 8001f10:	6a1b      	ldr	r3, [r3, #32]
 8001f12:	4a5a      	ldr	r2, [pc, #360]	; (800207c <HAL_RCC_OscConfig+0x4c4>)
 8001f14:	f023 0301 	bic.w	r3, r3, #1
 8001f18:	6213      	str	r3, [r2, #32]
 8001f1a:	4b58      	ldr	r3, [pc, #352]	; (800207c <HAL_RCC_OscConfig+0x4c4>)
 8001f1c:	6a1b      	ldr	r3, [r3, #32]
 8001f1e:	4a57      	ldr	r2, [pc, #348]	; (800207c <HAL_RCC_OscConfig+0x4c4>)
 8001f20:	f023 0304 	bic.w	r3, r3, #4
 8001f24:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	68db      	ldr	r3, [r3, #12]
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	d015      	beq.n	8001f5a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001f2e:	f7ff fb91 	bl	8001654 <HAL_GetTick>
 8001f32:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001f34:	e00a      	b.n	8001f4c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001f36:	f7ff fb8d 	bl	8001654 <HAL_GetTick>
 8001f3a:	4602      	mov	r2, r0
 8001f3c:	693b      	ldr	r3, [r7, #16]
 8001f3e:	1ad3      	subs	r3, r2, r3
 8001f40:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f44:	4293      	cmp	r3, r2
 8001f46:	d901      	bls.n	8001f4c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001f48:	2303      	movs	r3, #3
 8001f4a:	e0b1      	b.n	80020b0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001f4c:	4b4b      	ldr	r3, [pc, #300]	; (800207c <HAL_RCC_OscConfig+0x4c4>)
 8001f4e:	6a1b      	ldr	r3, [r3, #32]
 8001f50:	f003 0302 	and.w	r3, r3, #2
 8001f54:	2b00      	cmp	r3, #0
 8001f56:	d0ee      	beq.n	8001f36 <HAL_RCC_OscConfig+0x37e>
 8001f58:	e014      	b.n	8001f84 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001f5a:	f7ff fb7b 	bl	8001654 <HAL_GetTick>
 8001f5e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001f60:	e00a      	b.n	8001f78 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001f62:	f7ff fb77 	bl	8001654 <HAL_GetTick>
 8001f66:	4602      	mov	r2, r0
 8001f68:	693b      	ldr	r3, [r7, #16]
 8001f6a:	1ad3      	subs	r3, r2, r3
 8001f6c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f70:	4293      	cmp	r3, r2
 8001f72:	d901      	bls.n	8001f78 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001f74:	2303      	movs	r3, #3
 8001f76:	e09b      	b.n	80020b0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001f78:	4b40      	ldr	r3, [pc, #256]	; (800207c <HAL_RCC_OscConfig+0x4c4>)
 8001f7a:	6a1b      	ldr	r3, [r3, #32]
 8001f7c:	f003 0302 	and.w	r3, r3, #2
 8001f80:	2b00      	cmp	r3, #0
 8001f82:	d1ee      	bne.n	8001f62 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001f84:	7dfb      	ldrb	r3, [r7, #23]
 8001f86:	2b01      	cmp	r3, #1
 8001f88:	d105      	bne.n	8001f96 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001f8a:	4b3c      	ldr	r3, [pc, #240]	; (800207c <HAL_RCC_OscConfig+0x4c4>)
 8001f8c:	69db      	ldr	r3, [r3, #28]
 8001f8e:	4a3b      	ldr	r2, [pc, #236]	; (800207c <HAL_RCC_OscConfig+0x4c4>)
 8001f90:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001f94:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	69db      	ldr	r3, [r3, #28]
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	f000 8087 	beq.w	80020ae <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001fa0:	4b36      	ldr	r3, [pc, #216]	; (800207c <HAL_RCC_OscConfig+0x4c4>)
 8001fa2:	685b      	ldr	r3, [r3, #4]
 8001fa4:	f003 030c 	and.w	r3, r3, #12
 8001fa8:	2b08      	cmp	r3, #8
 8001faa:	d061      	beq.n	8002070 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	69db      	ldr	r3, [r3, #28]
 8001fb0:	2b02      	cmp	r3, #2
 8001fb2:	d146      	bne.n	8002042 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001fb4:	4b33      	ldr	r3, [pc, #204]	; (8002084 <HAL_RCC_OscConfig+0x4cc>)
 8001fb6:	2200      	movs	r2, #0
 8001fb8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001fba:	f7ff fb4b 	bl	8001654 <HAL_GetTick>
 8001fbe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001fc0:	e008      	b.n	8001fd4 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001fc2:	f7ff fb47 	bl	8001654 <HAL_GetTick>
 8001fc6:	4602      	mov	r2, r0
 8001fc8:	693b      	ldr	r3, [r7, #16]
 8001fca:	1ad3      	subs	r3, r2, r3
 8001fcc:	2b02      	cmp	r3, #2
 8001fce:	d901      	bls.n	8001fd4 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001fd0:	2303      	movs	r3, #3
 8001fd2:	e06d      	b.n	80020b0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001fd4:	4b29      	ldr	r3, [pc, #164]	; (800207c <HAL_RCC_OscConfig+0x4c4>)
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001fdc:	2b00      	cmp	r3, #0
 8001fde:	d1f0      	bne.n	8001fc2 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	6a1b      	ldr	r3, [r3, #32]
 8001fe4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001fe8:	d108      	bne.n	8001ffc <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001fea:	4b24      	ldr	r3, [pc, #144]	; (800207c <HAL_RCC_OscConfig+0x4c4>)
 8001fec:	685b      	ldr	r3, [r3, #4]
 8001fee:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	689b      	ldr	r3, [r3, #8]
 8001ff6:	4921      	ldr	r1, [pc, #132]	; (800207c <HAL_RCC_OscConfig+0x4c4>)
 8001ff8:	4313      	orrs	r3, r2
 8001ffa:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001ffc:	4b1f      	ldr	r3, [pc, #124]	; (800207c <HAL_RCC_OscConfig+0x4c4>)
 8001ffe:	685b      	ldr	r3, [r3, #4]
 8002000:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	6a19      	ldr	r1, [r3, #32]
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800200c:	430b      	orrs	r3, r1
 800200e:	491b      	ldr	r1, [pc, #108]	; (800207c <HAL_RCC_OscConfig+0x4c4>)
 8002010:	4313      	orrs	r3, r2
 8002012:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002014:	4b1b      	ldr	r3, [pc, #108]	; (8002084 <HAL_RCC_OscConfig+0x4cc>)
 8002016:	2201      	movs	r2, #1
 8002018:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800201a:	f7ff fb1b 	bl	8001654 <HAL_GetTick>
 800201e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002020:	e008      	b.n	8002034 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002022:	f7ff fb17 	bl	8001654 <HAL_GetTick>
 8002026:	4602      	mov	r2, r0
 8002028:	693b      	ldr	r3, [r7, #16]
 800202a:	1ad3      	subs	r3, r2, r3
 800202c:	2b02      	cmp	r3, #2
 800202e:	d901      	bls.n	8002034 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002030:	2303      	movs	r3, #3
 8002032:	e03d      	b.n	80020b0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002034:	4b11      	ldr	r3, [pc, #68]	; (800207c <HAL_RCC_OscConfig+0x4c4>)
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800203c:	2b00      	cmp	r3, #0
 800203e:	d0f0      	beq.n	8002022 <HAL_RCC_OscConfig+0x46a>
 8002040:	e035      	b.n	80020ae <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002042:	4b10      	ldr	r3, [pc, #64]	; (8002084 <HAL_RCC_OscConfig+0x4cc>)
 8002044:	2200      	movs	r2, #0
 8002046:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002048:	f7ff fb04 	bl	8001654 <HAL_GetTick>
 800204c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800204e:	e008      	b.n	8002062 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002050:	f7ff fb00 	bl	8001654 <HAL_GetTick>
 8002054:	4602      	mov	r2, r0
 8002056:	693b      	ldr	r3, [r7, #16]
 8002058:	1ad3      	subs	r3, r2, r3
 800205a:	2b02      	cmp	r3, #2
 800205c:	d901      	bls.n	8002062 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800205e:	2303      	movs	r3, #3
 8002060:	e026      	b.n	80020b0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002062:	4b06      	ldr	r3, [pc, #24]	; (800207c <HAL_RCC_OscConfig+0x4c4>)
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800206a:	2b00      	cmp	r3, #0
 800206c:	d1f0      	bne.n	8002050 <HAL_RCC_OscConfig+0x498>
 800206e:	e01e      	b.n	80020ae <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	69db      	ldr	r3, [r3, #28]
 8002074:	2b01      	cmp	r3, #1
 8002076:	d107      	bne.n	8002088 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8002078:	2301      	movs	r3, #1
 800207a:	e019      	b.n	80020b0 <HAL_RCC_OscConfig+0x4f8>
 800207c:	40021000 	.word	0x40021000
 8002080:	40007000 	.word	0x40007000
 8002084:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002088:	4b0b      	ldr	r3, [pc, #44]	; (80020b8 <HAL_RCC_OscConfig+0x500>)
 800208a:	685b      	ldr	r3, [r3, #4]
 800208c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800208e:	68fb      	ldr	r3, [r7, #12]
 8002090:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	6a1b      	ldr	r3, [r3, #32]
 8002098:	429a      	cmp	r2, r3
 800209a:	d106      	bne.n	80020aa <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800209c:	68fb      	ldr	r3, [r7, #12]
 800209e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80020a6:	429a      	cmp	r2, r3
 80020a8:	d001      	beq.n	80020ae <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80020aa:	2301      	movs	r3, #1
 80020ac:	e000      	b.n	80020b0 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80020ae:	2300      	movs	r3, #0
}
 80020b0:	4618      	mov	r0, r3
 80020b2:	3718      	adds	r7, #24
 80020b4:	46bd      	mov	sp, r7
 80020b6:	bd80      	pop	{r7, pc}
 80020b8:	40021000 	.word	0x40021000

080020bc <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80020bc:	b580      	push	{r7, lr}
 80020be:	b084      	sub	sp, #16
 80020c0:	af00      	add	r7, sp, #0
 80020c2:	6078      	str	r0, [r7, #4]
 80020c4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	2b00      	cmp	r3, #0
 80020ca:	d101      	bne.n	80020d0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80020cc:	2301      	movs	r3, #1
 80020ce:	e0d0      	b.n	8002272 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80020d0:	4b6a      	ldr	r3, [pc, #424]	; (800227c <HAL_RCC_ClockConfig+0x1c0>)
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	f003 0307 	and.w	r3, r3, #7
 80020d8:	683a      	ldr	r2, [r7, #0]
 80020da:	429a      	cmp	r2, r3
 80020dc:	d910      	bls.n	8002100 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80020de:	4b67      	ldr	r3, [pc, #412]	; (800227c <HAL_RCC_ClockConfig+0x1c0>)
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	f023 0207 	bic.w	r2, r3, #7
 80020e6:	4965      	ldr	r1, [pc, #404]	; (800227c <HAL_RCC_ClockConfig+0x1c0>)
 80020e8:	683b      	ldr	r3, [r7, #0]
 80020ea:	4313      	orrs	r3, r2
 80020ec:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80020ee:	4b63      	ldr	r3, [pc, #396]	; (800227c <HAL_RCC_ClockConfig+0x1c0>)
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	f003 0307 	and.w	r3, r3, #7
 80020f6:	683a      	ldr	r2, [r7, #0]
 80020f8:	429a      	cmp	r2, r3
 80020fa:	d001      	beq.n	8002100 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80020fc:	2301      	movs	r3, #1
 80020fe:	e0b8      	b.n	8002272 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	f003 0302 	and.w	r3, r3, #2
 8002108:	2b00      	cmp	r3, #0
 800210a:	d020      	beq.n	800214e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	f003 0304 	and.w	r3, r3, #4
 8002114:	2b00      	cmp	r3, #0
 8002116:	d005      	beq.n	8002124 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002118:	4b59      	ldr	r3, [pc, #356]	; (8002280 <HAL_RCC_ClockConfig+0x1c4>)
 800211a:	685b      	ldr	r3, [r3, #4]
 800211c:	4a58      	ldr	r2, [pc, #352]	; (8002280 <HAL_RCC_ClockConfig+0x1c4>)
 800211e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002122:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	f003 0308 	and.w	r3, r3, #8
 800212c:	2b00      	cmp	r3, #0
 800212e:	d005      	beq.n	800213c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002130:	4b53      	ldr	r3, [pc, #332]	; (8002280 <HAL_RCC_ClockConfig+0x1c4>)
 8002132:	685b      	ldr	r3, [r3, #4]
 8002134:	4a52      	ldr	r2, [pc, #328]	; (8002280 <HAL_RCC_ClockConfig+0x1c4>)
 8002136:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800213a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800213c:	4b50      	ldr	r3, [pc, #320]	; (8002280 <HAL_RCC_ClockConfig+0x1c4>)
 800213e:	685b      	ldr	r3, [r3, #4]
 8002140:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	689b      	ldr	r3, [r3, #8]
 8002148:	494d      	ldr	r1, [pc, #308]	; (8002280 <HAL_RCC_ClockConfig+0x1c4>)
 800214a:	4313      	orrs	r3, r2
 800214c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	f003 0301 	and.w	r3, r3, #1
 8002156:	2b00      	cmp	r3, #0
 8002158:	d040      	beq.n	80021dc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	685b      	ldr	r3, [r3, #4]
 800215e:	2b01      	cmp	r3, #1
 8002160:	d107      	bne.n	8002172 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002162:	4b47      	ldr	r3, [pc, #284]	; (8002280 <HAL_RCC_ClockConfig+0x1c4>)
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800216a:	2b00      	cmp	r3, #0
 800216c:	d115      	bne.n	800219a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800216e:	2301      	movs	r3, #1
 8002170:	e07f      	b.n	8002272 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	685b      	ldr	r3, [r3, #4]
 8002176:	2b02      	cmp	r3, #2
 8002178:	d107      	bne.n	800218a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800217a:	4b41      	ldr	r3, [pc, #260]	; (8002280 <HAL_RCC_ClockConfig+0x1c4>)
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002182:	2b00      	cmp	r3, #0
 8002184:	d109      	bne.n	800219a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002186:	2301      	movs	r3, #1
 8002188:	e073      	b.n	8002272 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800218a:	4b3d      	ldr	r3, [pc, #244]	; (8002280 <HAL_RCC_ClockConfig+0x1c4>)
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	f003 0302 	and.w	r3, r3, #2
 8002192:	2b00      	cmp	r3, #0
 8002194:	d101      	bne.n	800219a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002196:	2301      	movs	r3, #1
 8002198:	e06b      	b.n	8002272 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800219a:	4b39      	ldr	r3, [pc, #228]	; (8002280 <HAL_RCC_ClockConfig+0x1c4>)
 800219c:	685b      	ldr	r3, [r3, #4]
 800219e:	f023 0203 	bic.w	r2, r3, #3
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	685b      	ldr	r3, [r3, #4]
 80021a6:	4936      	ldr	r1, [pc, #216]	; (8002280 <HAL_RCC_ClockConfig+0x1c4>)
 80021a8:	4313      	orrs	r3, r2
 80021aa:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80021ac:	f7ff fa52 	bl	8001654 <HAL_GetTick>
 80021b0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80021b2:	e00a      	b.n	80021ca <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80021b4:	f7ff fa4e 	bl	8001654 <HAL_GetTick>
 80021b8:	4602      	mov	r2, r0
 80021ba:	68fb      	ldr	r3, [r7, #12]
 80021bc:	1ad3      	subs	r3, r2, r3
 80021be:	f241 3288 	movw	r2, #5000	; 0x1388
 80021c2:	4293      	cmp	r3, r2
 80021c4:	d901      	bls.n	80021ca <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80021c6:	2303      	movs	r3, #3
 80021c8:	e053      	b.n	8002272 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80021ca:	4b2d      	ldr	r3, [pc, #180]	; (8002280 <HAL_RCC_ClockConfig+0x1c4>)
 80021cc:	685b      	ldr	r3, [r3, #4]
 80021ce:	f003 020c 	and.w	r2, r3, #12
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	685b      	ldr	r3, [r3, #4]
 80021d6:	009b      	lsls	r3, r3, #2
 80021d8:	429a      	cmp	r2, r3
 80021da:	d1eb      	bne.n	80021b4 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80021dc:	4b27      	ldr	r3, [pc, #156]	; (800227c <HAL_RCC_ClockConfig+0x1c0>)
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	f003 0307 	and.w	r3, r3, #7
 80021e4:	683a      	ldr	r2, [r7, #0]
 80021e6:	429a      	cmp	r2, r3
 80021e8:	d210      	bcs.n	800220c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80021ea:	4b24      	ldr	r3, [pc, #144]	; (800227c <HAL_RCC_ClockConfig+0x1c0>)
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	f023 0207 	bic.w	r2, r3, #7
 80021f2:	4922      	ldr	r1, [pc, #136]	; (800227c <HAL_RCC_ClockConfig+0x1c0>)
 80021f4:	683b      	ldr	r3, [r7, #0]
 80021f6:	4313      	orrs	r3, r2
 80021f8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80021fa:	4b20      	ldr	r3, [pc, #128]	; (800227c <HAL_RCC_ClockConfig+0x1c0>)
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	f003 0307 	and.w	r3, r3, #7
 8002202:	683a      	ldr	r2, [r7, #0]
 8002204:	429a      	cmp	r2, r3
 8002206:	d001      	beq.n	800220c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002208:	2301      	movs	r3, #1
 800220a:	e032      	b.n	8002272 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	f003 0304 	and.w	r3, r3, #4
 8002214:	2b00      	cmp	r3, #0
 8002216:	d008      	beq.n	800222a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002218:	4b19      	ldr	r3, [pc, #100]	; (8002280 <HAL_RCC_ClockConfig+0x1c4>)
 800221a:	685b      	ldr	r3, [r3, #4]
 800221c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	68db      	ldr	r3, [r3, #12]
 8002224:	4916      	ldr	r1, [pc, #88]	; (8002280 <HAL_RCC_ClockConfig+0x1c4>)
 8002226:	4313      	orrs	r3, r2
 8002228:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	f003 0308 	and.w	r3, r3, #8
 8002232:	2b00      	cmp	r3, #0
 8002234:	d009      	beq.n	800224a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002236:	4b12      	ldr	r3, [pc, #72]	; (8002280 <HAL_RCC_ClockConfig+0x1c4>)
 8002238:	685b      	ldr	r3, [r3, #4]
 800223a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	691b      	ldr	r3, [r3, #16]
 8002242:	00db      	lsls	r3, r3, #3
 8002244:	490e      	ldr	r1, [pc, #56]	; (8002280 <HAL_RCC_ClockConfig+0x1c4>)
 8002246:	4313      	orrs	r3, r2
 8002248:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800224a:	f000 f821 	bl	8002290 <HAL_RCC_GetSysClockFreq>
 800224e:	4602      	mov	r2, r0
 8002250:	4b0b      	ldr	r3, [pc, #44]	; (8002280 <HAL_RCC_ClockConfig+0x1c4>)
 8002252:	685b      	ldr	r3, [r3, #4]
 8002254:	091b      	lsrs	r3, r3, #4
 8002256:	f003 030f 	and.w	r3, r3, #15
 800225a:	490a      	ldr	r1, [pc, #40]	; (8002284 <HAL_RCC_ClockConfig+0x1c8>)
 800225c:	5ccb      	ldrb	r3, [r1, r3]
 800225e:	fa22 f303 	lsr.w	r3, r2, r3
 8002262:	4a09      	ldr	r2, [pc, #36]	; (8002288 <HAL_RCC_ClockConfig+0x1cc>)
 8002264:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002266:	4b09      	ldr	r3, [pc, #36]	; (800228c <HAL_RCC_ClockConfig+0x1d0>)
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	4618      	mov	r0, r3
 800226c:	f7ff f9b0 	bl	80015d0 <HAL_InitTick>

  return HAL_OK;
 8002270:	2300      	movs	r3, #0
}
 8002272:	4618      	mov	r0, r3
 8002274:	3710      	adds	r7, #16
 8002276:	46bd      	mov	sp, r7
 8002278:	bd80      	pop	{r7, pc}
 800227a:	bf00      	nop
 800227c:	40022000 	.word	0x40022000
 8002280:	40021000 	.word	0x40021000
 8002284:	08003f2c 	.word	0x08003f2c
 8002288:	20000000 	.word	0x20000000
 800228c:	20000004 	.word	0x20000004

08002290 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002290:	b490      	push	{r4, r7}
 8002292:	b08a      	sub	sp, #40	; 0x28
 8002294:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8002296:	4b29      	ldr	r3, [pc, #164]	; (800233c <HAL_RCC_GetSysClockFreq+0xac>)
 8002298:	1d3c      	adds	r4, r7, #4
 800229a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800229c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80022a0:	f240 2301 	movw	r3, #513	; 0x201
 80022a4:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80022a6:	2300      	movs	r3, #0
 80022a8:	61fb      	str	r3, [r7, #28]
 80022aa:	2300      	movs	r3, #0
 80022ac:	61bb      	str	r3, [r7, #24]
 80022ae:	2300      	movs	r3, #0
 80022b0:	627b      	str	r3, [r7, #36]	; 0x24
 80022b2:	2300      	movs	r3, #0
 80022b4:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80022b6:	2300      	movs	r3, #0
 80022b8:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80022ba:	4b21      	ldr	r3, [pc, #132]	; (8002340 <HAL_RCC_GetSysClockFreq+0xb0>)
 80022bc:	685b      	ldr	r3, [r3, #4]
 80022be:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80022c0:	69fb      	ldr	r3, [r7, #28]
 80022c2:	f003 030c 	and.w	r3, r3, #12
 80022c6:	2b04      	cmp	r3, #4
 80022c8:	d002      	beq.n	80022d0 <HAL_RCC_GetSysClockFreq+0x40>
 80022ca:	2b08      	cmp	r3, #8
 80022cc:	d003      	beq.n	80022d6 <HAL_RCC_GetSysClockFreq+0x46>
 80022ce:	e02b      	b.n	8002328 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80022d0:	4b1c      	ldr	r3, [pc, #112]	; (8002344 <HAL_RCC_GetSysClockFreq+0xb4>)
 80022d2:	623b      	str	r3, [r7, #32]
      break;
 80022d4:	e02b      	b.n	800232e <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80022d6:	69fb      	ldr	r3, [r7, #28]
 80022d8:	0c9b      	lsrs	r3, r3, #18
 80022da:	f003 030f 	and.w	r3, r3, #15
 80022de:	3328      	adds	r3, #40	; 0x28
 80022e0:	443b      	add	r3, r7
 80022e2:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80022e6:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80022e8:	69fb      	ldr	r3, [r7, #28]
 80022ea:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	d012      	beq.n	8002318 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80022f2:	4b13      	ldr	r3, [pc, #76]	; (8002340 <HAL_RCC_GetSysClockFreq+0xb0>)
 80022f4:	685b      	ldr	r3, [r3, #4]
 80022f6:	0c5b      	lsrs	r3, r3, #17
 80022f8:	f003 0301 	and.w	r3, r3, #1
 80022fc:	3328      	adds	r3, #40	; 0x28
 80022fe:	443b      	add	r3, r7
 8002300:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8002304:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002306:	697b      	ldr	r3, [r7, #20]
 8002308:	4a0e      	ldr	r2, [pc, #56]	; (8002344 <HAL_RCC_GetSysClockFreq+0xb4>)
 800230a:	fb03 f202 	mul.w	r2, r3, r2
 800230e:	69bb      	ldr	r3, [r7, #24]
 8002310:	fbb2 f3f3 	udiv	r3, r2, r3
 8002314:	627b      	str	r3, [r7, #36]	; 0x24
 8002316:	e004      	b.n	8002322 <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002318:	697b      	ldr	r3, [r7, #20]
 800231a:	4a0b      	ldr	r2, [pc, #44]	; (8002348 <HAL_RCC_GetSysClockFreq+0xb8>)
 800231c:	fb02 f303 	mul.w	r3, r2, r3
 8002320:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8002322:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002324:	623b      	str	r3, [r7, #32]
      break;
 8002326:	e002      	b.n	800232e <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002328:	4b06      	ldr	r3, [pc, #24]	; (8002344 <HAL_RCC_GetSysClockFreq+0xb4>)
 800232a:	623b      	str	r3, [r7, #32]
      break;
 800232c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800232e:	6a3b      	ldr	r3, [r7, #32]
}
 8002330:	4618      	mov	r0, r3
 8002332:	3728      	adds	r7, #40	; 0x28
 8002334:	46bd      	mov	sp, r7
 8002336:	bc90      	pop	{r4, r7}
 8002338:	4770      	bx	lr
 800233a:	bf00      	nop
 800233c:	0800392c 	.word	0x0800392c
 8002340:	40021000 	.word	0x40021000
 8002344:	007a1200 	.word	0x007a1200
 8002348:	003d0900 	.word	0x003d0900

0800234c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 800234c:	b480      	push	{r7}
 800234e:	b085      	sub	sp, #20
 8002350:	af00      	add	r7, sp, #0
 8002352:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002354:	4b0a      	ldr	r3, [pc, #40]	; (8002380 <RCC_Delay+0x34>)
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	4a0a      	ldr	r2, [pc, #40]	; (8002384 <RCC_Delay+0x38>)
 800235a:	fba2 2303 	umull	r2, r3, r2, r3
 800235e:	0a5b      	lsrs	r3, r3, #9
 8002360:	687a      	ldr	r2, [r7, #4]
 8002362:	fb02 f303 	mul.w	r3, r2, r3
 8002366:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002368:	bf00      	nop
  }
  while (Delay --);
 800236a:	68fb      	ldr	r3, [r7, #12]
 800236c:	1e5a      	subs	r2, r3, #1
 800236e:	60fa      	str	r2, [r7, #12]
 8002370:	2b00      	cmp	r3, #0
 8002372:	d1f9      	bne.n	8002368 <RCC_Delay+0x1c>
}
 8002374:	bf00      	nop
 8002376:	bf00      	nop
 8002378:	3714      	adds	r7, #20
 800237a:	46bd      	mov	sp, r7
 800237c:	bc80      	pop	{r7}
 800237e:	4770      	bx	lr
 8002380:	20000000 	.word	0x20000000
 8002384:	10624dd3 	.word	0x10624dd3

08002388 <HAL_SRAM_Init>:
  * @param  ExtTiming Pointer to SRAM extended mode timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SRAM_Init(SRAM_HandleTypeDef *hsram, FSMC_NORSRAM_TimingTypeDef *Timing,
                                FSMC_NORSRAM_TimingTypeDef *ExtTiming)
{
 8002388:	b580      	push	{r7, lr}
 800238a:	b084      	sub	sp, #16
 800238c:	af00      	add	r7, sp, #0
 800238e:	60f8      	str	r0, [r7, #12]
 8002390:	60b9      	str	r1, [r7, #8]
 8002392:	607a      	str	r2, [r7, #4]
  /* Check the SRAM handle parameter */
  if ((hsram == NULL) || (hsram->Init.BurstAccessMode == FSMC_BURST_ACCESS_MODE_ENABLE))
 8002394:	68fb      	ldr	r3, [r7, #12]
 8002396:	2b00      	cmp	r3, #0
 8002398:	d004      	beq.n	80023a4 <HAL_SRAM_Init+0x1c>
 800239a:	68fb      	ldr	r3, [r7, #12]
 800239c:	699b      	ldr	r3, [r3, #24]
 800239e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80023a2:	d101      	bne.n	80023a8 <HAL_SRAM_Init+0x20>
  {
    return HAL_ERROR;
 80023a4:	2301      	movs	r3, #1
 80023a6:	e038      	b.n	800241a <HAL_SRAM_Init+0x92>
  }

  if (hsram->State == HAL_SRAM_STATE_RESET)
 80023a8:	68fb      	ldr	r3, [r7, #12]
 80023aa:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80023ae:	b2db      	uxtb	r3, r3
 80023b0:	2b00      	cmp	r3, #0
 80023b2:	d106      	bne.n	80023c2 <HAL_SRAM_Init+0x3a>
  {
    /* Allocate lock resource and initialize it */
    hsram->Lock = HAL_UNLOCKED;
 80023b4:	68fb      	ldr	r3, [r7, #12]
 80023b6:	2200      	movs	r2, #0
 80023b8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    hsram->MspInitCallback(hsram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SRAM_MspInit(hsram);
 80023bc:	68f8      	ldr	r0, [r7, #12]
 80023be:	f7ff f893 	bl	80014e8 <HAL_SRAM_MspInit>
#endif /* USE_HAL_SRAM_REGISTER_CALLBACKS */
  }

  /* Initialize SRAM control Interface */
  (void)FSMC_NORSRAM_Init(hsram->Instance, &(hsram->Init));
 80023c2:	68fb      	ldr	r3, [r7, #12]
 80023c4:	681a      	ldr	r2, [r3, #0]
 80023c6:	68fb      	ldr	r3, [r7, #12]
 80023c8:	3308      	adds	r3, #8
 80023ca:	4619      	mov	r1, r3
 80023cc:	4610      	mov	r0, r2
 80023ce:	f000 f829 	bl	8002424 <FSMC_NORSRAM_Init>

  /* Initialize SRAM timing Interface */
  (void)FSMC_NORSRAM_Timing_Init(hsram->Instance, Timing, hsram->Init.NSBank);
 80023d2:	68fb      	ldr	r3, [r7, #12]
 80023d4:	6818      	ldr	r0, [r3, #0]
 80023d6:	68fb      	ldr	r3, [r7, #12]
 80023d8:	689b      	ldr	r3, [r3, #8]
 80023da:	461a      	mov	r2, r3
 80023dc:	68b9      	ldr	r1, [r7, #8]
 80023de:	f000 f88b 	bl	80024f8 <FSMC_NORSRAM_Timing_Init>

  /* Initialize SRAM extended mode timing Interface */
  (void)FSMC_NORSRAM_Extended_Timing_Init(hsram->Extended, ExtTiming, hsram->Init.NSBank,
 80023e2:	68fb      	ldr	r3, [r7, #12]
 80023e4:	6858      	ldr	r0, [r3, #4]
 80023e6:	68fb      	ldr	r3, [r7, #12]
 80023e8:	689a      	ldr	r2, [r3, #8]
 80023ea:	68fb      	ldr	r3, [r7, #12]
 80023ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023ee:	6879      	ldr	r1, [r7, #4]
 80023f0:	f000 f8b6 	bl	8002560 <FSMC_NORSRAM_Extended_Timing_Init>
                                         hsram->Init.ExtendedMode);

  /* Enable the NORSRAM device */
  __FSMC_NORSRAM_ENABLE(hsram->Instance, hsram->Init.NSBank);
 80023f4:	68fb      	ldr	r3, [r7, #12]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	68fa      	ldr	r2, [r7, #12]
 80023fa:	6892      	ldr	r2, [r2, #8]
 80023fc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8002400:	68fb      	ldr	r3, [r7, #12]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	68fa      	ldr	r2, [r7, #12]
 8002406:	6892      	ldr	r2, [r2, #8]
 8002408:	f041 0101 	orr.w	r1, r1, #1
 800240c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Initialize the SRAM controller state */
  hsram->State = HAL_SRAM_STATE_READY;
 8002410:	68fb      	ldr	r3, [r7, #12]
 8002412:	2201      	movs	r2, #1
 8002414:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 8002418:	2300      	movs	r3, #0
}
 800241a:	4618      	mov	r0, r3
 800241c:	3710      	adds	r7, #16
 800241e:	46bd      	mov	sp, r7
 8002420:	bd80      	pop	{r7, pc}
	...

08002424 <FSMC_NORSRAM_Init>:
  * @param  Init Pointer to NORSRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef  FSMC_NORSRAM_Init(FSMC_NORSRAM_TypeDef *Device,
                                    FSMC_NORSRAM_InitTypeDef *Init)
{
 8002424:	b480      	push	{r7}
 8002426:	b087      	sub	sp, #28
 8002428:	af00      	add	r7, sp, #0
 800242a:	6078      	str	r0, [r7, #4]
 800242c:	6039      	str	r1, [r7, #0]
  assert_param(IS_FSMC_ASYNWAIT(Init->AsynchronousWait));
  assert_param(IS_FSMC_WRITE_BURST(Init->WriteBurst));
  assert_param(IS_FSMC_PAGESIZE(Init->PageSize));

  /* Disable NORSRAM Device */
  __FSMC_NORSRAM_DISABLE(Device, Init->NSBank);
 800242e:	683b      	ldr	r3, [r7, #0]
 8002430:	681a      	ldr	r2, [r3, #0]
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002438:	683a      	ldr	r2, [r7, #0]
 800243a:	6812      	ldr	r2, [r2, #0]
 800243c:	f023 0101 	bic.w	r1, r3, #1
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Set NORSRAM device control parameters */
  if (Init->MemoryType == FSMC_MEMORY_TYPE_NOR)
 8002446:	683b      	ldr	r3, [r7, #0]
 8002448:	689b      	ldr	r3, [r3, #8]
 800244a:	2b08      	cmp	r3, #8
 800244c:	d102      	bne.n	8002454 <FSMC_NORSRAM_Init+0x30>
  {
    flashaccess = FSMC_NORSRAM_FLASH_ACCESS_ENABLE;
 800244e:	2340      	movs	r3, #64	; 0x40
 8002450:	617b      	str	r3, [r7, #20]
 8002452:	e001      	b.n	8002458 <FSMC_NORSRAM_Init+0x34>
  }
  else
  {
    flashaccess = FSMC_NORSRAM_FLASH_ACCESS_DISABLE;
 8002454:	2300      	movs	r3, #0
 8002456:	617b      	str	r3, [r7, #20]
  }

  btcr_reg = (flashaccess                   | \
              Init->DataAddressMux          | \
 8002458:	683b      	ldr	r3, [r7, #0]
 800245a:	685a      	ldr	r2, [r3, #4]
  btcr_reg = (flashaccess                   | \
 800245c:	697b      	ldr	r3, [r7, #20]
 800245e:	431a      	orrs	r2, r3
              Init->MemoryType              | \
 8002460:	683b      	ldr	r3, [r7, #0]
 8002462:	689b      	ldr	r3, [r3, #8]
              Init->DataAddressMux          | \
 8002464:	431a      	orrs	r2, r3
              Init->MemoryDataWidth         | \
 8002466:	683b      	ldr	r3, [r7, #0]
 8002468:	68db      	ldr	r3, [r3, #12]
              Init->MemoryType              | \
 800246a:	431a      	orrs	r2, r3
              Init->BurstAccessMode         | \
 800246c:	683b      	ldr	r3, [r7, #0]
 800246e:	691b      	ldr	r3, [r3, #16]
              Init->MemoryDataWidth         | \
 8002470:	431a      	orrs	r2, r3
              Init->WaitSignalPolarity      | \
 8002472:	683b      	ldr	r3, [r7, #0]
 8002474:	695b      	ldr	r3, [r3, #20]
              Init->BurstAccessMode         | \
 8002476:	431a      	orrs	r2, r3
              Init->WaitSignalActive        | \
 8002478:	683b      	ldr	r3, [r7, #0]
 800247a:	69db      	ldr	r3, [r3, #28]
              Init->WaitSignalPolarity      | \
 800247c:	431a      	orrs	r2, r3
              Init->WriteOperation          | \
 800247e:	683b      	ldr	r3, [r7, #0]
 8002480:	6a1b      	ldr	r3, [r3, #32]
              Init->WaitSignalActive        | \
 8002482:	431a      	orrs	r2, r3
              Init->WaitSignal              | \
 8002484:	683b      	ldr	r3, [r7, #0]
 8002486:	6a5b      	ldr	r3, [r3, #36]	; 0x24
              Init->WriteOperation          | \
 8002488:	431a      	orrs	r2, r3
              Init->ExtendedMode            | \
 800248a:	683b      	ldr	r3, [r7, #0]
 800248c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
              Init->WaitSignal              | \
 800248e:	431a      	orrs	r2, r3
              Init->AsynchronousWait        | \
 8002490:	683b      	ldr	r3, [r7, #0]
 8002492:	6adb      	ldr	r3, [r3, #44]	; 0x2c
              Init->ExtendedMode            | \
 8002494:	431a      	orrs	r2, r3
              Init->WriteBurst);
 8002496:	683b      	ldr	r3, [r7, #0]
 8002498:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  btcr_reg = (flashaccess                   | \
 800249a:	4313      	orrs	r3, r2
 800249c:	613b      	str	r3, [r7, #16]

  btcr_reg |= Init->WrapMode;
 800249e:	683b      	ldr	r3, [r7, #0]
 80024a0:	699b      	ldr	r3, [r3, #24]
 80024a2:	693a      	ldr	r2, [r7, #16]
 80024a4:	4313      	orrs	r3, r2
 80024a6:	613b      	str	r3, [r7, #16]
  btcr_reg |= Init->PageSize;
 80024a8:	683b      	ldr	r3, [r7, #0]
 80024aa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80024ac:	693a      	ldr	r2, [r7, #16]
 80024ae:	4313      	orrs	r3, r2
 80024b0:	613b      	str	r3, [r7, #16]

  mask = (FSMC_BCRx_MBKEN                |
 80024b2:	4b10      	ldr	r3, [pc, #64]	; (80024f4 <FSMC_NORSRAM_Init+0xd0>)
 80024b4:	60fb      	str	r3, [r7, #12]
          FSMC_BCRx_WAITEN               |
          FSMC_BCRx_EXTMOD               |
          FSMC_BCRx_ASYNCWAIT            |
          FSMC_BCRx_CBURSTRW);

  mask |= FSMC_BCRx_WRAPMOD;
 80024b6:	68fb      	ldr	r3, [r7, #12]
 80024b8:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80024bc:	60fb      	str	r3, [r7, #12]
  mask |= 0x00070000U; /* CPSIZE to be defined in CMSIS file */
 80024be:	68fb      	ldr	r3, [r7, #12]
 80024c0:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
 80024c4:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(Device->BTCR[Init->NSBank], mask, btcr_reg);
 80024c6:	683b      	ldr	r3, [r7, #0]
 80024c8:	681a      	ldr	r2, [r3, #0]
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80024d0:	68fb      	ldr	r3, [r7, #12]
 80024d2:	43db      	mvns	r3, r3
 80024d4:	ea02 0103 	and.w	r1, r2, r3
 80024d8:	683b      	ldr	r3, [r7, #0]
 80024da:	681a      	ldr	r2, [r3, #0]
 80024dc:	693b      	ldr	r3, [r7, #16]
 80024de:	4319      	orrs	r1, r3
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]


  return HAL_OK;
 80024e6:	2300      	movs	r3, #0
}
 80024e8:	4618      	mov	r0, r3
 80024ea:	371c      	adds	r7, #28
 80024ec:	46bd      	mov	sp, r7
 80024ee:	bc80      	pop	{r7}
 80024f0:	4770      	bx	lr
 80024f2:	bf00      	nop
 80024f4:	0008fb7f 	.word	0x0008fb7f

080024f8 <FSMC_NORSRAM_Timing_Init>:
  * @param  Bank NORSRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_NORSRAM_Timing_Init(FSMC_NORSRAM_TypeDef *Device,
                                          FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 80024f8:	b480      	push	{r7}
 80024fa:	b085      	sub	sp, #20
 80024fc:	af00      	add	r7, sp, #0
 80024fe:	60f8      	str	r0, [r7, #12]
 8002500:	60b9      	str	r1, [r7, #8]
 8002502:	607a      	str	r2, [r7, #4]
  assert_param(IS_FSMC_DATA_LATENCY(Timing->DataLatency));
  assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
  assert_param(IS_FSMC_NORSRAM_BANK(Bank));

  /* Set FSMC_NORSRAM device timing parameters */
  MODIFY_REG(Device->BTCR[Bank + 1U], BTR_CLEAR_MASK, (Timing->AddressSetupTime                                  |
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	1c5a      	adds	r2, r3, #1
 8002508:	68fb      	ldr	r3, [r7, #12]
 800250a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800250e:	f003 4140 	and.w	r1, r3, #3221225472	; 0xc0000000
 8002512:	68bb      	ldr	r3, [r7, #8]
 8002514:	681a      	ldr	r2, [r3, #0]
 8002516:	68bb      	ldr	r3, [r7, #8]
 8002518:	685b      	ldr	r3, [r3, #4]
 800251a:	011b      	lsls	r3, r3, #4
 800251c:	431a      	orrs	r2, r3
 800251e:	68bb      	ldr	r3, [r7, #8]
 8002520:	689b      	ldr	r3, [r3, #8]
 8002522:	021b      	lsls	r3, r3, #8
 8002524:	431a      	orrs	r2, r3
 8002526:	68bb      	ldr	r3, [r7, #8]
 8002528:	68db      	ldr	r3, [r3, #12]
 800252a:	041b      	lsls	r3, r3, #16
 800252c:	431a      	orrs	r2, r3
 800252e:	68bb      	ldr	r3, [r7, #8]
 8002530:	691b      	ldr	r3, [r3, #16]
 8002532:	3b01      	subs	r3, #1
 8002534:	051b      	lsls	r3, r3, #20
 8002536:	431a      	orrs	r2, r3
 8002538:	68bb      	ldr	r3, [r7, #8]
 800253a:	695b      	ldr	r3, [r3, #20]
 800253c:	3b02      	subs	r3, #2
 800253e:	061b      	lsls	r3, r3, #24
 8002540:	431a      	orrs	r2, r3
 8002542:	68bb      	ldr	r3, [r7, #8]
 8002544:	699b      	ldr	r3, [r3, #24]
 8002546:	4313      	orrs	r3, r2
 8002548:	687a      	ldr	r2, [r7, #4]
 800254a:	3201      	adds	r2, #1
 800254c:	4319      	orrs	r1, r3
 800254e:	68fb      	ldr	r3, [r7, #12]
 8002550:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                                                       ((Timing->BusTurnAroundDuration)  << FSMC_BTRx_BUSTURN_Pos) |
                                                       (((Timing->CLKDivision) - 1U)     << FSMC_BTRx_CLKDIV_Pos)  |
                                                       (((Timing->DataLatency) - 2U)     << FSMC_BTRx_DATLAT_Pos)  |
                                                       (Timing->AccessMode)));

  return HAL_OK;
 8002554:	2300      	movs	r3, #0
}
 8002556:	4618      	mov	r0, r3
 8002558:	3714      	adds	r7, #20
 800255a:	46bd      	mov	sp, r7
 800255c:	bc80      	pop	{r7}
 800255e:	4770      	bx	lr

08002560 <FSMC_NORSRAM_Extended_Timing_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_NORSRAM_Extended_Timing_Init(FSMC_NORSRAM_EXTENDED_TypeDef *Device,
                                                   FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank,
                                                   uint32_t ExtendedMode)
{
 8002560:	b480      	push	{r7}
 8002562:	b085      	sub	sp, #20
 8002564:	af00      	add	r7, sp, #0
 8002566:	60f8      	str	r0, [r7, #12]
 8002568:	60b9      	str	r1, [r7, #8]
 800256a:	607a      	str	r2, [r7, #4]
 800256c:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FSMC_EXTENDED_MODE(ExtendedMode));

  /* Set NORSRAM device timing register for write configuration, if extended mode is used */
  if (ExtendedMode == FSMC_EXTENDED_MODE_ENABLE)
 800256e:	683b      	ldr	r3, [r7, #0]
 8002570:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002574:	d11d      	bne.n	80025b2 <FSMC_NORSRAM_Extended_Timing_Init+0x52>
    assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
    assert_param(IS_FSMC_NORSRAM_BANK(Bank));

    /* Set NORSRAM device timing register for write configuration, if extended mode is used */
#if defined(FSMC_BWTRx_BUSTURN)
    MODIFY_REG(Device->BWTR[Bank], BWTR_CLEAR_MASK, (Timing->AddressSetupTime                                    |
 8002576:	68fb      	ldr	r3, [r7, #12]
 8002578:	687a      	ldr	r2, [r7, #4]
 800257a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800257e:	4b13      	ldr	r3, [pc, #76]	; (80025cc <FSMC_NORSRAM_Extended_Timing_Init+0x6c>)
 8002580:	4013      	ands	r3, r2
 8002582:	68ba      	ldr	r2, [r7, #8]
 8002584:	6811      	ldr	r1, [r2, #0]
 8002586:	68ba      	ldr	r2, [r7, #8]
 8002588:	6852      	ldr	r2, [r2, #4]
 800258a:	0112      	lsls	r2, r2, #4
 800258c:	4311      	orrs	r1, r2
 800258e:	68ba      	ldr	r2, [r7, #8]
 8002590:	6892      	ldr	r2, [r2, #8]
 8002592:	0212      	lsls	r2, r2, #8
 8002594:	4311      	orrs	r1, r2
 8002596:	68ba      	ldr	r2, [r7, #8]
 8002598:	6992      	ldr	r2, [r2, #24]
 800259a:	4311      	orrs	r1, r2
 800259c:	68ba      	ldr	r2, [r7, #8]
 800259e:	68d2      	ldr	r2, [r2, #12]
 80025a0:	0412      	lsls	r2, r2, #16
 80025a2:	430a      	orrs	r2, r1
 80025a4:	ea43 0102 	orr.w	r1, r3, r2
 80025a8:	68fb      	ldr	r3, [r7, #12]
 80025aa:	687a      	ldr	r2, [r7, #4]
 80025ac:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 80025b0:	e005      	b.n	80025be <FSMC_NORSRAM_Extended_Timing_Init+0x5e>
                                                     (((Timing->DataLatency) - 2U)     << FSMC_BWTRx_DATLAT_Pos)));
#endif /* FSMC_BWTRx_BUSTURN */
  }
  else
  {
    Device->BWTR[Bank] = 0x0FFFFFFFU;
 80025b2:	68fb      	ldr	r3, [r7, #12]
 80025b4:	687a      	ldr	r2, [r7, #4]
 80025b6:	f06f 4170 	mvn.w	r1, #4026531840	; 0xf0000000
 80025ba:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }

  return HAL_OK;
 80025be:	2300      	movs	r3, #0
}
 80025c0:	4618      	mov	r0, r3
 80025c2:	3714      	adds	r7, #20
 80025c4:	46bd      	mov	sp, r7
 80025c6:	bc80      	pop	{r7}
 80025c8:	4770      	bx	lr
 80025ca:	bf00      	nop
 80025cc:	cff00000 	.word	0xcff00000

080025d0 <__libc_init_array>:
 80025d0:	b570      	push	{r4, r5, r6, lr}
 80025d2:	2600      	movs	r6, #0
 80025d4:	4d0c      	ldr	r5, [pc, #48]	; (8002608 <__libc_init_array+0x38>)
 80025d6:	4c0d      	ldr	r4, [pc, #52]	; (800260c <__libc_init_array+0x3c>)
 80025d8:	1b64      	subs	r4, r4, r5
 80025da:	10a4      	asrs	r4, r4, #2
 80025dc:	42a6      	cmp	r6, r4
 80025de:	d109      	bne.n	80025f4 <__libc_init_array+0x24>
 80025e0:	f001 f870 	bl	80036c4 <_init>
 80025e4:	2600      	movs	r6, #0
 80025e6:	4d0a      	ldr	r5, [pc, #40]	; (8002610 <__libc_init_array+0x40>)
 80025e8:	4c0a      	ldr	r4, [pc, #40]	; (8002614 <__libc_init_array+0x44>)
 80025ea:	1b64      	subs	r4, r4, r5
 80025ec:	10a4      	asrs	r4, r4, #2
 80025ee:	42a6      	cmp	r6, r4
 80025f0:	d105      	bne.n	80025fe <__libc_init_array+0x2e>
 80025f2:	bd70      	pop	{r4, r5, r6, pc}
 80025f4:	f855 3b04 	ldr.w	r3, [r5], #4
 80025f8:	4798      	blx	r3
 80025fa:	3601      	adds	r6, #1
 80025fc:	e7ee      	b.n	80025dc <__libc_init_array+0xc>
 80025fe:	f855 3b04 	ldr.w	r3, [r5], #4
 8002602:	4798      	blx	r3
 8002604:	3601      	adds	r6, #1
 8002606:	e7f2      	b.n	80025ee <__libc_init_array+0x1e>
 8002608:	08004118 	.word	0x08004118
 800260c:	08004118 	.word	0x08004118
 8002610:	08004118 	.word	0x08004118
 8002614:	0800411c 	.word	0x0800411c

08002618 <memcpy>:
 8002618:	440a      	add	r2, r1
 800261a:	4291      	cmp	r1, r2
 800261c:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8002620:	d100      	bne.n	8002624 <memcpy+0xc>
 8002622:	4770      	bx	lr
 8002624:	b510      	push	{r4, lr}
 8002626:	f811 4b01 	ldrb.w	r4, [r1], #1
 800262a:	4291      	cmp	r1, r2
 800262c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8002630:	d1f9      	bne.n	8002626 <memcpy+0xe>
 8002632:	bd10      	pop	{r4, pc}

08002634 <memset>:
 8002634:	4603      	mov	r3, r0
 8002636:	4402      	add	r2, r0
 8002638:	4293      	cmp	r3, r2
 800263a:	d100      	bne.n	800263e <memset+0xa>
 800263c:	4770      	bx	lr
 800263e:	f803 1b01 	strb.w	r1, [r3], #1
 8002642:	e7f9      	b.n	8002638 <memset+0x4>

08002644 <cos>:
 8002644:	b530      	push	{r4, r5, lr}
 8002646:	4a20      	ldr	r2, [pc, #128]	; (80026c8 <cos+0x84>)
 8002648:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800264c:	4293      	cmp	r3, r2
 800264e:	b087      	sub	sp, #28
 8002650:	dc06      	bgt.n	8002660 <cos+0x1c>
 8002652:	2200      	movs	r2, #0
 8002654:	2300      	movs	r3, #0
 8002656:	b007      	add	sp, #28
 8002658:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800265c:	f000 ba78 	b.w	8002b50 <__kernel_cos>
 8002660:	4a1a      	ldr	r2, [pc, #104]	; (80026cc <cos+0x88>)
 8002662:	4293      	cmp	r3, r2
 8002664:	dd05      	ble.n	8002672 <cos+0x2e>
 8002666:	4602      	mov	r2, r0
 8002668:	460b      	mov	r3, r1
 800266a:	f7fd ff0b 	bl	8000484 <__aeabi_dsub>
 800266e:	b007      	add	sp, #28
 8002670:	bd30      	pop	{r4, r5, pc}
 8002672:	aa02      	add	r2, sp, #8
 8002674:	f000 f874 	bl	8002760 <__ieee754_rem_pio2>
 8002678:	f000 0003 	and.w	r0, r0, #3
 800267c:	2801      	cmp	r0, #1
 800267e:	d009      	beq.n	8002694 <cos+0x50>
 8002680:	2802      	cmp	r0, #2
 8002682:	d011      	beq.n	80026a8 <cos+0x64>
 8002684:	b9b8      	cbnz	r0, 80026b6 <cos+0x72>
 8002686:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800268a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800268e:	f000 fa5f 	bl	8002b50 <__kernel_cos>
 8002692:	e7ec      	b.n	800266e <cos+0x2a>
 8002694:	9000      	str	r0, [sp, #0]
 8002696:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800269a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800269e:	f000 fe57 	bl	8003350 <__kernel_sin>
 80026a2:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
 80026a6:	e7e2      	b.n	800266e <cos+0x2a>
 80026a8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80026ac:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80026b0:	f000 fa4e 	bl	8002b50 <__kernel_cos>
 80026b4:	e7f5      	b.n	80026a2 <cos+0x5e>
 80026b6:	2301      	movs	r3, #1
 80026b8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80026bc:	9300      	str	r3, [sp, #0]
 80026be:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80026c2:	f000 fe45 	bl	8003350 <__kernel_sin>
 80026c6:	e7d2      	b.n	800266e <cos+0x2a>
 80026c8:	3fe921fb 	.word	0x3fe921fb
 80026cc:	7fefffff 	.word	0x7fefffff

080026d0 <sin>:
 80026d0:	b530      	push	{r4, r5, lr}
 80026d2:	4a20      	ldr	r2, [pc, #128]	; (8002754 <sin+0x84>)
 80026d4:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80026d8:	4293      	cmp	r3, r2
 80026da:	b087      	sub	sp, #28
 80026dc:	dc06      	bgt.n	80026ec <sin+0x1c>
 80026de:	2300      	movs	r3, #0
 80026e0:	2200      	movs	r2, #0
 80026e2:	9300      	str	r3, [sp, #0]
 80026e4:	2300      	movs	r3, #0
 80026e6:	f000 fe33 	bl	8003350 <__kernel_sin>
 80026ea:	e006      	b.n	80026fa <sin+0x2a>
 80026ec:	4a1a      	ldr	r2, [pc, #104]	; (8002758 <sin+0x88>)
 80026ee:	4293      	cmp	r3, r2
 80026f0:	dd05      	ble.n	80026fe <sin+0x2e>
 80026f2:	4602      	mov	r2, r0
 80026f4:	460b      	mov	r3, r1
 80026f6:	f7fd fec5 	bl	8000484 <__aeabi_dsub>
 80026fa:	b007      	add	sp, #28
 80026fc:	bd30      	pop	{r4, r5, pc}
 80026fe:	aa02      	add	r2, sp, #8
 8002700:	f000 f82e 	bl	8002760 <__ieee754_rem_pio2>
 8002704:	f000 0003 	and.w	r0, r0, #3
 8002708:	2801      	cmp	r0, #1
 800270a:	d009      	beq.n	8002720 <sin+0x50>
 800270c:	2802      	cmp	r0, #2
 800270e:	d00e      	beq.n	800272e <sin+0x5e>
 8002710:	b9c0      	cbnz	r0, 8002744 <sin+0x74>
 8002712:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8002716:	2301      	movs	r3, #1
 8002718:	9300      	str	r3, [sp, #0]
 800271a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800271e:	e7e2      	b.n	80026e6 <sin+0x16>
 8002720:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8002724:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8002728:	f000 fa12 	bl	8002b50 <__kernel_cos>
 800272c:	e7e5      	b.n	80026fa <sin+0x2a>
 800272e:	2301      	movs	r3, #1
 8002730:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8002734:	9300      	str	r3, [sp, #0]
 8002736:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800273a:	f000 fe09 	bl	8003350 <__kernel_sin>
 800273e:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
 8002742:	e7da      	b.n	80026fa <sin+0x2a>
 8002744:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8002748:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800274c:	f000 fa00 	bl	8002b50 <__kernel_cos>
 8002750:	e7f5      	b.n	800273e <sin+0x6e>
 8002752:	bf00      	nop
 8002754:	3fe921fb 	.word	0x3fe921fb
 8002758:	7fefffff 	.word	0x7fefffff
 800275c:	00000000 	.word	0x00000000

08002760 <__ieee754_rem_pio2>:
 8002760:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002764:	4614      	mov	r4, r2
 8002766:	4ac4      	ldr	r2, [pc, #784]	; (8002a78 <__ieee754_rem_pio2+0x318>)
 8002768:	f021 4a00 	bic.w	sl, r1, #2147483648	; 0x80000000
 800276c:	b08d      	sub	sp, #52	; 0x34
 800276e:	4592      	cmp	sl, r2
 8002770:	9104      	str	r1, [sp, #16]
 8002772:	dc07      	bgt.n	8002784 <__ieee754_rem_pio2+0x24>
 8002774:	2200      	movs	r2, #0
 8002776:	2300      	movs	r3, #0
 8002778:	e9c4 0100 	strd	r0, r1, [r4]
 800277c:	e9c4 2302 	strd	r2, r3, [r4, #8]
 8002780:	2500      	movs	r5, #0
 8002782:	e024      	b.n	80027ce <__ieee754_rem_pio2+0x6e>
 8002784:	4abd      	ldr	r2, [pc, #756]	; (8002a7c <__ieee754_rem_pio2+0x31c>)
 8002786:	4592      	cmp	sl, r2
 8002788:	dc72      	bgt.n	8002870 <__ieee754_rem_pio2+0x110>
 800278a:	9b04      	ldr	r3, [sp, #16]
 800278c:	4dbc      	ldr	r5, [pc, #752]	; (8002a80 <__ieee754_rem_pio2+0x320>)
 800278e:	2b00      	cmp	r3, #0
 8002790:	a3ab      	add	r3, pc, #684	; (adr r3, 8002a40 <__ieee754_rem_pio2+0x2e0>)
 8002792:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002796:	dd36      	ble.n	8002806 <__ieee754_rem_pio2+0xa6>
 8002798:	f7fd fe74 	bl	8000484 <__aeabi_dsub>
 800279c:	45aa      	cmp	sl, r5
 800279e:	4606      	mov	r6, r0
 80027a0:	460f      	mov	r7, r1
 80027a2:	d018      	beq.n	80027d6 <__ieee754_rem_pio2+0x76>
 80027a4:	a3a8      	add	r3, pc, #672	; (adr r3, 8002a48 <__ieee754_rem_pio2+0x2e8>)
 80027a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80027aa:	f7fd fe6b 	bl	8000484 <__aeabi_dsub>
 80027ae:	4602      	mov	r2, r0
 80027b0:	460b      	mov	r3, r1
 80027b2:	4630      	mov	r0, r6
 80027b4:	e9c4 2300 	strd	r2, r3, [r4]
 80027b8:	4639      	mov	r1, r7
 80027ba:	f7fd fe63 	bl	8000484 <__aeabi_dsub>
 80027be:	a3a2      	add	r3, pc, #648	; (adr r3, 8002a48 <__ieee754_rem_pio2+0x2e8>)
 80027c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80027c4:	f7fd fe5e 	bl	8000484 <__aeabi_dsub>
 80027c8:	2501      	movs	r5, #1
 80027ca:	e9c4 0102 	strd	r0, r1, [r4, #8]
 80027ce:	4628      	mov	r0, r5
 80027d0:	b00d      	add	sp, #52	; 0x34
 80027d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80027d6:	a39e      	add	r3, pc, #632	; (adr r3, 8002a50 <__ieee754_rem_pio2+0x2f0>)
 80027d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80027dc:	f7fd fe52 	bl	8000484 <__aeabi_dsub>
 80027e0:	a39d      	add	r3, pc, #628	; (adr r3, 8002a58 <__ieee754_rem_pio2+0x2f8>)
 80027e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80027e6:	4606      	mov	r6, r0
 80027e8:	460f      	mov	r7, r1
 80027ea:	f7fd fe4b 	bl	8000484 <__aeabi_dsub>
 80027ee:	4602      	mov	r2, r0
 80027f0:	460b      	mov	r3, r1
 80027f2:	4630      	mov	r0, r6
 80027f4:	e9c4 2300 	strd	r2, r3, [r4]
 80027f8:	4639      	mov	r1, r7
 80027fa:	f7fd fe43 	bl	8000484 <__aeabi_dsub>
 80027fe:	a396      	add	r3, pc, #600	; (adr r3, 8002a58 <__ieee754_rem_pio2+0x2f8>)
 8002800:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002804:	e7de      	b.n	80027c4 <__ieee754_rem_pio2+0x64>
 8002806:	f7fd fe3f 	bl	8000488 <__adddf3>
 800280a:	45aa      	cmp	sl, r5
 800280c:	4606      	mov	r6, r0
 800280e:	460f      	mov	r7, r1
 8002810:	d016      	beq.n	8002840 <__ieee754_rem_pio2+0xe0>
 8002812:	a38d      	add	r3, pc, #564	; (adr r3, 8002a48 <__ieee754_rem_pio2+0x2e8>)
 8002814:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002818:	f7fd fe36 	bl	8000488 <__adddf3>
 800281c:	4602      	mov	r2, r0
 800281e:	460b      	mov	r3, r1
 8002820:	4630      	mov	r0, r6
 8002822:	e9c4 2300 	strd	r2, r3, [r4]
 8002826:	4639      	mov	r1, r7
 8002828:	f7fd fe2c 	bl	8000484 <__aeabi_dsub>
 800282c:	a386      	add	r3, pc, #536	; (adr r3, 8002a48 <__ieee754_rem_pio2+0x2e8>)
 800282e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002832:	f7fd fe29 	bl	8000488 <__adddf3>
 8002836:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 800283a:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800283e:	e7c6      	b.n	80027ce <__ieee754_rem_pio2+0x6e>
 8002840:	a383      	add	r3, pc, #524	; (adr r3, 8002a50 <__ieee754_rem_pio2+0x2f0>)
 8002842:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002846:	f7fd fe1f 	bl	8000488 <__adddf3>
 800284a:	a383      	add	r3, pc, #524	; (adr r3, 8002a58 <__ieee754_rem_pio2+0x2f8>)
 800284c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002850:	4606      	mov	r6, r0
 8002852:	460f      	mov	r7, r1
 8002854:	f7fd fe18 	bl	8000488 <__adddf3>
 8002858:	4602      	mov	r2, r0
 800285a:	460b      	mov	r3, r1
 800285c:	4630      	mov	r0, r6
 800285e:	e9c4 2300 	strd	r2, r3, [r4]
 8002862:	4639      	mov	r1, r7
 8002864:	f7fd fe0e 	bl	8000484 <__aeabi_dsub>
 8002868:	a37b      	add	r3, pc, #492	; (adr r3, 8002a58 <__ieee754_rem_pio2+0x2f8>)
 800286a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800286e:	e7e0      	b.n	8002832 <__ieee754_rem_pio2+0xd2>
 8002870:	4a84      	ldr	r2, [pc, #528]	; (8002a84 <__ieee754_rem_pio2+0x324>)
 8002872:	4592      	cmp	sl, r2
 8002874:	f300 80d5 	bgt.w	8002a22 <__ieee754_rem_pio2+0x2c2>
 8002878:	f000 fe20 	bl	80034bc <fabs>
 800287c:	a378      	add	r3, pc, #480	; (adr r3, 8002a60 <__ieee754_rem_pio2+0x300>)
 800287e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002882:	4606      	mov	r6, r0
 8002884:	460f      	mov	r7, r1
 8002886:	f7fd fccf 	bl	8000228 <__aeabi_dmul>
 800288a:	2200      	movs	r2, #0
 800288c:	4b7e      	ldr	r3, [pc, #504]	; (8002a88 <__ieee754_rem_pio2+0x328>)
 800288e:	f7fd fdfb 	bl	8000488 <__adddf3>
 8002892:	f7fe f837 	bl	8000904 <__aeabi_d2iz>
 8002896:	4605      	mov	r5, r0
 8002898:	f7fd ff42 	bl	8000720 <__aeabi_i2d>
 800289c:	4602      	mov	r2, r0
 800289e:	460b      	mov	r3, r1
 80028a0:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80028a4:	a366      	add	r3, pc, #408	; (adr r3, 8002a40 <__ieee754_rem_pio2+0x2e0>)
 80028a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80028aa:	f7fd fcbd 	bl	8000228 <__aeabi_dmul>
 80028ae:	4602      	mov	r2, r0
 80028b0:	460b      	mov	r3, r1
 80028b2:	4630      	mov	r0, r6
 80028b4:	4639      	mov	r1, r7
 80028b6:	f7fd fde5 	bl	8000484 <__aeabi_dsub>
 80028ba:	a363      	add	r3, pc, #396	; (adr r3, 8002a48 <__ieee754_rem_pio2+0x2e8>)
 80028bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80028c0:	4680      	mov	r8, r0
 80028c2:	4689      	mov	r9, r1
 80028c4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80028c8:	f7fd fcae 	bl	8000228 <__aeabi_dmul>
 80028cc:	2d1f      	cmp	r5, #31
 80028ce:	4606      	mov	r6, r0
 80028d0:	460f      	mov	r7, r1
 80028d2:	dc0e      	bgt.n	80028f2 <__ieee754_rem_pio2+0x192>
 80028d4:	4b6d      	ldr	r3, [pc, #436]	; (8002a8c <__ieee754_rem_pio2+0x32c>)
 80028d6:	1e6a      	subs	r2, r5, #1
 80028d8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80028dc:	4553      	cmp	r3, sl
 80028de:	d008      	beq.n	80028f2 <__ieee754_rem_pio2+0x192>
 80028e0:	4632      	mov	r2, r6
 80028e2:	463b      	mov	r3, r7
 80028e4:	4640      	mov	r0, r8
 80028e6:	4649      	mov	r1, r9
 80028e8:	f7fd fdcc 	bl	8000484 <__aeabi_dsub>
 80028ec:	e9c4 0100 	strd	r0, r1, [r4]
 80028f0:	e013      	b.n	800291a <__ieee754_rem_pio2+0x1ba>
 80028f2:	463b      	mov	r3, r7
 80028f4:	4632      	mov	r2, r6
 80028f6:	4640      	mov	r0, r8
 80028f8:	4649      	mov	r1, r9
 80028fa:	f7fd fdc3 	bl	8000484 <__aeabi_dsub>
 80028fe:	ea4f 532a 	mov.w	r3, sl, asr #20
 8002902:	9305      	str	r3, [sp, #20]
 8002904:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8002908:	ebc3 5a1a 	rsb	sl, r3, sl, lsr #20
 800290c:	f1ba 0f10 	cmp.w	sl, #16
 8002910:	dc1f      	bgt.n	8002952 <__ieee754_rem_pio2+0x1f2>
 8002912:	4602      	mov	r2, r0
 8002914:	460b      	mov	r3, r1
 8002916:	e9c4 2300 	strd	r2, r3, [r4]
 800291a:	e9d4 2a00 	ldrd	r2, sl, [r4]
 800291e:	4640      	mov	r0, r8
 8002920:	4653      	mov	r3, sl
 8002922:	4649      	mov	r1, r9
 8002924:	f7fd fdae 	bl	8000484 <__aeabi_dsub>
 8002928:	4632      	mov	r2, r6
 800292a:	463b      	mov	r3, r7
 800292c:	f7fd fdaa 	bl	8000484 <__aeabi_dsub>
 8002930:	460b      	mov	r3, r1
 8002932:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8002936:	9904      	ldr	r1, [sp, #16]
 8002938:	4602      	mov	r2, r0
 800293a:	2900      	cmp	r1, #0
 800293c:	f6bf af47 	bge.w	80027ce <__ieee754_rem_pio2+0x6e>
 8002940:	f10a 4100 	add.w	r1, sl, #2147483648	; 0x80000000
 8002944:	e9c4 1201 	strd	r1, r2, [r4, #4]
 8002948:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800294c:	60e3      	str	r3, [r4, #12]
 800294e:	426d      	negs	r5, r5
 8002950:	e73d      	b.n	80027ce <__ieee754_rem_pio2+0x6e>
 8002952:	a33f      	add	r3, pc, #252	; (adr r3, 8002a50 <__ieee754_rem_pio2+0x2f0>)
 8002954:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002958:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800295c:	f7fd fc64 	bl	8000228 <__aeabi_dmul>
 8002960:	4606      	mov	r6, r0
 8002962:	460f      	mov	r7, r1
 8002964:	4602      	mov	r2, r0
 8002966:	460b      	mov	r3, r1
 8002968:	4640      	mov	r0, r8
 800296a:	4649      	mov	r1, r9
 800296c:	f7fd fd8a 	bl	8000484 <__aeabi_dsub>
 8002970:	4602      	mov	r2, r0
 8002972:	460b      	mov	r3, r1
 8002974:	4682      	mov	sl, r0
 8002976:	468b      	mov	fp, r1
 8002978:	4640      	mov	r0, r8
 800297a:	4649      	mov	r1, r9
 800297c:	f7fd fd82 	bl	8000484 <__aeabi_dsub>
 8002980:	4632      	mov	r2, r6
 8002982:	463b      	mov	r3, r7
 8002984:	f7fd fd7e 	bl	8000484 <__aeabi_dsub>
 8002988:	a333      	add	r3, pc, #204	; (adr r3, 8002a58 <__ieee754_rem_pio2+0x2f8>)
 800298a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800298e:	4606      	mov	r6, r0
 8002990:	460f      	mov	r7, r1
 8002992:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8002996:	f7fd fc47 	bl	8000228 <__aeabi_dmul>
 800299a:	4632      	mov	r2, r6
 800299c:	463b      	mov	r3, r7
 800299e:	f7fd fd71 	bl	8000484 <__aeabi_dsub>
 80029a2:	4602      	mov	r2, r0
 80029a4:	460b      	mov	r3, r1
 80029a6:	4606      	mov	r6, r0
 80029a8:	460f      	mov	r7, r1
 80029aa:	4650      	mov	r0, sl
 80029ac:	4659      	mov	r1, fp
 80029ae:	f7fd fd69 	bl	8000484 <__aeabi_dsub>
 80029b2:	9a05      	ldr	r2, [sp, #20]
 80029b4:	f3c1 530a 	ubfx	r3, r1, #20, #11
 80029b8:	1ad3      	subs	r3, r2, r3
 80029ba:	2b31      	cmp	r3, #49	; 0x31
 80029bc:	dc06      	bgt.n	80029cc <__ieee754_rem_pio2+0x26c>
 80029be:	4602      	mov	r2, r0
 80029c0:	460b      	mov	r3, r1
 80029c2:	46d0      	mov	r8, sl
 80029c4:	46d9      	mov	r9, fp
 80029c6:	e9c4 2300 	strd	r2, r3, [r4]
 80029ca:	e7a6      	b.n	800291a <__ieee754_rem_pio2+0x1ba>
 80029cc:	a326      	add	r3, pc, #152	; (adr r3, 8002a68 <__ieee754_rem_pio2+0x308>)
 80029ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80029d2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80029d6:	f7fd fc27 	bl	8000228 <__aeabi_dmul>
 80029da:	4606      	mov	r6, r0
 80029dc:	460f      	mov	r7, r1
 80029de:	4602      	mov	r2, r0
 80029e0:	460b      	mov	r3, r1
 80029e2:	4650      	mov	r0, sl
 80029e4:	4659      	mov	r1, fp
 80029e6:	f7fd fd4d 	bl	8000484 <__aeabi_dsub>
 80029ea:	4602      	mov	r2, r0
 80029ec:	460b      	mov	r3, r1
 80029ee:	4680      	mov	r8, r0
 80029f0:	4689      	mov	r9, r1
 80029f2:	4650      	mov	r0, sl
 80029f4:	4659      	mov	r1, fp
 80029f6:	f7fd fd45 	bl	8000484 <__aeabi_dsub>
 80029fa:	4632      	mov	r2, r6
 80029fc:	463b      	mov	r3, r7
 80029fe:	f7fd fd41 	bl	8000484 <__aeabi_dsub>
 8002a02:	a31b      	add	r3, pc, #108	; (adr r3, 8002a70 <__ieee754_rem_pio2+0x310>)
 8002a04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a08:	4606      	mov	r6, r0
 8002a0a:	460f      	mov	r7, r1
 8002a0c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8002a10:	f7fd fc0a 	bl	8000228 <__aeabi_dmul>
 8002a14:	4632      	mov	r2, r6
 8002a16:	463b      	mov	r3, r7
 8002a18:	f7fd fd34 	bl	8000484 <__aeabi_dsub>
 8002a1c:	4606      	mov	r6, r0
 8002a1e:	460f      	mov	r7, r1
 8002a20:	e75e      	b.n	80028e0 <__ieee754_rem_pio2+0x180>
 8002a22:	4a1b      	ldr	r2, [pc, #108]	; (8002a90 <__ieee754_rem_pio2+0x330>)
 8002a24:	4592      	cmp	sl, r2
 8002a26:	dd35      	ble.n	8002a94 <__ieee754_rem_pio2+0x334>
 8002a28:	4602      	mov	r2, r0
 8002a2a:	460b      	mov	r3, r1
 8002a2c:	f7fd fd2a 	bl	8000484 <__aeabi_dsub>
 8002a30:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8002a34:	e9c4 0100 	strd	r0, r1, [r4]
 8002a38:	e6a2      	b.n	8002780 <__ieee754_rem_pio2+0x20>
 8002a3a:	bf00      	nop
 8002a3c:	f3af 8000 	nop.w
 8002a40:	54400000 	.word	0x54400000
 8002a44:	3ff921fb 	.word	0x3ff921fb
 8002a48:	1a626331 	.word	0x1a626331
 8002a4c:	3dd0b461 	.word	0x3dd0b461
 8002a50:	1a600000 	.word	0x1a600000
 8002a54:	3dd0b461 	.word	0x3dd0b461
 8002a58:	2e037073 	.word	0x2e037073
 8002a5c:	3ba3198a 	.word	0x3ba3198a
 8002a60:	6dc9c883 	.word	0x6dc9c883
 8002a64:	3fe45f30 	.word	0x3fe45f30
 8002a68:	2e000000 	.word	0x2e000000
 8002a6c:	3ba3198a 	.word	0x3ba3198a
 8002a70:	252049c1 	.word	0x252049c1
 8002a74:	397b839a 	.word	0x397b839a
 8002a78:	3fe921fb 	.word	0x3fe921fb
 8002a7c:	4002d97b 	.word	0x4002d97b
 8002a80:	3ff921fb 	.word	0x3ff921fb
 8002a84:	413921fb 	.word	0x413921fb
 8002a88:	3fe00000 	.word	0x3fe00000
 8002a8c:	08003f3c 	.word	0x08003f3c
 8002a90:	7fefffff 	.word	0x7fefffff
 8002a94:	ea4f 552a 	mov.w	r5, sl, asr #20
 8002a98:	f2a5 4516 	subw	r5, r5, #1046	; 0x416
 8002a9c:	ebaa 5105 	sub.w	r1, sl, r5, lsl #20
 8002aa0:	460f      	mov	r7, r1
 8002aa2:	4606      	mov	r6, r0
 8002aa4:	f7fd ff2e 	bl	8000904 <__aeabi_d2iz>
 8002aa8:	f7fd fe3a 	bl	8000720 <__aeabi_i2d>
 8002aac:	4602      	mov	r2, r0
 8002aae:	460b      	mov	r3, r1
 8002ab0:	4630      	mov	r0, r6
 8002ab2:	4639      	mov	r1, r7
 8002ab4:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8002ab8:	f7fd fce4 	bl	8000484 <__aeabi_dsub>
 8002abc:	2200      	movs	r2, #0
 8002abe:	4b22      	ldr	r3, [pc, #136]	; (8002b48 <__ieee754_rem_pio2+0x3e8>)
 8002ac0:	f7fd fbb2 	bl	8000228 <__aeabi_dmul>
 8002ac4:	460f      	mov	r7, r1
 8002ac6:	4606      	mov	r6, r0
 8002ac8:	f7fd ff1c 	bl	8000904 <__aeabi_d2iz>
 8002acc:	f7fd fe28 	bl	8000720 <__aeabi_i2d>
 8002ad0:	4602      	mov	r2, r0
 8002ad2:	460b      	mov	r3, r1
 8002ad4:	4630      	mov	r0, r6
 8002ad6:	4639      	mov	r1, r7
 8002ad8:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8002adc:	f7fd fcd2 	bl	8000484 <__aeabi_dsub>
 8002ae0:	2200      	movs	r2, #0
 8002ae2:	4b19      	ldr	r3, [pc, #100]	; (8002b48 <__ieee754_rem_pio2+0x3e8>)
 8002ae4:	f7fd fba0 	bl	8000228 <__aeabi_dmul>
 8002ae8:	f04f 0803 	mov.w	r8, #3
 8002aec:	2600      	movs	r6, #0
 8002aee:	2700      	movs	r7, #0
 8002af0:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8002af4:	f10d 0928 	add.w	r9, sp, #40	; 0x28
 8002af8:	4632      	mov	r2, r6
 8002afa:	e879 0102 	ldrd	r0, r1, [r9], #-8
 8002afe:	463b      	mov	r3, r7
 8002b00:	46c2      	mov	sl, r8
 8002b02:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 8002b06:	f7fd fecb 	bl	80008a0 <__aeabi_dcmpeq>
 8002b0a:	2800      	cmp	r0, #0
 8002b0c:	d1f4      	bne.n	8002af8 <__ieee754_rem_pio2+0x398>
 8002b0e:	4b0f      	ldr	r3, [pc, #60]	; (8002b4c <__ieee754_rem_pio2+0x3ec>)
 8002b10:	462a      	mov	r2, r5
 8002b12:	9301      	str	r3, [sp, #4]
 8002b14:	2302      	movs	r3, #2
 8002b16:	4621      	mov	r1, r4
 8002b18:	9300      	str	r3, [sp, #0]
 8002b1a:	a806      	add	r0, sp, #24
 8002b1c:	4653      	mov	r3, sl
 8002b1e:	f000 f8d5 	bl	8002ccc <__kernel_rem_pio2>
 8002b22:	9b04      	ldr	r3, [sp, #16]
 8002b24:	4605      	mov	r5, r0
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	f6bf ae51 	bge.w	80027ce <__ieee754_rem_pio2+0x6e>
 8002b2c:	e9d4 2100 	ldrd	r2, r1, [r4]
 8002b30:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8002b34:	e9c4 2300 	strd	r2, r3, [r4]
 8002b38:	e9d4 2102 	ldrd	r2, r1, [r4, #8]
 8002b3c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8002b40:	e9c4 2302 	strd	r2, r3, [r4, #8]
 8002b44:	e703      	b.n	800294e <__ieee754_rem_pio2+0x1ee>
 8002b46:	bf00      	nop
 8002b48:	41700000 	.word	0x41700000
 8002b4c:	08003fbc 	.word	0x08003fbc

08002b50 <__kernel_cos>:
 8002b50:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002b54:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 8002b58:	f1b6 5f79 	cmp.w	r6, #1044381696	; 0x3e400000
 8002b5c:	4680      	mov	r8, r0
 8002b5e:	460f      	mov	r7, r1
 8002b60:	e9cd 2300 	strd	r2, r3, [sp]
 8002b64:	da04      	bge.n	8002b70 <__kernel_cos+0x20>
 8002b66:	f7fd fecd 	bl	8000904 <__aeabi_d2iz>
 8002b6a:	2800      	cmp	r0, #0
 8002b6c:	f000 8086 	beq.w	8002c7c <__kernel_cos+0x12c>
 8002b70:	4642      	mov	r2, r8
 8002b72:	463b      	mov	r3, r7
 8002b74:	4640      	mov	r0, r8
 8002b76:	4639      	mov	r1, r7
 8002b78:	f7fd fb56 	bl	8000228 <__aeabi_dmul>
 8002b7c:	2200      	movs	r2, #0
 8002b7e:	4b4e      	ldr	r3, [pc, #312]	; (8002cb8 <__kernel_cos+0x168>)
 8002b80:	4604      	mov	r4, r0
 8002b82:	460d      	mov	r5, r1
 8002b84:	f7fd fb50 	bl	8000228 <__aeabi_dmul>
 8002b88:	a33f      	add	r3, pc, #252	; (adr r3, 8002c88 <__kernel_cos+0x138>)
 8002b8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b8e:	4682      	mov	sl, r0
 8002b90:	468b      	mov	fp, r1
 8002b92:	4620      	mov	r0, r4
 8002b94:	4629      	mov	r1, r5
 8002b96:	f7fd fb47 	bl	8000228 <__aeabi_dmul>
 8002b9a:	a33d      	add	r3, pc, #244	; (adr r3, 8002c90 <__kernel_cos+0x140>)
 8002b9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ba0:	f7fd fc72 	bl	8000488 <__adddf3>
 8002ba4:	4622      	mov	r2, r4
 8002ba6:	462b      	mov	r3, r5
 8002ba8:	f7fd fb3e 	bl	8000228 <__aeabi_dmul>
 8002bac:	a33a      	add	r3, pc, #232	; (adr r3, 8002c98 <__kernel_cos+0x148>)
 8002bae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002bb2:	f7fd fc67 	bl	8000484 <__aeabi_dsub>
 8002bb6:	4622      	mov	r2, r4
 8002bb8:	462b      	mov	r3, r5
 8002bba:	f7fd fb35 	bl	8000228 <__aeabi_dmul>
 8002bbe:	a338      	add	r3, pc, #224	; (adr r3, 8002ca0 <__kernel_cos+0x150>)
 8002bc0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002bc4:	f7fd fc60 	bl	8000488 <__adddf3>
 8002bc8:	4622      	mov	r2, r4
 8002bca:	462b      	mov	r3, r5
 8002bcc:	f7fd fb2c 	bl	8000228 <__aeabi_dmul>
 8002bd0:	a335      	add	r3, pc, #212	; (adr r3, 8002ca8 <__kernel_cos+0x158>)
 8002bd2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002bd6:	f7fd fc55 	bl	8000484 <__aeabi_dsub>
 8002bda:	4622      	mov	r2, r4
 8002bdc:	462b      	mov	r3, r5
 8002bde:	f7fd fb23 	bl	8000228 <__aeabi_dmul>
 8002be2:	a333      	add	r3, pc, #204	; (adr r3, 8002cb0 <__kernel_cos+0x160>)
 8002be4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002be8:	f7fd fc4e 	bl	8000488 <__adddf3>
 8002bec:	4622      	mov	r2, r4
 8002bee:	462b      	mov	r3, r5
 8002bf0:	f7fd fb1a 	bl	8000228 <__aeabi_dmul>
 8002bf4:	4622      	mov	r2, r4
 8002bf6:	462b      	mov	r3, r5
 8002bf8:	f7fd fb16 	bl	8000228 <__aeabi_dmul>
 8002bfc:	e9dd 2300 	ldrd	r2, r3, [sp]
 8002c00:	4604      	mov	r4, r0
 8002c02:	460d      	mov	r5, r1
 8002c04:	4640      	mov	r0, r8
 8002c06:	4639      	mov	r1, r7
 8002c08:	f7fd fb0e 	bl	8000228 <__aeabi_dmul>
 8002c0c:	460b      	mov	r3, r1
 8002c0e:	4602      	mov	r2, r0
 8002c10:	4629      	mov	r1, r5
 8002c12:	4620      	mov	r0, r4
 8002c14:	f7fd fc36 	bl	8000484 <__aeabi_dsub>
 8002c18:	4b28      	ldr	r3, [pc, #160]	; (8002cbc <__kernel_cos+0x16c>)
 8002c1a:	4680      	mov	r8, r0
 8002c1c:	429e      	cmp	r6, r3
 8002c1e:	4689      	mov	r9, r1
 8002c20:	dc0e      	bgt.n	8002c40 <__kernel_cos+0xf0>
 8002c22:	4602      	mov	r2, r0
 8002c24:	460b      	mov	r3, r1
 8002c26:	4650      	mov	r0, sl
 8002c28:	4659      	mov	r1, fp
 8002c2a:	f7fd fc2b 	bl	8000484 <__aeabi_dsub>
 8002c2e:	4602      	mov	r2, r0
 8002c30:	2000      	movs	r0, #0
 8002c32:	460b      	mov	r3, r1
 8002c34:	4922      	ldr	r1, [pc, #136]	; (8002cc0 <__kernel_cos+0x170>)
 8002c36:	f7fd fc25 	bl	8000484 <__aeabi_dsub>
 8002c3a:	b003      	add	sp, #12
 8002c3c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002c40:	2400      	movs	r4, #0
 8002c42:	4b20      	ldr	r3, [pc, #128]	; (8002cc4 <__kernel_cos+0x174>)
 8002c44:	4622      	mov	r2, r4
 8002c46:	429e      	cmp	r6, r3
 8002c48:	bfcc      	ite	gt
 8002c4a:	4d1f      	ldrgt	r5, [pc, #124]	; (8002cc8 <__kernel_cos+0x178>)
 8002c4c:	f5a6 1500 	suble.w	r5, r6, #2097152	; 0x200000
 8002c50:	462b      	mov	r3, r5
 8002c52:	2000      	movs	r0, #0
 8002c54:	491a      	ldr	r1, [pc, #104]	; (8002cc0 <__kernel_cos+0x170>)
 8002c56:	f7fd fc15 	bl	8000484 <__aeabi_dsub>
 8002c5a:	4622      	mov	r2, r4
 8002c5c:	4606      	mov	r6, r0
 8002c5e:	460f      	mov	r7, r1
 8002c60:	462b      	mov	r3, r5
 8002c62:	4650      	mov	r0, sl
 8002c64:	4659      	mov	r1, fp
 8002c66:	f7fd fc0d 	bl	8000484 <__aeabi_dsub>
 8002c6a:	4642      	mov	r2, r8
 8002c6c:	464b      	mov	r3, r9
 8002c6e:	f7fd fc09 	bl	8000484 <__aeabi_dsub>
 8002c72:	4602      	mov	r2, r0
 8002c74:	460b      	mov	r3, r1
 8002c76:	4630      	mov	r0, r6
 8002c78:	4639      	mov	r1, r7
 8002c7a:	e7dc      	b.n	8002c36 <__kernel_cos+0xe6>
 8002c7c:	2000      	movs	r0, #0
 8002c7e:	4910      	ldr	r1, [pc, #64]	; (8002cc0 <__kernel_cos+0x170>)
 8002c80:	e7db      	b.n	8002c3a <__kernel_cos+0xea>
 8002c82:	bf00      	nop
 8002c84:	f3af 8000 	nop.w
 8002c88:	be8838d4 	.word	0xbe8838d4
 8002c8c:	bda8fae9 	.word	0xbda8fae9
 8002c90:	bdb4b1c4 	.word	0xbdb4b1c4
 8002c94:	3e21ee9e 	.word	0x3e21ee9e
 8002c98:	809c52ad 	.word	0x809c52ad
 8002c9c:	3e927e4f 	.word	0x3e927e4f
 8002ca0:	19cb1590 	.word	0x19cb1590
 8002ca4:	3efa01a0 	.word	0x3efa01a0
 8002ca8:	16c15177 	.word	0x16c15177
 8002cac:	3f56c16c 	.word	0x3f56c16c
 8002cb0:	5555554c 	.word	0x5555554c
 8002cb4:	3fa55555 	.word	0x3fa55555
 8002cb8:	3fe00000 	.word	0x3fe00000
 8002cbc:	3fd33332 	.word	0x3fd33332
 8002cc0:	3ff00000 	.word	0x3ff00000
 8002cc4:	3fe90000 	.word	0x3fe90000
 8002cc8:	3fd20000 	.word	0x3fd20000

08002ccc <__kernel_rem_pio2>:
 8002ccc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002cd0:	f5ad 7d19 	sub.w	sp, sp, #612	; 0x264
 8002cd4:	9308      	str	r3, [sp, #32]
 8002cd6:	9106      	str	r1, [sp, #24]
 8002cd8:	4bb6      	ldr	r3, [pc, #728]	; (8002fb4 <__kernel_rem_pio2+0x2e8>)
 8002cda:	99a2      	ldr	r1, [sp, #648]	; 0x288
 8002cdc:	f112 0f14 	cmn.w	r2, #20
 8002ce0:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8002ce4:	bfa8      	it	ge
 8002ce6:	1ed4      	subge	r4, r2, #3
 8002ce8:	9302      	str	r3, [sp, #8]
 8002cea:	9b08      	ldr	r3, [sp, #32]
 8002cec:	bfb8      	it	lt
 8002cee:	2400      	movlt	r4, #0
 8002cf0:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
 8002cf4:	9307      	str	r3, [sp, #28]
 8002cf6:	bfa4      	itt	ge
 8002cf8:	2318      	movge	r3, #24
 8002cfa:	fb94 f4f3 	sdivge	r4, r4, r3
 8002cfe:	f06f 0317 	mvn.w	r3, #23
 8002d02:	fb04 3303 	mla	r3, r4, r3, r3
 8002d06:	eb03 0b02 	add.w	fp, r3, r2
 8002d0a:	9a07      	ldr	r2, [sp, #28]
 8002d0c:	9b02      	ldr	r3, [sp, #8]
 8002d0e:	1aa7      	subs	r7, r4, r2
 8002d10:	eb03 0802 	add.w	r8, r3, r2
 8002d14:	9ba3      	ldr	r3, [sp, #652]	; 0x28c
 8002d16:	2500      	movs	r5, #0
 8002d18:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 8002d1c:	2200      	movs	r2, #0
 8002d1e:	2300      	movs	r3, #0
 8002d20:	9009      	str	r0, [sp, #36]	; 0x24
 8002d22:	ae20      	add	r6, sp, #128	; 0x80
 8002d24:	4545      	cmp	r5, r8
 8002d26:	dd14      	ble.n	8002d52 <__kernel_rem_pio2+0x86>
 8002d28:	f04f 0800 	mov.w	r8, #0
 8002d2c:	9a08      	ldr	r2, [sp, #32]
 8002d2e:	ab20      	add	r3, sp, #128	; 0x80
 8002d30:	eb03 05c2 	add.w	r5, r3, r2, lsl #3
 8002d34:	f50d 7ae0 	add.w	sl, sp, #448	; 0x1c0
 8002d38:	9b02      	ldr	r3, [sp, #8]
 8002d3a:	4598      	cmp	r8, r3
 8002d3c:	dc35      	bgt.n	8002daa <__kernel_rem_pio2+0xde>
 8002d3e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002d40:	2200      	movs	r2, #0
 8002d42:	f1a3 0908 	sub.w	r9, r3, #8
 8002d46:	2300      	movs	r3, #0
 8002d48:	462f      	mov	r7, r5
 8002d4a:	2600      	movs	r6, #0
 8002d4c:	e9cd 2300 	strd	r2, r3, [sp]
 8002d50:	e01f      	b.n	8002d92 <__kernel_rem_pio2+0xc6>
 8002d52:	42ef      	cmn	r7, r5
 8002d54:	d40b      	bmi.n	8002d6e <__kernel_rem_pio2+0xa2>
 8002d56:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 8002d5a:	e9cd 2300 	strd	r2, r3, [sp]
 8002d5e:	f7fd fcdf 	bl	8000720 <__aeabi_i2d>
 8002d62:	e9dd 2300 	ldrd	r2, r3, [sp]
 8002d66:	e8e6 0102 	strd	r0, r1, [r6], #8
 8002d6a:	3501      	adds	r5, #1
 8002d6c:	e7da      	b.n	8002d24 <__kernel_rem_pio2+0x58>
 8002d6e:	4610      	mov	r0, r2
 8002d70:	4619      	mov	r1, r3
 8002d72:	e7f8      	b.n	8002d66 <__kernel_rem_pio2+0x9a>
 8002d74:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002d78:	e9f9 0102 	ldrd	r0, r1, [r9, #8]!
 8002d7c:	f7fd fa54 	bl	8000228 <__aeabi_dmul>
 8002d80:	4602      	mov	r2, r0
 8002d82:	460b      	mov	r3, r1
 8002d84:	e9dd 0100 	ldrd	r0, r1, [sp]
 8002d88:	f7fd fb7e 	bl	8000488 <__adddf3>
 8002d8c:	e9cd 0100 	strd	r0, r1, [sp]
 8002d90:	3601      	adds	r6, #1
 8002d92:	9b07      	ldr	r3, [sp, #28]
 8002d94:	3f08      	subs	r7, #8
 8002d96:	429e      	cmp	r6, r3
 8002d98:	ddec      	ble.n	8002d74 <__kernel_rem_pio2+0xa8>
 8002d9a:	e9dd 2300 	ldrd	r2, r3, [sp]
 8002d9e:	f108 0801 	add.w	r8, r8, #1
 8002da2:	e8ea 2302 	strd	r2, r3, [sl], #8
 8002da6:	3508      	adds	r5, #8
 8002da8:	e7c6      	b.n	8002d38 <__kernel_rem_pio2+0x6c>
 8002daa:	9b02      	ldr	r3, [sp, #8]
 8002dac:	aa0c      	add	r2, sp, #48	; 0x30
 8002dae:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8002db2:	930b      	str	r3, [sp, #44]	; 0x2c
 8002db4:	9ba3      	ldr	r3, [sp, #652]	; 0x28c
 8002db6:	9e02      	ldr	r6, [sp, #8]
 8002db8:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8002dbc:	930a      	str	r3, [sp, #40]	; 0x28
 8002dbe:	ab98      	add	r3, sp, #608	; 0x260
 8002dc0:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8002dc4:	e953 4528 	ldrd	r4, r5, [r3, #-160]	; 0xa0
 8002dc8:	ab70      	add	r3, sp, #448	; 0x1c0
 8002dca:	eb03 0ac6 	add.w	sl, r3, r6, lsl #3
 8002dce:	46d0      	mov	r8, sl
 8002dd0:	46b1      	mov	r9, r6
 8002dd2:	af0c      	add	r7, sp, #48	; 0x30
 8002dd4:	9700      	str	r7, [sp, #0]
 8002dd6:	f1b9 0f00 	cmp.w	r9, #0
 8002dda:	f1a8 0808 	sub.w	r8, r8, #8
 8002dde:	dc71      	bgt.n	8002ec4 <__kernel_rem_pio2+0x1f8>
 8002de0:	465a      	mov	r2, fp
 8002de2:	4620      	mov	r0, r4
 8002de4:	4629      	mov	r1, r5
 8002de6:	f000 fbef 	bl	80035c8 <scalbn>
 8002dea:	2200      	movs	r2, #0
 8002dec:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 8002df0:	4604      	mov	r4, r0
 8002df2:	460d      	mov	r5, r1
 8002df4:	f7fd fa18 	bl	8000228 <__aeabi_dmul>
 8002df8:	f000 fb66 	bl	80034c8 <floor>
 8002dfc:	2200      	movs	r2, #0
 8002dfe:	4b6e      	ldr	r3, [pc, #440]	; (8002fb8 <__kernel_rem_pio2+0x2ec>)
 8002e00:	f7fd fa12 	bl	8000228 <__aeabi_dmul>
 8002e04:	4602      	mov	r2, r0
 8002e06:	460b      	mov	r3, r1
 8002e08:	4620      	mov	r0, r4
 8002e0a:	4629      	mov	r1, r5
 8002e0c:	f7fd fb3a 	bl	8000484 <__aeabi_dsub>
 8002e10:	460d      	mov	r5, r1
 8002e12:	4604      	mov	r4, r0
 8002e14:	f7fd fd76 	bl	8000904 <__aeabi_d2iz>
 8002e18:	9004      	str	r0, [sp, #16]
 8002e1a:	f7fd fc81 	bl	8000720 <__aeabi_i2d>
 8002e1e:	4602      	mov	r2, r0
 8002e20:	460b      	mov	r3, r1
 8002e22:	4620      	mov	r0, r4
 8002e24:	4629      	mov	r1, r5
 8002e26:	f7fd fb2d 	bl	8000484 <__aeabi_dsub>
 8002e2a:	f1bb 0f00 	cmp.w	fp, #0
 8002e2e:	4680      	mov	r8, r0
 8002e30:	4689      	mov	r9, r1
 8002e32:	dd70      	ble.n	8002f16 <__kernel_rem_pio2+0x24a>
 8002e34:	1e72      	subs	r2, r6, #1
 8002e36:	ab0c      	add	r3, sp, #48	; 0x30
 8002e38:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8002e3c:	9c04      	ldr	r4, [sp, #16]
 8002e3e:	f1cb 0118 	rsb	r1, fp, #24
 8002e42:	fa40 f301 	asr.w	r3, r0, r1
 8002e46:	441c      	add	r4, r3
 8002e48:	408b      	lsls	r3, r1
 8002e4a:	1ac0      	subs	r0, r0, r3
 8002e4c:	ab0c      	add	r3, sp, #48	; 0x30
 8002e4e:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 8002e52:	f1cb 0317 	rsb	r3, fp, #23
 8002e56:	9404      	str	r4, [sp, #16]
 8002e58:	fa40 f303 	asr.w	r3, r0, r3
 8002e5c:	9300      	str	r3, [sp, #0]
 8002e5e:	9b00      	ldr	r3, [sp, #0]
 8002e60:	2b00      	cmp	r3, #0
 8002e62:	dd66      	ble.n	8002f32 <__kernel_rem_pio2+0x266>
 8002e64:	2200      	movs	r2, #0
 8002e66:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 8002e6a:	4614      	mov	r4, r2
 8002e6c:	9b04      	ldr	r3, [sp, #16]
 8002e6e:	3301      	adds	r3, #1
 8002e70:	9304      	str	r3, [sp, #16]
 8002e72:	4296      	cmp	r6, r2
 8002e74:	f300 80ac 	bgt.w	8002fd0 <__kernel_rem_pio2+0x304>
 8002e78:	f1bb 0f00 	cmp.w	fp, #0
 8002e7c:	dd07      	ble.n	8002e8e <__kernel_rem_pio2+0x1c2>
 8002e7e:	f1bb 0f01 	cmp.w	fp, #1
 8002e82:	f000 80b4 	beq.w	8002fee <__kernel_rem_pio2+0x322>
 8002e86:	f1bb 0f02 	cmp.w	fp, #2
 8002e8a:	f000 80ba 	beq.w	8003002 <__kernel_rem_pio2+0x336>
 8002e8e:	9b00      	ldr	r3, [sp, #0]
 8002e90:	2b02      	cmp	r3, #2
 8002e92:	d14e      	bne.n	8002f32 <__kernel_rem_pio2+0x266>
 8002e94:	4642      	mov	r2, r8
 8002e96:	464b      	mov	r3, r9
 8002e98:	2000      	movs	r0, #0
 8002e9a:	4948      	ldr	r1, [pc, #288]	; (8002fbc <__kernel_rem_pio2+0x2f0>)
 8002e9c:	f7fd faf2 	bl	8000484 <__aeabi_dsub>
 8002ea0:	4680      	mov	r8, r0
 8002ea2:	4689      	mov	r9, r1
 8002ea4:	2c00      	cmp	r4, #0
 8002ea6:	d044      	beq.n	8002f32 <__kernel_rem_pio2+0x266>
 8002ea8:	465a      	mov	r2, fp
 8002eaa:	2000      	movs	r0, #0
 8002eac:	4943      	ldr	r1, [pc, #268]	; (8002fbc <__kernel_rem_pio2+0x2f0>)
 8002eae:	f000 fb8b 	bl	80035c8 <scalbn>
 8002eb2:	4602      	mov	r2, r0
 8002eb4:	460b      	mov	r3, r1
 8002eb6:	4640      	mov	r0, r8
 8002eb8:	4649      	mov	r1, r9
 8002eba:	f7fd fae3 	bl	8000484 <__aeabi_dsub>
 8002ebe:	4680      	mov	r8, r0
 8002ec0:	4689      	mov	r9, r1
 8002ec2:	e036      	b.n	8002f32 <__kernel_rem_pio2+0x266>
 8002ec4:	2200      	movs	r2, #0
 8002ec6:	4b3e      	ldr	r3, [pc, #248]	; (8002fc0 <__kernel_rem_pio2+0x2f4>)
 8002ec8:	4620      	mov	r0, r4
 8002eca:	4629      	mov	r1, r5
 8002ecc:	f7fd f9ac 	bl	8000228 <__aeabi_dmul>
 8002ed0:	f7fd fd18 	bl	8000904 <__aeabi_d2iz>
 8002ed4:	f7fd fc24 	bl	8000720 <__aeabi_i2d>
 8002ed8:	4602      	mov	r2, r0
 8002eda:	460b      	mov	r3, r1
 8002edc:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8002ee0:	2200      	movs	r2, #0
 8002ee2:	4b38      	ldr	r3, [pc, #224]	; (8002fc4 <__kernel_rem_pio2+0x2f8>)
 8002ee4:	f7fd f9a0 	bl	8000228 <__aeabi_dmul>
 8002ee8:	4602      	mov	r2, r0
 8002eea:	460b      	mov	r3, r1
 8002eec:	4620      	mov	r0, r4
 8002eee:	4629      	mov	r1, r5
 8002ef0:	f7fd fac8 	bl	8000484 <__aeabi_dsub>
 8002ef4:	f7fd fd06 	bl	8000904 <__aeabi_d2iz>
 8002ef8:	9b00      	ldr	r3, [sp, #0]
 8002efa:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
 8002efe:	f843 0b04 	str.w	r0, [r3], #4
 8002f02:	9300      	str	r3, [sp, #0]
 8002f04:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8002f08:	e9d8 2300 	ldrd	r2, r3, [r8]
 8002f0c:	f7fd fabc 	bl	8000488 <__adddf3>
 8002f10:	4604      	mov	r4, r0
 8002f12:	460d      	mov	r5, r1
 8002f14:	e75f      	b.n	8002dd6 <__kernel_rem_pio2+0x10a>
 8002f16:	d105      	bne.n	8002f24 <__kernel_rem_pio2+0x258>
 8002f18:	1e73      	subs	r3, r6, #1
 8002f1a:	aa0c      	add	r2, sp, #48	; 0x30
 8002f1c:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8002f20:	15c3      	asrs	r3, r0, #23
 8002f22:	e79b      	b.n	8002e5c <__kernel_rem_pio2+0x190>
 8002f24:	2200      	movs	r2, #0
 8002f26:	4b28      	ldr	r3, [pc, #160]	; (8002fc8 <__kernel_rem_pio2+0x2fc>)
 8002f28:	f7fd fcd8 	bl	80008dc <__aeabi_dcmpge>
 8002f2c:	2800      	cmp	r0, #0
 8002f2e:	d13e      	bne.n	8002fae <__kernel_rem_pio2+0x2e2>
 8002f30:	9000      	str	r0, [sp, #0]
 8002f32:	2200      	movs	r2, #0
 8002f34:	2300      	movs	r3, #0
 8002f36:	4640      	mov	r0, r8
 8002f38:	4649      	mov	r1, r9
 8002f3a:	f7fd fcb1 	bl	80008a0 <__aeabi_dcmpeq>
 8002f3e:	2800      	cmp	r0, #0
 8002f40:	f000 80b1 	beq.w	80030a6 <__kernel_rem_pio2+0x3da>
 8002f44:	1e74      	subs	r4, r6, #1
 8002f46:	4623      	mov	r3, r4
 8002f48:	2200      	movs	r2, #0
 8002f4a:	9902      	ldr	r1, [sp, #8]
 8002f4c:	428b      	cmp	r3, r1
 8002f4e:	da5f      	bge.n	8003010 <__kernel_rem_pio2+0x344>
 8002f50:	2a00      	cmp	r2, #0
 8002f52:	d074      	beq.n	800303e <__kernel_rem_pio2+0x372>
 8002f54:	ab0c      	add	r3, sp, #48	; 0x30
 8002f56:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 8002f5a:	f1ab 0b18 	sub.w	fp, fp, #24
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	f000 809f 	beq.w	80030a2 <__kernel_rem_pio2+0x3d6>
 8002f64:	465a      	mov	r2, fp
 8002f66:	2000      	movs	r0, #0
 8002f68:	4914      	ldr	r1, [pc, #80]	; (8002fbc <__kernel_rem_pio2+0x2f0>)
 8002f6a:	f000 fb2d 	bl	80035c8 <scalbn>
 8002f6e:	46a2      	mov	sl, r4
 8002f70:	4606      	mov	r6, r0
 8002f72:	460f      	mov	r7, r1
 8002f74:	f04f 0800 	mov.w	r8, #0
 8002f78:	ab70      	add	r3, sp, #448	; 0x1c0
 8002f7a:	f8df 9044 	ldr.w	r9, [pc, #68]	; 8002fc0 <__kernel_rem_pio2+0x2f4>
 8002f7e:	00e5      	lsls	r5, r4, #3
 8002f80:	eb03 0bc4 	add.w	fp, r3, r4, lsl #3
 8002f84:	f1ba 0f00 	cmp.w	sl, #0
 8002f88:	f280 80c3 	bge.w	8003112 <__kernel_rem_pio2+0x446>
 8002f8c:	4626      	mov	r6, r4
 8002f8e:	2e00      	cmp	r6, #0
 8002f90:	f2c0 80f5 	blt.w	800317e <__kernel_rem_pio2+0x4b2>
 8002f94:	4b0d      	ldr	r3, [pc, #52]	; (8002fcc <__kernel_rem_pio2+0x300>)
 8002f96:	f04f 0a00 	mov.w	sl, #0
 8002f9a:	9307      	str	r3, [sp, #28]
 8002f9c:	ab70      	add	r3, sp, #448	; 0x1c0
 8002f9e:	f04f 0b00 	mov.w	fp, #0
 8002fa2:	f04f 0800 	mov.w	r8, #0
 8002fa6:	eb03 09c6 	add.w	r9, r3, r6, lsl #3
 8002faa:	1ba7      	subs	r7, r4, r6
 8002fac:	e0db      	b.n	8003166 <__kernel_rem_pio2+0x49a>
 8002fae:	2302      	movs	r3, #2
 8002fb0:	9300      	str	r3, [sp, #0]
 8002fb2:	e757      	b.n	8002e64 <__kernel_rem_pio2+0x198>
 8002fb4:	08004108 	.word	0x08004108
 8002fb8:	40200000 	.word	0x40200000
 8002fbc:	3ff00000 	.word	0x3ff00000
 8002fc0:	3e700000 	.word	0x3e700000
 8002fc4:	41700000 	.word	0x41700000
 8002fc8:	3fe00000 	.word	0x3fe00000
 8002fcc:	080040c8 	.word	0x080040c8
 8002fd0:	683b      	ldr	r3, [r7, #0]
 8002fd2:	b944      	cbnz	r4, 8002fe6 <__kernel_rem_pio2+0x31a>
 8002fd4:	b11b      	cbz	r3, 8002fde <__kernel_rem_pio2+0x312>
 8002fd6:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 8002fda:	603b      	str	r3, [r7, #0]
 8002fdc:	2301      	movs	r3, #1
 8002fde:	461c      	mov	r4, r3
 8002fe0:	3201      	adds	r2, #1
 8002fe2:	3704      	adds	r7, #4
 8002fe4:	e745      	b.n	8002e72 <__kernel_rem_pio2+0x1a6>
 8002fe6:	1acb      	subs	r3, r1, r3
 8002fe8:	603b      	str	r3, [r7, #0]
 8002fea:	4623      	mov	r3, r4
 8002fec:	e7f7      	b.n	8002fde <__kernel_rem_pio2+0x312>
 8002fee:	1e72      	subs	r2, r6, #1
 8002ff0:	ab0c      	add	r3, sp, #48	; 0x30
 8002ff2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002ff6:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8002ffa:	a90c      	add	r1, sp, #48	; 0x30
 8002ffc:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 8003000:	e745      	b.n	8002e8e <__kernel_rem_pio2+0x1c2>
 8003002:	1e72      	subs	r2, r6, #1
 8003004:	ab0c      	add	r3, sp, #48	; 0x30
 8003006:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800300a:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800300e:	e7f4      	b.n	8002ffa <__kernel_rem_pio2+0x32e>
 8003010:	a90c      	add	r1, sp, #48	; 0x30
 8003012:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8003016:	3b01      	subs	r3, #1
 8003018:	430a      	orrs	r2, r1
 800301a:	e796      	b.n	8002f4a <__kernel_rem_pio2+0x27e>
 800301c:	3401      	adds	r4, #1
 800301e:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8003022:	2a00      	cmp	r2, #0
 8003024:	d0fa      	beq.n	800301c <__kernel_rem_pio2+0x350>
 8003026:	9b08      	ldr	r3, [sp, #32]
 8003028:	f106 0801 	add.w	r8, r6, #1
 800302c:	18f5      	adds	r5, r6, r3
 800302e:	ab20      	add	r3, sp, #128	; 0x80
 8003030:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 8003034:	4434      	add	r4, r6
 8003036:	4544      	cmp	r4, r8
 8003038:	da04      	bge.n	8003044 <__kernel_rem_pio2+0x378>
 800303a:	4626      	mov	r6, r4
 800303c:	e6bf      	b.n	8002dbe <__kernel_rem_pio2+0xf2>
 800303e:	2401      	movs	r4, #1
 8003040:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8003042:	e7ec      	b.n	800301e <__kernel_rem_pio2+0x352>
 8003044:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003046:	f04f 0900 	mov.w	r9, #0
 800304a:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 800304e:	f7fd fb67 	bl	8000720 <__aeabi_i2d>
 8003052:	2600      	movs	r6, #0
 8003054:	2700      	movs	r7, #0
 8003056:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003058:	e9c5 0100 	strd	r0, r1, [r5]
 800305c:	3b08      	subs	r3, #8
 800305e:	9300      	str	r3, [sp, #0]
 8003060:	9504      	str	r5, [sp, #16]
 8003062:	9b07      	ldr	r3, [sp, #28]
 8003064:	4599      	cmp	r9, r3
 8003066:	dd05      	ble.n	8003074 <__kernel_rem_pio2+0x3a8>
 8003068:	e9ea 6702 	strd	r6, r7, [sl, #8]!
 800306c:	f108 0801 	add.w	r8, r8, #1
 8003070:	3508      	adds	r5, #8
 8003072:	e7e0      	b.n	8003036 <__kernel_rem_pio2+0x36a>
 8003074:	f8dd c010 	ldr.w	ip, [sp, #16]
 8003078:	9900      	ldr	r1, [sp, #0]
 800307a:	f109 0901 	add.w	r9, r9, #1
 800307e:	e9f1 2302 	ldrd	r2, r3, [r1, #8]!
 8003082:	9100      	str	r1, [sp, #0]
 8003084:	e87c 0102 	ldrd	r0, r1, [ip], #-8
 8003088:	f8cd c010 	str.w	ip, [sp, #16]
 800308c:	f7fd f8cc 	bl	8000228 <__aeabi_dmul>
 8003090:	4602      	mov	r2, r0
 8003092:	460b      	mov	r3, r1
 8003094:	4630      	mov	r0, r6
 8003096:	4639      	mov	r1, r7
 8003098:	f7fd f9f6 	bl	8000488 <__adddf3>
 800309c:	4606      	mov	r6, r0
 800309e:	460f      	mov	r7, r1
 80030a0:	e7df      	b.n	8003062 <__kernel_rem_pio2+0x396>
 80030a2:	3c01      	subs	r4, #1
 80030a4:	e756      	b.n	8002f54 <__kernel_rem_pio2+0x288>
 80030a6:	f1cb 0200 	rsb	r2, fp, #0
 80030aa:	4640      	mov	r0, r8
 80030ac:	4649      	mov	r1, r9
 80030ae:	f000 fa8b 	bl	80035c8 <scalbn>
 80030b2:	2200      	movs	r2, #0
 80030b4:	4ba4      	ldr	r3, [pc, #656]	; (8003348 <__kernel_rem_pio2+0x67c>)
 80030b6:	4604      	mov	r4, r0
 80030b8:	460d      	mov	r5, r1
 80030ba:	f7fd fc0f 	bl	80008dc <__aeabi_dcmpge>
 80030be:	b1f8      	cbz	r0, 8003100 <__kernel_rem_pio2+0x434>
 80030c0:	2200      	movs	r2, #0
 80030c2:	4ba2      	ldr	r3, [pc, #648]	; (800334c <__kernel_rem_pio2+0x680>)
 80030c4:	4620      	mov	r0, r4
 80030c6:	4629      	mov	r1, r5
 80030c8:	f7fd f8ae 	bl	8000228 <__aeabi_dmul>
 80030cc:	f7fd fc1a 	bl	8000904 <__aeabi_d2iz>
 80030d0:	4607      	mov	r7, r0
 80030d2:	f7fd fb25 	bl	8000720 <__aeabi_i2d>
 80030d6:	2200      	movs	r2, #0
 80030d8:	4b9b      	ldr	r3, [pc, #620]	; (8003348 <__kernel_rem_pio2+0x67c>)
 80030da:	f7fd f8a5 	bl	8000228 <__aeabi_dmul>
 80030de:	460b      	mov	r3, r1
 80030e0:	4602      	mov	r2, r0
 80030e2:	4629      	mov	r1, r5
 80030e4:	4620      	mov	r0, r4
 80030e6:	f7fd f9cd 	bl	8000484 <__aeabi_dsub>
 80030ea:	f7fd fc0b 	bl	8000904 <__aeabi_d2iz>
 80030ee:	1c74      	adds	r4, r6, #1
 80030f0:	ab0c      	add	r3, sp, #48	; 0x30
 80030f2:	f843 0026 	str.w	r0, [r3, r6, lsl #2]
 80030f6:	f10b 0b18 	add.w	fp, fp, #24
 80030fa:	f843 7024 	str.w	r7, [r3, r4, lsl #2]
 80030fe:	e731      	b.n	8002f64 <__kernel_rem_pio2+0x298>
 8003100:	4620      	mov	r0, r4
 8003102:	4629      	mov	r1, r5
 8003104:	f7fd fbfe 	bl	8000904 <__aeabi_d2iz>
 8003108:	ab0c      	add	r3, sp, #48	; 0x30
 800310a:	4634      	mov	r4, r6
 800310c:	f843 0026 	str.w	r0, [r3, r6, lsl #2]
 8003110:	e728      	b.n	8002f64 <__kernel_rem_pio2+0x298>
 8003112:	ab0c      	add	r3, sp, #48	; 0x30
 8003114:	f853 002a 	ldr.w	r0, [r3, sl, lsl #2]
 8003118:	f7fd fb02 	bl	8000720 <__aeabi_i2d>
 800311c:	4632      	mov	r2, r6
 800311e:	463b      	mov	r3, r7
 8003120:	f7fd f882 	bl	8000228 <__aeabi_dmul>
 8003124:	4642      	mov	r2, r8
 8003126:	e86b 0102 	strd	r0, r1, [fp], #-8
 800312a:	464b      	mov	r3, r9
 800312c:	4630      	mov	r0, r6
 800312e:	4639      	mov	r1, r7
 8003130:	f7fd f87a 	bl	8000228 <__aeabi_dmul>
 8003134:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8003138:	4606      	mov	r6, r0
 800313a:	460f      	mov	r7, r1
 800313c:	e722      	b.n	8002f84 <__kernel_rem_pio2+0x2b8>
 800313e:	f8dd c01c 	ldr.w	ip, [sp, #28]
 8003142:	e8f9 2302 	ldrd	r2, r3, [r9], #8
 8003146:	e8fc 0102 	ldrd	r0, r1, [ip], #8
 800314a:	f8cd c01c 	str.w	ip, [sp, #28]
 800314e:	f7fd f86b 	bl	8000228 <__aeabi_dmul>
 8003152:	4602      	mov	r2, r0
 8003154:	460b      	mov	r3, r1
 8003156:	4650      	mov	r0, sl
 8003158:	4659      	mov	r1, fp
 800315a:	f7fd f995 	bl	8000488 <__adddf3>
 800315e:	4682      	mov	sl, r0
 8003160:	468b      	mov	fp, r1
 8003162:	f108 0801 	add.w	r8, r8, #1
 8003166:	9b02      	ldr	r3, [sp, #8]
 8003168:	4598      	cmp	r8, r3
 800316a:	dc01      	bgt.n	8003170 <__kernel_rem_pio2+0x4a4>
 800316c:	45b8      	cmp	r8, r7
 800316e:	dde6      	ble.n	800313e <__kernel_rem_pio2+0x472>
 8003170:	ab48      	add	r3, sp, #288	; 0x120
 8003172:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 8003176:	e9c7 ab00 	strd	sl, fp, [r7]
 800317a:	3e01      	subs	r6, #1
 800317c:	e707      	b.n	8002f8e <__kernel_rem_pio2+0x2c2>
 800317e:	9ba2      	ldr	r3, [sp, #648]	; 0x288
 8003180:	2b02      	cmp	r3, #2
 8003182:	dc09      	bgt.n	8003198 <__kernel_rem_pio2+0x4cc>
 8003184:	2b00      	cmp	r3, #0
 8003186:	dc32      	bgt.n	80031ee <__kernel_rem_pio2+0x522>
 8003188:	d05a      	beq.n	8003240 <__kernel_rem_pio2+0x574>
 800318a:	9b04      	ldr	r3, [sp, #16]
 800318c:	f003 0007 	and.w	r0, r3, #7
 8003190:	f50d 7d19 	add.w	sp, sp, #612	; 0x264
 8003194:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003198:	9ba2      	ldr	r3, [sp, #648]	; 0x288
 800319a:	2b03      	cmp	r3, #3
 800319c:	d1f5      	bne.n	800318a <__kernel_rem_pio2+0x4be>
 800319e:	ab48      	add	r3, sp, #288	; 0x120
 80031a0:	441d      	add	r5, r3
 80031a2:	46aa      	mov	sl, r5
 80031a4:	46a3      	mov	fp, r4
 80031a6:	f1bb 0f00 	cmp.w	fp, #0
 80031aa:	dc76      	bgt.n	800329a <__kernel_rem_pio2+0x5ce>
 80031ac:	46aa      	mov	sl, r5
 80031ae:	46a3      	mov	fp, r4
 80031b0:	f1bb 0f01 	cmp.w	fp, #1
 80031b4:	f300 8090 	bgt.w	80032d8 <__kernel_rem_pio2+0x60c>
 80031b8:	2700      	movs	r7, #0
 80031ba:	463e      	mov	r6, r7
 80031bc:	2c01      	cmp	r4, #1
 80031be:	f300 80aa 	bgt.w	8003316 <__kernel_rem_pio2+0x64a>
 80031c2:	e9dd 5048 	ldrd	r5, r0, [sp, #288]	; 0x120
 80031c6:	e9dd 414a 	ldrd	r4, r1, [sp, #296]	; 0x128
 80031ca:	9b00      	ldr	r3, [sp, #0]
 80031cc:	2b00      	cmp	r3, #0
 80031ce:	f040 80ac 	bne.w	800332a <__kernel_rem_pio2+0x65e>
 80031d2:	4603      	mov	r3, r0
 80031d4:	462a      	mov	r2, r5
 80031d6:	9806      	ldr	r0, [sp, #24]
 80031d8:	e9c0 2300 	strd	r2, r3, [r0]
 80031dc:	4622      	mov	r2, r4
 80031de:	460b      	mov	r3, r1
 80031e0:	e9c0 2302 	strd	r2, r3, [r0, #8]
 80031e4:	463a      	mov	r2, r7
 80031e6:	4633      	mov	r3, r6
 80031e8:	e9c0 2304 	strd	r2, r3, [r0, #16]
 80031ec:	e7cd      	b.n	800318a <__kernel_rem_pio2+0x4be>
 80031ee:	2000      	movs	r0, #0
 80031f0:	46a0      	mov	r8, r4
 80031f2:	4601      	mov	r1, r0
 80031f4:	ab48      	add	r3, sp, #288	; 0x120
 80031f6:	441d      	add	r5, r3
 80031f8:	f1b8 0f00 	cmp.w	r8, #0
 80031fc:	da3a      	bge.n	8003274 <__kernel_rem_pio2+0x5a8>
 80031fe:	9b00      	ldr	r3, [sp, #0]
 8003200:	2b00      	cmp	r3, #0
 8003202:	d03e      	beq.n	8003282 <__kernel_rem_pio2+0x5b6>
 8003204:	f101 4500 	add.w	r5, r1, #2147483648	; 0x80000000
 8003208:	4602      	mov	r2, r0
 800320a:	462b      	mov	r3, r5
 800320c:	9d06      	ldr	r5, [sp, #24]
 800320e:	2601      	movs	r6, #1
 8003210:	e9c5 2300 	strd	r2, r3, [r5]
 8003214:	460b      	mov	r3, r1
 8003216:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	; 0x120
 800321a:	f7fd f933 	bl	8000484 <__aeabi_dsub>
 800321e:	4684      	mov	ip, r0
 8003220:	460f      	mov	r7, r1
 8003222:	ad48      	add	r5, sp, #288	; 0x120
 8003224:	42b4      	cmp	r4, r6
 8003226:	f105 0508 	add.w	r5, r5, #8
 800322a:	da2c      	bge.n	8003286 <__kernel_rem_pio2+0x5ba>
 800322c:	9b00      	ldr	r3, [sp, #0]
 800322e:	b10b      	cbz	r3, 8003234 <__kernel_rem_pio2+0x568>
 8003230:	f107 4700 	add.w	r7, r7, #2147483648	; 0x80000000
 8003234:	4662      	mov	r2, ip
 8003236:	463b      	mov	r3, r7
 8003238:	9906      	ldr	r1, [sp, #24]
 800323a:	e9c1 2302 	strd	r2, r3, [r1, #8]
 800323e:	e7a4      	b.n	800318a <__kernel_rem_pio2+0x4be>
 8003240:	9ea2      	ldr	r6, [sp, #648]	; 0x288
 8003242:	ab48      	add	r3, sp, #288	; 0x120
 8003244:	4637      	mov	r7, r6
 8003246:	441d      	add	r5, r3
 8003248:	2c00      	cmp	r4, #0
 800324a:	da09      	bge.n	8003260 <__kernel_rem_pio2+0x594>
 800324c:	9b00      	ldr	r3, [sp, #0]
 800324e:	b10b      	cbz	r3, 8003254 <__kernel_rem_pio2+0x588>
 8003250:	f107 4700 	add.w	r7, r7, #2147483648	; 0x80000000
 8003254:	4632      	mov	r2, r6
 8003256:	463b      	mov	r3, r7
 8003258:	9906      	ldr	r1, [sp, #24]
 800325a:	e9c1 2300 	strd	r2, r3, [r1]
 800325e:	e794      	b.n	800318a <__kernel_rem_pio2+0x4be>
 8003260:	4630      	mov	r0, r6
 8003262:	e875 2302 	ldrd	r2, r3, [r5], #-8
 8003266:	4639      	mov	r1, r7
 8003268:	f7fd f90e 	bl	8000488 <__adddf3>
 800326c:	3c01      	subs	r4, #1
 800326e:	4606      	mov	r6, r0
 8003270:	460f      	mov	r7, r1
 8003272:	e7e9      	b.n	8003248 <__kernel_rem_pio2+0x57c>
 8003274:	e875 2302 	ldrd	r2, r3, [r5], #-8
 8003278:	f7fd f906 	bl	8000488 <__adddf3>
 800327c:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 8003280:	e7ba      	b.n	80031f8 <__kernel_rem_pio2+0x52c>
 8003282:	460d      	mov	r5, r1
 8003284:	e7c0      	b.n	8003208 <__kernel_rem_pio2+0x53c>
 8003286:	4660      	mov	r0, ip
 8003288:	e9d5 2300 	ldrd	r2, r3, [r5]
 800328c:	4639      	mov	r1, r7
 800328e:	f7fd f8fb 	bl	8000488 <__adddf3>
 8003292:	3601      	adds	r6, #1
 8003294:	4684      	mov	ip, r0
 8003296:	460f      	mov	r7, r1
 8003298:	e7c4      	b.n	8003224 <__kernel_rem_pio2+0x558>
 800329a:	e9da 6700 	ldrd	r6, r7, [sl]
 800329e:	e95a 8902 	ldrd	r8, r9, [sl, #-8]
 80032a2:	4632      	mov	r2, r6
 80032a4:	463b      	mov	r3, r7
 80032a6:	4640      	mov	r0, r8
 80032a8:	4649      	mov	r1, r9
 80032aa:	f7fd f8ed 	bl	8000488 <__adddf3>
 80032ae:	4602      	mov	r2, r0
 80032b0:	460b      	mov	r3, r1
 80032b2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80032b6:	4640      	mov	r0, r8
 80032b8:	4649      	mov	r1, r9
 80032ba:	f7fd f8e3 	bl	8000484 <__aeabi_dsub>
 80032be:	4632      	mov	r2, r6
 80032c0:	463b      	mov	r3, r7
 80032c2:	f7fd f8e1 	bl	8000488 <__adddf3>
 80032c6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80032ca:	e86a 0102 	strd	r0, r1, [sl], #-8
 80032ce:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 80032d2:	e9ca 2300 	strd	r2, r3, [sl]
 80032d6:	e766      	b.n	80031a6 <__kernel_rem_pio2+0x4da>
 80032d8:	e9da 8900 	ldrd	r8, r9, [sl]
 80032dc:	e95a 6702 	ldrd	r6, r7, [sl, #-8]
 80032e0:	4642      	mov	r2, r8
 80032e2:	464b      	mov	r3, r9
 80032e4:	4630      	mov	r0, r6
 80032e6:	4639      	mov	r1, r7
 80032e8:	f7fd f8ce 	bl	8000488 <__adddf3>
 80032ec:	4602      	mov	r2, r0
 80032ee:	460b      	mov	r3, r1
 80032f0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80032f4:	4630      	mov	r0, r6
 80032f6:	4639      	mov	r1, r7
 80032f8:	f7fd f8c4 	bl	8000484 <__aeabi_dsub>
 80032fc:	4642      	mov	r2, r8
 80032fe:	464b      	mov	r3, r9
 8003300:	f7fd f8c2 	bl	8000488 <__adddf3>
 8003304:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8003308:	e86a 0102 	strd	r0, r1, [sl], #-8
 800330c:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 8003310:	e9ca 2300 	strd	r2, r3, [sl]
 8003314:	e74c      	b.n	80031b0 <__kernel_rem_pio2+0x4e4>
 8003316:	4638      	mov	r0, r7
 8003318:	e875 2302 	ldrd	r2, r3, [r5], #-8
 800331c:	4631      	mov	r1, r6
 800331e:	f7fd f8b3 	bl	8000488 <__adddf3>
 8003322:	3c01      	subs	r4, #1
 8003324:	4607      	mov	r7, r0
 8003326:	460e      	mov	r6, r1
 8003328:	e748      	b.n	80031bc <__kernel_rem_pio2+0x4f0>
 800332a:	9b06      	ldr	r3, [sp, #24]
 800332c:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 8003330:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
 8003334:	f106 4600 	add.w	r6, r6, #2147483648	; 0x80000000
 8003338:	e9c3 0401 	strd	r0, r4, [r3, #4]
 800333c:	e9c3 1703 	strd	r1, r7, [r3, #12]
 8003340:	601d      	str	r5, [r3, #0]
 8003342:	615e      	str	r6, [r3, #20]
 8003344:	e721      	b.n	800318a <__kernel_rem_pio2+0x4be>
 8003346:	bf00      	nop
 8003348:	41700000 	.word	0x41700000
 800334c:	3e700000 	.word	0x3e700000

08003350 <__kernel_sin>:
 8003350:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003354:	b086      	sub	sp, #24
 8003356:	e9cd 2300 	strd	r2, r3, [sp]
 800335a:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800335e:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 8003362:	4682      	mov	sl, r0
 8003364:	460c      	mov	r4, r1
 8003366:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 8003368:	da03      	bge.n	8003372 <__kernel_sin+0x22>
 800336a:	f7fd facb 	bl	8000904 <__aeabi_d2iz>
 800336e:	2800      	cmp	r0, #0
 8003370:	d050      	beq.n	8003414 <__kernel_sin+0xc4>
 8003372:	4652      	mov	r2, sl
 8003374:	4623      	mov	r3, r4
 8003376:	4650      	mov	r0, sl
 8003378:	4621      	mov	r1, r4
 800337a:	f7fc ff55 	bl	8000228 <__aeabi_dmul>
 800337e:	4606      	mov	r6, r0
 8003380:	460f      	mov	r7, r1
 8003382:	4602      	mov	r2, r0
 8003384:	460b      	mov	r3, r1
 8003386:	4650      	mov	r0, sl
 8003388:	4621      	mov	r1, r4
 800338a:	f7fc ff4d 	bl	8000228 <__aeabi_dmul>
 800338e:	a33e      	add	r3, pc, #248	; (adr r3, 8003488 <__kernel_sin+0x138>)
 8003390:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003394:	4680      	mov	r8, r0
 8003396:	4689      	mov	r9, r1
 8003398:	4630      	mov	r0, r6
 800339a:	4639      	mov	r1, r7
 800339c:	f7fc ff44 	bl	8000228 <__aeabi_dmul>
 80033a0:	a33b      	add	r3, pc, #236	; (adr r3, 8003490 <__kernel_sin+0x140>)
 80033a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80033a6:	f7fd f86d 	bl	8000484 <__aeabi_dsub>
 80033aa:	4632      	mov	r2, r6
 80033ac:	463b      	mov	r3, r7
 80033ae:	f7fc ff3b 	bl	8000228 <__aeabi_dmul>
 80033b2:	a339      	add	r3, pc, #228	; (adr r3, 8003498 <__kernel_sin+0x148>)
 80033b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80033b8:	f7fd f866 	bl	8000488 <__adddf3>
 80033bc:	4632      	mov	r2, r6
 80033be:	463b      	mov	r3, r7
 80033c0:	f7fc ff32 	bl	8000228 <__aeabi_dmul>
 80033c4:	a336      	add	r3, pc, #216	; (adr r3, 80034a0 <__kernel_sin+0x150>)
 80033c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80033ca:	f7fd f85b 	bl	8000484 <__aeabi_dsub>
 80033ce:	4632      	mov	r2, r6
 80033d0:	463b      	mov	r3, r7
 80033d2:	f7fc ff29 	bl	8000228 <__aeabi_dmul>
 80033d6:	a334      	add	r3, pc, #208	; (adr r3, 80034a8 <__kernel_sin+0x158>)
 80033d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80033dc:	f7fd f854 	bl	8000488 <__adddf3>
 80033e0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80033e4:	b9dd      	cbnz	r5, 800341e <__kernel_sin+0xce>
 80033e6:	4602      	mov	r2, r0
 80033e8:	460b      	mov	r3, r1
 80033ea:	4630      	mov	r0, r6
 80033ec:	4639      	mov	r1, r7
 80033ee:	f7fc ff1b 	bl	8000228 <__aeabi_dmul>
 80033f2:	a32f      	add	r3, pc, #188	; (adr r3, 80034b0 <__kernel_sin+0x160>)
 80033f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80033f8:	f7fd f844 	bl	8000484 <__aeabi_dsub>
 80033fc:	4642      	mov	r2, r8
 80033fe:	464b      	mov	r3, r9
 8003400:	f7fc ff12 	bl	8000228 <__aeabi_dmul>
 8003404:	4602      	mov	r2, r0
 8003406:	460b      	mov	r3, r1
 8003408:	4650      	mov	r0, sl
 800340a:	4621      	mov	r1, r4
 800340c:	f7fd f83c 	bl	8000488 <__adddf3>
 8003410:	4682      	mov	sl, r0
 8003412:	460c      	mov	r4, r1
 8003414:	4650      	mov	r0, sl
 8003416:	4621      	mov	r1, r4
 8003418:	b006      	add	sp, #24
 800341a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800341e:	2200      	movs	r2, #0
 8003420:	e9dd 0100 	ldrd	r0, r1, [sp]
 8003424:	4b24      	ldr	r3, [pc, #144]	; (80034b8 <__kernel_sin+0x168>)
 8003426:	f7fc feff 	bl	8000228 <__aeabi_dmul>
 800342a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800342e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8003432:	4640      	mov	r0, r8
 8003434:	4649      	mov	r1, r9
 8003436:	f7fc fef7 	bl	8000228 <__aeabi_dmul>
 800343a:	4602      	mov	r2, r0
 800343c:	460b      	mov	r3, r1
 800343e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8003442:	f7fd f81f 	bl	8000484 <__aeabi_dsub>
 8003446:	4632      	mov	r2, r6
 8003448:	463b      	mov	r3, r7
 800344a:	f7fc feed 	bl	8000228 <__aeabi_dmul>
 800344e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8003452:	f7fd f817 	bl	8000484 <__aeabi_dsub>
 8003456:	a316      	add	r3, pc, #88	; (adr r3, 80034b0 <__kernel_sin+0x160>)
 8003458:	e9d3 2300 	ldrd	r2, r3, [r3]
 800345c:	4606      	mov	r6, r0
 800345e:	460f      	mov	r7, r1
 8003460:	4640      	mov	r0, r8
 8003462:	4649      	mov	r1, r9
 8003464:	f7fc fee0 	bl	8000228 <__aeabi_dmul>
 8003468:	4602      	mov	r2, r0
 800346a:	460b      	mov	r3, r1
 800346c:	4630      	mov	r0, r6
 800346e:	4639      	mov	r1, r7
 8003470:	f7fd f80a 	bl	8000488 <__adddf3>
 8003474:	4602      	mov	r2, r0
 8003476:	460b      	mov	r3, r1
 8003478:	4650      	mov	r0, sl
 800347a:	4621      	mov	r1, r4
 800347c:	f7fd f802 	bl	8000484 <__aeabi_dsub>
 8003480:	e7c6      	b.n	8003410 <__kernel_sin+0xc0>
 8003482:	bf00      	nop
 8003484:	f3af 8000 	nop.w
 8003488:	5acfd57c 	.word	0x5acfd57c
 800348c:	3de5d93a 	.word	0x3de5d93a
 8003490:	8a2b9ceb 	.word	0x8a2b9ceb
 8003494:	3e5ae5e6 	.word	0x3e5ae5e6
 8003498:	57b1fe7d 	.word	0x57b1fe7d
 800349c:	3ec71de3 	.word	0x3ec71de3
 80034a0:	19c161d5 	.word	0x19c161d5
 80034a4:	3f2a01a0 	.word	0x3f2a01a0
 80034a8:	1110f8a6 	.word	0x1110f8a6
 80034ac:	3f811111 	.word	0x3f811111
 80034b0:	55555549 	.word	0x55555549
 80034b4:	3fc55555 	.word	0x3fc55555
 80034b8:	3fe00000 	.word	0x3fe00000

080034bc <fabs>:
 80034bc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80034c0:	4770      	bx	lr
 80034c2:	0000      	movs	r0, r0
 80034c4:	0000      	movs	r0, r0
	...

080034c8 <floor>:
 80034c8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80034cc:	f3c1 580a 	ubfx	r8, r1, #20, #11
 80034d0:	f2a8 36ff 	subw	r6, r8, #1023	; 0x3ff
 80034d4:	2e13      	cmp	r6, #19
 80034d6:	4602      	mov	r2, r0
 80034d8:	460b      	mov	r3, r1
 80034da:	4607      	mov	r7, r0
 80034dc:	460c      	mov	r4, r1
 80034de:	4605      	mov	r5, r0
 80034e0:	dc33      	bgt.n	800354a <floor+0x82>
 80034e2:	2e00      	cmp	r6, #0
 80034e4:	da14      	bge.n	8003510 <floor+0x48>
 80034e6:	a334      	add	r3, pc, #208	; (adr r3, 80035b8 <floor+0xf0>)
 80034e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80034ec:	f7fc ffcc 	bl	8000488 <__adddf3>
 80034f0:	2200      	movs	r2, #0
 80034f2:	2300      	movs	r3, #0
 80034f4:	f7fd f9fc 	bl	80008f0 <__aeabi_dcmpgt>
 80034f8:	b138      	cbz	r0, 800350a <floor+0x42>
 80034fa:	2c00      	cmp	r4, #0
 80034fc:	da58      	bge.n	80035b0 <floor+0xe8>
 80034fe:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 8003502:	431d      	orrs	r5, r3
 8003504:	d001      	beq.n	800350a <floor+0x42>
 8003506:	2500      	movs	r5, #0
 8003508:	4c2d      	ldr	r4, [pc, #180]	; (80035c0 <floor+0xf8>)
 800350a:	4623      	mov	r3, r4
 800350c:	462f      	mov	r7, r5
 800350e:	e025      	b.n	800355c <floor+0x94>
 8003510:	4a2c      	ldr	r2, [pc, #176]	; (80035c4 <floor+0xfc>)
 8003512:	fa42 f806 	asr.w	r8, r2, r6
 8003516:	ea01 0208 	and.w	r2, r1, r8
 800351a:	4302      	orrs	r2, r0
 800351c:	d01e      	beq.n	800355c <floor+0x94>
 800351e:	a326      	add	r3, pc, #152	; (adr r3, 80035b8 <floor+0xf0>)
 8003520:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003524:	f7fc ffb0 	bl	8000488 <__adddf3>
 8003528:	2200      	movs	r2, #0
 800352a:	2300      	movs	r3, #0
 800352c:	f7fd f9e0 	bl	80008f0 <__aeabi_dcmpgt>
 8003530:	2800      	cmp	r0, #0
 8003532:	d0ea      	beq.n	800350a <floor+0x42>
 8003534:	2c00      	cmp	r4, #0
 8003536:	bfbe      	ittt	lt
 8003538:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 800353c:	fa43 f606 	asrlt.w	r6, r3, r6
 8003540:	19a4      	addlt	r4, r4, r6
 8003542:	2500      	movs	r5, #0
 8003544:	ea24 0408 	bic.w	r4, r4, r8
 8003548:	e7df      	b.n	800350a <floor+0x42>
 800354a:	2e33      	cmp	r6, #51	; 0x33
 800354c:	dd0a      	ble.n	8003564 <floor+0x9c>
 800354e:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 8003552:	d103      	bne.n	800355c <floor+0x94>
 8003554:	f7fc ff98 	bl	8000488 <__adddf3>
 8003558:	4607      	mov	r7, r0
 800355a:	460b      	mov	r3, r1
 800355c:	4638      	mov	r0, r7
 800355e:	4619      	mov	r1, r3
 8003560:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003564:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003568:	f2a8 4813 	subw	r8, r8, #1043	; 0x413
 800356c:	fa22 f808 	lsr.w	r8, r2, r8
 8003570:	ea18 0f00 	tst.w	r8, r0
 8003574:	d0f2      	beq.n	800355c <floor+0x94>
 8003576:	a310      	add	r3, pc, #64	; (adr r3, 80035b8 <floor+0xf0>)
 8003578:	e9d3 2300 	ldrd	r2, r3, [r3]
 800357c:	f7fc ff84 	bl	8000488 <__adddf3>
 8003580:	2200      	movs	r2, #0
 8003582:	2300      	movs	r3, #0
 8003584:	f7fd f9b4 	bl	80008f0 <__aeabi_dcmpgt>
 8003588:	2800      	cmp	r0, #0
 800358a:	d0be      	beq.n	800350a <floor+0x42>
 800358c:	2c00      	cmp	r4, #0
 800358e:	da02      	bge.n	8003596 <floor+0xce>
 8003590:	2e14      	cmp	r6, #20
 8003592:	d103      	bne.n	800359c <floor+0xd4>
 8003594:	3401      	adds	r4, #1
 8003596:	ea25 0508 	bic.w	r5, r5, r8
 800359a:	e7b6      	b.n	800350a <floor+0x42>
 800359c:	2301      	movs	r3, #1
 800359e:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 80035a2:	fa03 f606 	lsl.w	r6, r3, r6
 80035a6:	4435      	add	r5, r6
 80035a8:	42bd      	cmp	r5, r7
 80035aa:	bf38      	it	cc
 80035ac:	18e4      	addcc	r4, r4, r3
 80035ae:	e7f2      	b.n	8003596 <floor+0xce>
 80035b0:	2500      	movs	r5, #0
 80035b2:	462c      	mov	r4, r5
 80035b4:	e7a9      	b.n	800350a <floor+0x42>
 80035b6:	bf00      	nop
 80035b8:	8800759c 	.word	0x8800759c
 80035bc:	7e37e43c 	.word	0x7e37e43c
 80035c0:	bff00000 	.word	0xbff00000
 80035c4:	000fffff 	.word	0x000fffff

080035c8 <scalbn>:
 80035c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80035ca:	f3c1 560a 	ubfx	r6, r1, #20, #11
 80035ce:	4604      	mov	r4, r0
 80035d0:	460d      	mov	r5, r1
 80035d2:	4617      	mov	r7, r2
 80035d4:	460b      	mov	r3, r1
 80035d6:	b996      	cbnz	r6, 80035fe <scalbn+0x36>
 80035d8:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80035dc:	4303      	orrs	r3, r0
 80035de:	d039      	beq.n	8003654 <scalbn+0x8c>
 80035e0:	4b33      	ldr	r3, [pc, #204]	; (80036b0 <scalbn+0xe8>)
 80035e2:	2200      	movs	r2, #0
 80035e4:	f7fc fe20 	bl	8000228 <__aeabi_dmul>
 80035e8:	4b32      	ldr	r3, [pc, #200]	; (80036b4 <scalbn+0xec>)
 80035ea:	4604      	mov	r4, r0
 80035ec:	429f      	cmp	r7, r3
 80035ee:	460d      	mov	r5, r1
 80035f0:	da0f      	bge.n	8003612 <scalbn+0x4a>
 80035f2:	a32b      	add	r3, pc, #172	; (adr r3, 80036a0 <scalbn+0xd8>)
 80035f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80035f8:	f7fc fe16 	bl	8000228 <__aeabi_dmul>
 80035fc:	e006      	b.n	800360c <scalbn+0x44>
 80035fe:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8003602:	4296      	cmp	r6, r2
 8003604:	d10a      	bne.n	800361c <scalbn+0x54>
 8003606:	4602      	mov	r2, r0
 8003608:	f7fc ff3e 	bl	8000488 <__adddf3>
 800360c:	4604      	mov	r4, r0
 800360e:	460d      	mov	r5, r1
 8003610:	e020      	b.n	8003654 <scalbn+0x8c>
 8003612:	460b      	mov	r3, r1
 8003614:	f3c1 510a 	ubfx	r1, r1, #20, #11
 8003618:	f1a1 0636 	sub.w	r6, r1, #54	; 0x36
 800361c:	f240 72fe 	movw	r2, #2046	; 0x7fe
 8003620:	19b9      	adds	r1, r7, r6
 8003622:	4291      	cmp	r1, r2
 8003624:	dd0e      	ble.n	8003644 <scalbn+0x7c>
 8003626:	f005 4400 	and.w	r4, r5, #2147483648	; 0x80000000
 800362a:	f044 41fc 	orr.w	r1, r4, #2113929216	; 0x7e000000
 800362e:	f441 115f 	orr.w	r1, r1, #3653632	; 0x37c000
 8003632:	f441 5110 	orr.w	r1, r1, #9216	; 0x2400
 8003636:	4820      	ldr	r0, [pc, #128]	; (80036b8 <scalbn+0xf0>)
 8003638:	f041 013c 	orr.w	r1, r1, #60	; 0x3c
 800363c:	a31a      	add	r3, pc, #104	; (adr r3, 80036a8 <scalbn+0xe0>)
 800363e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003642:	e7d9      	b.n	80035f8 <scalbn+0x30>
 8003644:	2900      	cmp	r1, #0
 8003646:	dd08      	ble.n	800365a <scalbn+0x92>
 8003648:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800364c:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8003650:	ea43 5501 	orr.w	r5, r3, r1, lsl #20
 8003654:	4620      	mov	r0, r4
 8003656:	4629      	mov	r1, r5
 8003658:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800365a:	f111 0f35 	cmn.w	r1, #53	; 0x35
 800365e:	da12      	bge.n	8003686 <scalbn+0xbe>
 8003660:	f24c 3350 	movw	r3, #50000	; 0xc350
 8003664:	429f      	cmp	r7, r3
 8003666:	ea4f 73d5 	mov.w	r3, r5, lsr #31
 800366a:	ea4f 74c3 	mov.w	r4, r3, lsl #31
 800366e:	dcdc      	bgt.n	800362a <scalbn+0x62>
 8003670:	a30b      	add	r3, pc, #44	; (adr r3, 80036a0 <scalbn+0xd8>)
 8003672:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003676:	f044 71d2 	orr.w	r1, r4, #27525120	; 0x1a40000
 800367a:	f441 31b7 	orr.w	r1, r1, #93696	; 0x16e00
 800367e:	480f      	ldr	r0, [pc, #60]	; (80036bc <scalbn+0xf4>)
 8003680:	f041 011f 	orr.w	r1, r1, #31
 8003684:	e7b8      	b.n	80035f8 <scalbn+0x30>
 8003686:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800368a:	3136      	adds	r1, #54	; 0x36
 800368c:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8003690:	ea43 5501 	orr.w	r5, r3, r1, lsl #20
 8003694:	4620      	mov	r0, r4
 8003696:	4629      	mov	r1, r5
 8003698:	2200      	movs	r2, #0
 800369a:	4b09      	ldr	r3, [pc, #36]	; (80036c0 <scalbn+0xf8>)
 800369c:	e7ac      	b.n	80035f8 <scalbn+0x30>
 800369e:	bf00      	nop
 80036a0:	c2f8f359 	.word	0xc2f8f359
 80036a4:	01a56e1f 	.word	0x01a56e1f
 80036a8:	8800759c 	.word	0x8800759c
 80036ac:	7e37e43c 	.word	0x7e37e43c
 80036b0:	43500000 	.word	0x43500000
 80036b4:	ffff3cb0 	.word	0xffff3cb0
 80036b8:	8800759c 	.word	0x8800759c
 80036bc:	c2f8f359 	.word	0xc2f8f359
 80036c0:	3c900000 	.word	0x3c900000

080036c4 <_init>:
 80036c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80036c6:	bf00      	nop
 80036c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80036ca:	bc08      	pop	{r3}
 80036cc:	469e      	mov	lr, r3
 80036ce:	4770      	bx	lr

080036d0 <_fini>:
 80036d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80036d2:	bf00      	nop
 80036d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80036d6:	bc08      	pop	{r3}
 80036d8:	469e      	mov	lr, r3
 80036da:	4770      	bx	lr
