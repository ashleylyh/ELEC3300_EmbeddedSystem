
lab5.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003608  080001e4  080001e4  000101e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000694  080037ec  080037ec  000137ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003e80  08003e80  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  08003e80  08003e80  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003e80  08003e80  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003e80  08003e80  00013e80  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003e84  08003e84  00013e84  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08003e88  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000e0  20000070  08003ef8  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000150  08003ef8  00020150  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   00007d56  00000000  00000000  00020099  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001bdc  00000000  00000000  00027def  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000007f8  00000000  00000000  000299d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000700  00000000  00000000  0002a1c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001a2c7  00000000  00000000  0002a8c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00009d47  00000000  00000000  00044b8f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000979bf  00000000  00000000  0004e8d6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000e6295  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000226c  00000000  00000000  000e62e8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e4 <__do_global_dtors_aux>:
 80001e4:	b510      	push	{r4, lr}
 80001e6:	4c05      	ldr	r4, [pc, #20]	; (80001fc <__do_global_dtors_aux+0x18>)
 80001e8:	7823      	ldrb	r3, [r4, #0]
 80001ea:	b933      	cbnz	r3, 80001fa <__do_global_dtors_aux+0x16>
 80001ec:	4b04      	ldr	r3, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x1c>)
 80001ee:	b113      	cbz	r3, 80001f6 <__do_global_dtors_aux+0x12>
 80001f0:	4804      	ldr	r0, [pc, #16]	; (8000204 <__do_global_dtors_aux+0x20>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	2301      	movs	r3, #1
 80001f8:	7023      	strb	r3, [r4, #0]
 80001fa:	bd10      	pop	{r4, pc}
 80001fc:	20000070 	.word	0x20000070
 8000200:	00000000 	.word	0x00000000
 8000204:	080037d4 	.word	0x080037d4

08000208 <frame_dummy>:
 8000208:	b508      	push	{r3, lr}
 800020a:	4b03      	ldr	r3, [pc, #12]	; (8000218 <frame_dummy+0x10>)
 800020c:	b11b      	cbz	r3, 8000216 <frame_dummy+0xe>
 800020e:	4903      	ldr	r1, [pc, #12]	; (800021c <frame_dummy+0x14>)
 8000210:	4803      	ldr	r0, [pc, #12]	; (8000220 <frame_dummy+0x18>)
 8000212:	f3af 8000 	nop.w
 8000216:	bd08      	pop	{r3, pc}
 8000218:	00000000 	.word	0x00000000
 800021c:	20000074 	.word	0x20000074
 8000220:	080037d4 	.word	0x080037d4

08000224 <Delay>:
void		LCD_REG_Config          ( void );
void		LCD_FillColor           ( uint32_t ulAmout_Point, uint16_t usColor );
uint16_t	LCD_Read_PixelData      ( void );


void Delay ( __IO uint32_t nCount ){  for ( ; nCount != 0; nCount -- );}
 8000224:	b480      	push	{r7}
 8000226:	b083      	sub	sp, #12
 8000228:	af00      	add	r7, sp, #0
 800022a:	6078      	str	r0, [r7, #4]
 800022c:	e002      	b.n	8000234 <Delay+0x10>
 800022e:	687b      	ldr	r3, [r7, #4]
 8000230:	3b01      	subs	r3, #1
 8000232:	607b      	str	r3, [r7, #4]
 8000234:	687b      	ldr	r3, [r7, #4]
 8000236:	2b00      	cmp	r3, #0
 8000238:	d1f9      	bne.n	800022e <Delay+0xa>
 800023a:	bf00      	nop
 800023c:	bf00      	nop
 800023e:	370c      	adds	r7, #12
 8000240:	46bd      	mov	sp, r7
 8000242:	bc80      	pop	{r7}
 8000244:	4770      	bx	lr

08000246 <LCD_INIT>:

void LCD_INIT ( void )
{
 8000246:	b580      	push	{r7, lr}
 8000248:	b082      	sub	sp, #8
 800024a:	af02      	add	r7, sp, #8
	LCD_BackLed_Control(ENABLE);      
 800024c:	2001      	movs	r0, #1
 800024e:	f000 f829 	bl	80002a4 <LCD_BackLed_Control>
	LCD_Rst();
 8000252:	f000 f80f 	bl	8000274 <LCD_Rst>
	LCD_REG_Config();
 8000256:	f000 f85f 	bl	8000318 <LCD_REG_Config>
	LCD_Clear (0, 0, 240, 320, BACKGROUND);
 800025a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800025e:	9300      	str	r3, [sp, #0]
 8000260:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8000264:	22f0      	movs	r2, #240	; 0xf0
 8000266:	2100      	movs	r1, #0
 8000268:	2000      	movs	r0, #0
 800026a:	f000 f9e6 	bl	800063a <LCD_Clear>
}
 800026e:	bf00      	nop
 8000270:	46bd      	mov	sp, r7
 8000272:	bd80      	pop	{r7, pc}

08000274 <LCD_Rst>:



void LCD_Rst ( void )
{			
 8000274:	b580      	push	{r7, lr}
 8000276:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LCD_RST_PORT,LCD_RST_PIN,GPIO_PIN_RESET);
 8000278:	2200      	movs	r2, #0
 800027a:	2102      	movs	r1, #2
 800027c:	4807      	ldr	r0, [pc, #28]	; (800029c <LCD_Rst+0x28>)
 800027e:	f001 ff20 	bl	80020c2 <HAL_GPIO_WritePin>
	Delay ( 0xAFFf<<2 ); 					   
 8000282:	4807      	ldr	r0, [pc, #28]	; (80002a0 <LCD_Rst+0x2c>)
 8000284:	f7ff ffce 	bl	8000224 <Delay>
	HAL_GPIO_WritePin(LCD_RST_PORT,LCD_RST_PIN,GPIO_PIN_SET);
 8000288:	2201      	movs	r2, #1
 800028a:	2102      	movs	r1, #2
 800028c:	4803      	ldr	r0, [pc, #12]	; (800029c <LCD_Rst+0x28>)
 800028e:	f001 ff18 	bl	80020c2 <HAL_GPIO_WritePin>
	Delay ( 0xAFFf<<2 ); 	
 8000292:	4803      	ldr	r0, [pc, #12]	; (80002a0 <LCD_Rst+0x2c>)
 8000294:	f7ff ffc6 	bl	8000224 <Delay>
}
 8000298:	bf00      	nop
 800029a:	bd80      	pop	{r7, pc}
 800029c:	40011800 	.word	0x40011800
 80002a0:	0002bffc 	.word	0x0002bffc

080002a4 <LCD_BackLed_Control>:


void LCD_BackLed_Control ( FunctionalState enumState )
{
 80002a4:	b580      	push	{r7, lr}
 80002a6:	b082      	sub	sp, #8
 80002a8:	af00      	add	r7, sp, #0
 80002aa:	4603      	mov	r3, r0
 80002ac:	71fb      	strb	r3, [r7, #7]
	if ( enumState )
 80002ae:	79fb      	ldrb	r3, [r7, #7]
 80002b0:	2b00      	cmp	r3, #0
 80002b2:	d006      	beq.n	80002c2 <LCD_BackLed_Control+0x1e>
		HAL_GPIO_WritePin(LCD_BK_PORT,LCD_BK_PIN,GPIO_PIN_RESET);	
 80002b4:	2200      	movs	r2, #0
 80002b6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80002ba:	4807      	ldr	r0, [pc, #28]	; (80002d8 <LCD_BackLed_Control+0x34>)
 80002bc:	f001 ff01 	bl	80020c2 <HAL_GPIO_WritePin>
	else
		HAL_GPIO_WritePin(LCD_BK_PORT,LCD_BK_PIN,GPIO_PIN_SET);			
}
 80002c0:	e005      	b.n	80002ce <LCD_BackLed_Control+0x2a>
		HAL_GPIO_WritePin(LCD_BK_PORT,LCD_BK_PIN,GPIO_PIN_SET);			
 80002c2:	2201      	movs	r2, #1
 80002c4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80002c8:	4803      	ldr	r0, [pc, #12]	; (80002d8 <LCD_BackLed_Control+0x34>)
 80002ca:	f001 fefa 	bl	80020c2 <HAL_GPIO_WritePin>
}
 80002ce:	bf00      	nop
 80002d0:	3708      	adds	r7, #8
 80002d2:	46bd      	mov	sp, r7
 80002d4:	bd80      	pop	{r7, pc}
 80002d6:	bf00      	nop
 80002d8:	40011400 	.word	0x40011400

080002dc <LCD_Write_Cmd>:




void LCD_Write_Cmd ( uint16_t usCmd )
{
 80002dc:	b480      	push	{r7}
 80002de:	b083      	sub	sp, #12
 80002e0:	af00      	add	r7, sp, #0
 80002e2:	4603      	mov	r3, r0
 80002e4:	80fb      	strh	r3, [r7, #6]
	* ( __IO uint16_t * ) ( FSMC_Addr_LCD_CMD ) = usCmd;
 80002e6:	f04f 42c0 	mov.w	r2, #1610612736	; 0x60000000
 80002ea:	88fb      	ldrh	r3, [r7, #6]
 80002ec:	8013      	strh	r3, [r2, #0]
}
 80002ee:	bf00      	nop
 80002f0:	370c      	adds	r7, #12
 80002f2:	46bd      	mov	sp, r7
 80002f4:	bc80      	pop	{r7}
 80002f6:	4770      	bx	lr

080002f8 <LCD_Write_Data>:




void LCD_Write_Data ( uint16_t usData )
{
 80002f8:	b480      	push	{r7}
 80002fa:	b083      	sub	sp, #12
 80002fc:	af00      	add	r7, sp, #0
 80002fe:	4603      	mov	r3, r0
 8000300:	80fb      	strh	r3, [r7, #6]
	* ( __IO uint16_t * ) ( FSMC_Addr_LCD_DATA ) = usData;
 8000302:	4a04      	ldr	r2, [pc, #16]	; (8000314 <LCD_Write_Data+0x1c>)
 8000304:	88fb      	ldrh	r3, [r7, #6]
 8000306:	8013      	strh	r3, [r2, #0]
}
 8000308:	bf00      	nop
 800030a:	370c      	adds	r7, #12
 800030c:	46bd      	mov	sp, r7
 800030e:	bc80      	pop	{r7}
 8000310:	4770      	bx	lr
 8000312:	bf00      	nop
 8000314:	60020000 	.word	0x60020000

08000318 <LCD_REG_Config>:
	return ( * ( __IO uint16_t * ) ( FSMC_Addr_LCD_DATA ) );	
}


void LCD_REG_Config ( void )
{
 8000318:	b580      	push	{r7, lr}
 800031a:	af00      	add	r7, sp, #0
	/*  Power control B (CFh)  */
	DEBUG_DELAY  ();
	LCD_Write_Cmd ( 0xCF  );
 800031c:	20cf      	movs	r0, #207	; 0xcf
 800031e:	f7ff ffdd 	bl	80002dc <LCD_Write_Cmd>
	LCD_Write_Data ( 0x00  );
 8000322:	2000      	movs	r0, #0
 8000324:	f7ff ffe8 	bl	80002f8 <LCD_Write_Data>
	LCD_Write_Data ( 0x81  );
 8000328:	2081      	movs	r0, #129	; 0x81
 800032a:	f7ff ffe5 	bl	80002f8 <LCD_Write_Data>
	LCD_Write_Data ( 0x30  );
 800032e:	2030      	movs	r0, #48	; 0x30
 8000330:	f7ff ffe2 	bl	80002f8 <LCD_Write_Data>
	
	/*  Power on sequence control (EDh) */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( 0xED );
 8000334:	20ed      	movs	r0, #237	; 0xed
 8000336:	f7ff ffd1 	bl	80002dc <LCD_Write_Cmd>
	LCD_Write_Data ( 0x64 );
 800033a:	2064      	movs	r0, #100	; 0x64
 800033c:	f7ff ffdc 	bl	80002f8 <LCD_Write_Data>
	LCD_Write_Data ( 0x03 );
 8000340:	2003      	movs	r0, #3
 8000342:	f7ff ffd9 	bl	80002f8 <LCD_Write_Data>
	LCD_Write_Data ( 0x12 );
 8000346:	2012      	movs	r0, #18
 8000348:	f7ff ffd6 	bl	80002f8 <LCD_Write_Data>
	LCD_Write_Data ( 0x81 );
 800034c:	2081      	movs	r0, #129	; 0x81
 800034e:	f7ff ffd3 	bl	80002f8 <LCD_Write_Data>
	
	/*  Driver timing control A (E8h) */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( 0xE8 );
 8000352:	20e8      	movs	r0, #232	; 0xe8
 8000354:	f7ff ffc2 	bl	80002dc <LCD_Write_Cmd>
	LCD_Write_Data ( 0x85 );
 8000358:	2085      	movs	r0, #133	; 0x85
 800035a:	f7ff ffcd 	bl	80002f8 <LCD_Write_Data>
	LCD_Write_Data ( 0x10 );
 800035e:	2010      	movs	r0, #16
 8000360:	f7ff ffca 	bl	80002f8 <LCD_Write_Data>
	LCD_Write_Data ( 0x78 );
 8000364:	2078      	movs	r0, #120	; 0x78
 8000366:	f7ff ffc7 	bl	80002f8 <LCD_Write_Data>
	
	/*  Power control A (CBh) */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( 0xCB );
 800036a:	20cb      	movs	r0, #203	; 0xcb
 800036c:	f7ff ffb6 	bl	80002dc <LCD_Write_Cmd>
	LCD_Write_Data ( 0x39 );
 8000370:	2039      	movs	r0, #57	; 0x39
 8000372:	f7ff ffc1 	bl	80002f8 <LCD_Write_Data>
	LCD_Write_Data ( 0x2C );
 8000376:	202c      	movs	r0, #44	; 0x2c
 8000378:	f7ff ffbe 	bl	80002f8 <LCD_Write_Data>
	LCD_Write_Data ( 0x00 );
 800037c:	2000      	movs	r0, #0
 800037e:	f7ff ffbb 	bl	80002f8 <LCD_Write_Data>
	LCD_Write_Data ( 0x34 );
 8000382:	2034      	movs	r0, #52	; 0x34
 8000384:	f7ff ffb8 	bl	80002f8 <LCD_Write_Data>
	LCD_Write_Data ( 0x02 );
 8000388:	2002      	movs	r0, #2
 800038a:	f7ff ffb5 	bl	80002f8 <LCD_Write_Data>
	
	/* Pump ratio control (F7h) */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( 0xF7 );
 800038e:	20f7      	movs	r0, #247	; 0xf7
 8000390:	f7ff ffa4 	bl	80002dc <LCD_Write_Cmd>
	LCD_Write_Data ( 0x20 );
 8000394:	2020      	movs	r0, #32
 8000396:	f7ff ffaf 	bl	80002f8 <LCD_Write_Data>
	
	/* Driver timing control B */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( 0xEA );
 800039a:	20ea      	movs	r0, #234	; 0xea
 800039c:	f7ff ff9e 	bl	80002dc <LCD_Write_Cmd>
	LCD_Write_Data ( 0x00 );
 80003a0:	2000      	movs	r0, #0
 80003a2:	f7ff ffa9 	bl	80002f8 <LCD_Write_Data>
	LCD_Write_Data ( 0x00 );
 80003a6:	2000      	movs	r0, #0
 80003a8:	f7ff ffa6 	bl	80002f8 <LCD_Write_Data>
	
	/* Frame Rate Control (In Normal Mode/Full Colors) (B1h) */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( 0xB1 );
 80003ac:	20b1      	movs	r0, #177	; 0xb1
 80003ae:	f7ff ff95 	bl	80002dc <LCD_Write_Cmd>
	LCD_Write_Data ( 0x00 );
 80003b2:	2000      	movs	r0, #0
 80003b4:	f7ff ffa0 	bl	80002f8 <LCD_Write_Data>
	LCD_Write_Data ( 0x1B );
 80003b8:	201b      	movs	r0, #27
 80003ba:	f7ff ff9d 	bl	80002f8 <LCD_Write_Data>
	
	/*  Display Function Control (B6h) */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( 0xB6 );
 80003be:	20b6      	movs	r0, #182	; 0xb6
 80003c0:	f7ff ff8c 	bl	80002dc <LCD_Write_Cmd>
	LCD_Write_Data ( 0x0A );
 80003c4:	200a      	movs	r0, #10
 80003c6:	f7ff ff97 	bl	80002f8 <LCD_Write_Data>
	LCD_Write_Data ( 0xA2 );
 80003ca:	20a2      	movs	r0, #162	; 0xa2
 80003cc:	f7ff ff94 	bl	80002f8 <LCD_Write_Data>
	
	/* Power Control 1 (C0h) */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( 0xC0 );
 80003d0:	20c0      	movs	r0, #192	; 0xc0
 80003d2:	f7ff ff83 	bl	80002dc <LCD_Write_Cmd>
	LCD_Write_Data ( 0x35 );
 80003d6:	2035      	movs	r0, #53	; 0x35
 80003d8:	f7ff ff8e 	bl	80002f8 <LCD_Write_Data>
	
	/* Power Control 2 (C1h) */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( 0xC1 );
 80003dc:	20c1      	movs	r0, #193	; 0xc1
 80003de:	f7ff ff7d 	bl	80002dc <LCD_Write_Cmd>
	LCD_Write_Data ( 0x11 );
 80003e2:	2011      	movs	r0, #17
 80003e4:	f7ff ff88 	bl	80002f8 <LCD_Write_Data>
	
	/* VCOM Control 1 (C5h) */
	LCD_Write_Cmd ( 0xC5 );
 80003e8:	20c5      	movs	r0, #197	; 0xc5
 80003ea:	f7ff ff77 	bl	80002dc <LCD_Write_Cmd>
	LCD_Write_Data ( 0x45 );
 80003ee:	2045      	movs	r0, #69	; 0x45
 80003f0:	f7ff ff82 	bl	80002f8 <LCD_Write_Data>
	LCD_Write_Data ( 0x45 );
 80003f4:	2045      	movs	r0, #69	; 0x45
 80003f6:	f7ff ff7f 	bl	80002f8 <LCD_Write_Data>
	
	/*  VCOM Control 2 (C7h)  */
	LCD_Write_Cmd ( 0xC7 );
 80003fa:	20c7      	movs	r0, #199	; 0xc7
 80003fc:	f7ff ff6e 	bl	80002dc <LCD_Write_Cmd>
	LCD_Write_Data ( 0xA2 );
 8000400:	20a2      	movs	r0, #162	; 0xa2
 8000402:	f7ff ff79 	bl	80002f8 <LCD_Write_Data>
	
	/* Enable 3G (F2h) */
	LCD_Write_Cmd ( 0xF2 );
 8000406:	20f2      	movs	r0, #242	; 0xf2
 8000408:	f7ff ff68 	bl	80002dc <LCD_Write_Cmd>
	LCD_Write_Data ( 0x00 );
 800040c:	2000      	movs	r0, #0
 800040e:	f7ff ff73 	bl	80002f8 <LCD_Write_Data>
	
	/* Gamma Set (26h) */
	LCD_Write_Cmd ( 0x26 );
 8000412:	2026      	movs	r0, #38	; 0x26
 8000414:	f7ff ff62 	bl	80002dc <LCD_Write_Cmd>
	LCD_Write_Data ( 0x01 );
 8000418:	2001      	movs	r0, #1
 800041a:	f7ff ff6d 	bl	80002f8 <LCD_Write_Data>
	DEBUG_DELAY ();
	
	/* Positive Gamma Correction */
	LCD_Write_Cmd ( 0xE0 ); //Set Gamma
 800041e:	20e0      	movs	r0, #224	; 0xe0
 8000420:	f7ff ff5c 	bl	80002dc <LCD_Write_Cmd>
	LCD_Write_Data ( 0x0F );
 8000424:	200f      	movs	r0, #15
 8000426:	f7ff ff67 	bl	80002f8 <LCD_Write_Data>
	LCD_Write_Data ( 0x26 );
 800042a:	2026      	movs	r0, #38	; 0x26
 800042c:	f7ff ff64 	bl	80002f8 <LCD_Write_Data>
	LCD_Write_Data ( 0x24 );
 8000430:	2024      	movs	r0, #36	; 0x24
 8000432:	f7ff ff61 	bl	80002f8 <LCD_Write_Data>
	LCD_Write_Data ( 0x0B );
 8000436:	200b      	movs	r0, #11
 8000438:	f7ff ff5e 	bl	80002f8 <LCD_Write_Data>
	LCD_Write_Data ( 0x0E );
 800043c:	200e      	movs	r0, #14
 800043e:	f7ff ff5b 	bl	80002f8 <LCD_Write_Data>
	LCD_Write_Data ( 0x09 );
 8000442:	2009      	movs	r0, #9
 8000444:	f7ff ff58 	bl	80002f8 <LCD_Write_Data>
	LCD_Write_Data ( 0x54 );
 8000448:	2054      	movs	r0, #84	; 0x54
 800044a:	f7ff ff55 	bl	80002f8 <LCD_Write_Data>
	LCD_Write_Data ( 0xA8 );
 800044e:	20a8      	movs	r0, #168	; 0xa8
 8000450:	f7ff ff52 	bl	80002f8 <LCD_Write_Data>
	LCD_Write_Data ( 0x46 );
 8000454:	2046      	movs	r0, #70	; 0x46
 8000456:	f7ff ff4f 	bl	80002f8 <LCD_Write_Data>
	LCD_Write_Data ( 0x0C );
 800045a:	200c      	movs	r0, #12
 800045c:	f7ff ff4c 	bl	80002f8 <LCD_Write_Data>
	LCD_Write_Data ( 0x17 );
 8000460:	2017      	movs	r0, #23
 8000462:	f7ff ff49 	bl	80002f8 <LCD_Write_Data>
	LCD_Write_Data ( 0x09 );
 8000466:	2009      	movs	r0, #9
 8000468:	f7ff ff46 	bl	80002f8 <LCD_Write_Data>
	LCD_Write_Data ( 0x0F );
 800046c:	200f      	movs	r0, #15
 800046e:	f7ff ff43 	bl	80002f8 <LCD_Write_Data>
	LCD_Write_Data ( 0x07 );
 8000472:	2007      	movs	r0, #7
 8000474:	f7ff ff40 	bl	80002f8 <LCD_Write_Data>
	LCD_Write_Data ( 0x00 );
 8000478:	2000      	movs	r0, #0
 800047a:	f7ff ff3d 	bl	80002f8 <LCD_Write_Data>
	
	/* Negative Gamma Correction (E1h) */
	LCD_Write_Cmd ( 0XE1 ); //Set Gamma
 800047e:	20e1      	movs	r0, #225	; 0xe1
 8000480:	f7ff ff2c 	bl	80002dc <LCD_Write_Cmd>
	LCD_Write_Data ( 0x00 );
 8000484:	2000      	movs	r0, #0
 8000486:	f7ff ff37 	bl	80002f8 <LCD_Write_Data>
	LCD_Write_Data ( 0x19 );
 800048a:	2019      	movs	r0, #25
 800048c:	f7ff ff34 	bl	80002f8 <LCD_Write_Data>
	LCD_Write_Data ( 0x1B );
 8000490:	201b      	movs	r0, #27
 8000492:	f7ff ff31 	bl	80002f8 <LCD_Write_Data>
	LCD_Write_Data ( 0x04 );
 8000496:	2004      	movs	r0, #4
 8000498:	f7ff ff2e 	bl	80002f8 <LCD_Write_Data>
	LCD_Write_Data ( 0x10 );
 800049c:	2010      	movs	r0, #16
 800049e:	f7ff ff2b 	bl	80002f8 <LCD_Write_Data>
	LCD_Write_Data ( 0x07 );
 80004a2:	2007      	movs	r0, #7
 80004a4:	f7ff ff28 	bl	80002f8 <LCD_Write_Data>
	LCD_Write_Data ( 0x2A );
 80004a8:	202a      	movs	r0, #42	; 0x2a
 80004aa:	f7ff ff25 	bl	80002f8 <LCD_Write_Data>
	LCD_Write_Data ( 0x47 );
 80004ae:	2047      	movs	r0, #71	; 0x47
 80004b0:	f7ff ff22 	bl	80002f8 <LCD_Write_Data>
	LCD_Write_Data ( 0x39 );
 80004b4:	2039      	movs	r0, #57	; 0x39
 80004b6:	f7ff ff1f 	bl	80002f8 <LCD_Write_Data>
	LCD_Write_Data ( 0x03 );
 80004ba:	2003      	movs	r0, #3
 80004bc:	f7ff ff1c 	bl	80002f8 <LCD_Write_Data>
	LCD_Write_Data ( 0x06 );
 80004c0:	2006      	movs	r0, #6
 80004c2:	f7ff ff19 	bl	80002f8 <LCD_Write_Data>
	LCD_Write_Data ( 0x06 );
 80004c6:	2006      	movs	r0, #6
 80004c8:	f7ff ff16 	bl	80002f8 <LCD_Write_Data>
	LCD_Write_Data ( 0x30 );
 80004cc:	2030      	movs	r0, #48	; 0x30
 80004ce:	f7ff ff13 	bl	80002f8 <LCD_Write_Data>
	LCD_Write_Data ( 0x38 );
 80004d2:	2038      	movs	r0, #56	; 0x38
 80004d4:	f7ff ff10 	bl	80002f8 <LCD_Write_Data>
	LCD_Write_Data ( 0x0F );
 80004d8:	200f      	movs	r0, #15
 80004da:	f7ff ff0d 	bl	80002f8 <LCD_Write_Data>
	
	/* memory access control set */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( 0x36 ); 	
 80004de:	2036      	movs	r0, #54	; 0x36
 80004e0:	f7ff fefc 	bl	80002dc <LCD_Write_Cmd>
	LCD_Write_Data ( 0xC8 );  // Version 1
 80004e4:	20c8      	movs	r0, #200	; 0xc8
 80004e6:	f7ff ff07 	bl	80002f8 <LCD_Write_Data>
	/* display inversion */
//	LCD_Write_Cmd ( 0x21 );   // Version 2
	DEBUG_DELAY ();
	
	/* column address control set */
	LCD_Write_Cmd ( CMD_Set_COLUMN ); 
 80004ea:	202a      	movs	r0, #42	; 0x2a
 80004ec:	f7ff fef6 	bl	80002dc <LCD_Write_Cmd>
	LCD_Write_Data ( 0x00 );
 80004f0:	2000      	movs	r0, #0
 80004f2:	f7ff ff01 	bl	80002f8 <LCD_Write_Data>
	LCD_Write_Data ( 0x00 );
 80004f6:	2000      	movs	r0, #0
 80004f8:	f7ff fefe 	bl	80002f8 <LCD_Write_Data>
	LCD_Write_Data ( 0x00 );
 80004fc:	2000      	movs	r0, #0
 80004fe:	f7ff fefb 	bl	80002f8 <LCD_Write_Data>
	LCD_Write_Data ( 0xEF );
 8000502:	20ef      	movs	r0, #239	; 0xef
 8000504:	f7ff fef8 	bl	80002f8 <LCD_Write_Data>
	
	/* page address control set */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( CMD_Set_PAGE ); 
 8000508:	202b      	movs	r0, #43	; 0x2b
 800050a:	f7ff fee7 	bl	80002dc <LCD_Write_Cmd>
	LCD_Write_Data ( 0x00 );
 800050e:	2000      	movs	r0, #0
 8000510:	f7ff fef2 	bl	80002f8 <LCD_Write_Data>
	LCD_Write_Data ( 0x00 );
 8000514:	2000      	movs	r0, #0
 8000516:	f7ff feef 	bl	80002f8 <LCD_Write_Data>
	LCD_Write_Data ( 0x01 );
 800051a:	2001      	movs	r0, #1
 800051c:	f7ff feec 	bl	80002f8 <LCD_Write_Data>
	LCD_Write_Data ( 0x3F );
 8000520:	203f      	movs	r0, #63	; 0x3f
 8000522:	f7ff fee9 	bl	80002f8 <LCD_Write_Data>
	
	/*  Pixel Format Set (3Ah)  */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( 0x3a ); 
 8000526:	203a      	movs	r0, #58	; 0x3a
 8000528:	f7ff fed8 	bl	80002dc <LCD_Write_Cmd>
	LCD_Write_Data ( 0x55 );
 800052c:	2055      	movs	r0, #85	; 0x55
 800052e:	f7ff fee3 	bl	80002f8 <LCD_Write_Data>
	
	/* Sleep Out (11h)  */
	LCD_Write_Cmd ( 0x11 );	
 8000532:	2011      	movs	r0, #17
 8000534:	f7ff fed2 	bl	80002dc <LCD_Write_Cmd>
	Delay ( 0xAFFf<<2 );
 8000538:	4803      	ldr	r0, [pc, #12]	; (8000548 <LCD_REG_Config+0x230>)
 800053a:	f7ff fe73 	bl	8000224 <Delay>
	DEBUG_DELAY ();
	
	/* Display ON (29h) */
	LCD_Write_Cmd ( 0x29 ); 
 800053e:	2029      	movs	r0, #41	; 0x29
 8000540:	f7ff fecc 	bl	80002dc <LCD_Write_Cmd>
	
	
}
 8000544:	bf00      	nop
 8000546:	bd80      	pop	{r7, pc}
 8000548:	0002bffc 	.word	0x0002bffc

0800054c <LCD_OpenWindow>:



void LCD_OpenWindow ( uint16_t usCOLUMN, uint16_t usPAGE, uint16_t usWidth, uint16_t usHeight )
{	
 800054c:	b590      	push	{r4, r7, lr}
 800054e:	b083      	sub	sp, #12
 8000550:	af00      	add	r7, sp, #0
 8000552:	4604      	mov	r4, r0
 8000554:	4608      	mov	r0, r1
 8000556:	4611      	mov	r1, r2
 8000558:	461a      	mov	r2, r3
 800055a:	4623      	mov	r3, r4
 800055c:	80fb      	strh	r3, [r7, #6]
 800055e:	4603      	mov	r3, r0
 8000560:	80bb      	strh	r3, [r7, #4]
 8000562:	460b      	mov	r3, r1
 8000564:	807b      	strh	r3, [r7, #2]
 8000566:	4613      	mov	r3, r2
 8000568:	803b      	strh	r3, [r7, #0]
	LCD_Write_Cmd ( CMD_Set_COLUMN ); 				
 800056a:	202a      	movs	r0, #42	; 0x2a
 800056c:	f7ff feb6 	bl	80002dc <LCD_Write_Cmd>
	LCD_Write_Data ( usCOLUMN >> 8  );	 // read the most significant 8 byte
 8000570:	88fb      	ldrh	r3, [r7, #6]
 8000572:	0a1b      	lsrs	r3, r3, #8
 8000574:	b29b      	uxth	r3, r3
 8000576:	4618      	mov	r0, r3
 8000578:	f7ff febe 	bl	80002f8 <LCD_Write_Data>
	LCD_Write_Data ( usCOLUMN & 0xff  ); // read the least significant 8 byte
 800057c:	88fb      	ldrh	r3, [r7, #6]
 800057e:	b2db      	uxtb	r3, r3
 8000580:	b29b      	uxth	r3, r3
 8000582:	4618      	mov	r0, r3
 8000584:	f7ff feb8 	bl	80002f8 <LCD_Write_Data>
	LCD_Write_Data ( ( usCOLUMN + usWidth - 1 ) >> 8  );  	// write most significant byte of the ending column address (usCOLUMN + usWidth - 1)
 8000588:	88fa      	ldrh	r2, [r7, #6]
 800058a:	887b      	ldrh	r3, [r7, #2]
 800058c:	4413      	add	r3, r2
 800058e:	3b01      	subs	r3, #1
 8000590:	121b      	asrs	r3, r3, #8
 8000592:	b29b      	uxth	r3, r3
 8000594:	4618      	mov	r0, r3
 8000596:	f7ff feaf 	bl	80002f8 <LCD_Write_Data>
	LCD_Write_Data ( ( usCOLUMN + usWidth - 1 ) & 0xff  ); // write least significant byte of the ending column address (usCOLUMN + usWidth - 1)
 800059a:	88fa      	ldrh	r2, [r7, #6]
 800059c:	887b      	ldrh	r3, [r7, #2]
 800059e:	4413      	add	r3, r2
 80005a0:	b29b      	uxth	r3, r3
 80005a2:	3b01      	subs	r3, #1
 80005a4:	b29b      	uxth	r3, r3
 80005a6:	b2db      	uxtb	r3, r3
 80005a8:	b29b      	uxth	r3, r3
 80005aa:	4618      	mov	r0, r3
 80005ac:	f7ff fea4 	bl	80002f8 <LCD_Write_Data>

	LCD_Write_Cmd ( CMD_Set_PAGE ); 			     
 80005b0:	202b      	movs	r0, #43	; 0x2b
 80005b2:	f7ff fe93 	bl	80002dc <LCD_Write_Cmd>
	LCD_Write_Data ( usPAGE >> 8  );
 80005b6:	88bb      	ldrh	r3, [r7, #4]
 80005b8:	0a1b      	lsrs	r3, r3, #8
 80005ba:	b29b      	uxth	r3, r3
 80005bc:	4618      	mov	r0, r3
 80005be:	f7ff fe9b 	bl	80002f8 <LCD_Write_Data>
	LCD_Write_Data ( usPAGE & 0xff  );
 80005c2:	88bb      	ldrh	r3, [r7, #4]
 80005c4:	b2db      	uxtb	r3, r3
 80005c6:	b29b      	uxth	r3, r3
 80005c8:	4618      	mov	r0, r3
 80005ca:	f7ff fe95 	bl	80002f8 <LCD_Write_Data>
	LCD_Write_Data ( ( usPAGE + usHeight - 1 ) >> 8 );
 80005ce:	88ba      	ldrh	r2, [r7, #4]
 80005d0:	883b      	ldrh	r3, [r7, #0]
 80005d2:	4413      	add	r3, r2
 80005d4:	3b01      	subs	r3, #1
 80005d6:	121b      	asrs	r3, r3, #8
 80005d8:	b29b      	uxth	r3, r3
 80005da:	4618      	mov	r0, r3
 80005dc:	f7ff fe8c 	bl	80002f8 <LCD_Write_Data>
	LCD_Write_Data ( ( usPAGE + usHeight - 1) & 0xff );
 80005e0:	88ba      	ldrh	r2, [r7, #4]
 80005e2:	883b      	ldrh	r3, [r7, #0]
 80005e4:	4413      	add	r3, r2
 80005e6:	b29b      	uxth	r3, r3
 80005e8:	3b01      	subs	r3, #1
 80005ea:	b29b      	uxth	r3, r3
 80005ec:	b2db      	uxtb	r3, r3
 80005ee:	b29b      	uxth	r3, r3
 80005f0:	4618      	mov	r0, r3
 80005f2:	f7ff fe81 	bl	80002f8 <LCD_Write_Data>
	
}
 80005f6:	bf00      	nop
 80005f8:	370c      	adds	r7, #12
 80005fa:	46bd      	mov	sp, r7
 80005fc:	bd90      	pop	{r4, r7, pc}

080005fe <LCD_FillColor>:


void LCD_FillColor ( uint32_t usPoint, uint16_t usColor )
{
 80005fe:	b580      	push	{r7, lr}
 8000600:	b084      	sub	sp, #16
 8000602:	af00      	add	r7, sp, #0
 8000604:	6078      	str	r0, [r7, #4]
 8000606:	460b      	mov	r3, r1
 8000608:	807b      	strh	r3, [r7, #2]
	uint32_t i = 0;
 800060a:	2300      	movs	r3, #0
 800060c:	60fb      	str	r3, [r7, #12]
	
	/* memory write */
	LCD_Write_Cmd ( CMD_SetPixel );	
 800060e:	202c      	movs	r0, #44	; 0x2c
 8000610:	f7ff fe64 	bl	80002dc <LCD_Write_Cmd>
		
	for ( i = 0; i < usPoint; i ++ )
 8000614:	2300      	movs	r3, #0
 8000616:	60fb      	str	r3, [r7, #12]
 8000618:	e006      	b.n	8000628 <LCD_FillColor+0x2a>
		LCD_Write_Data ( usColor );
 800061a:	887b      	ldrh	r3, [r7, #2]
 800061c:	4618      	mov	r0, r3
 800061e:	f7ff fe6b 	bl	80002f8 <LCD_Write_Data>
	for ( i = 0; i < usPoint; i ++ )
 8000622:	68fb      	ldr	r3, [r7, #12]
 8000624:	3301      	adds	r3, #1
 8000626:	60fb      	str	r3, [r7, #12]
 8000628:	68fa      	ldr	r2, [r7, #12]
 800062a:	687b      	ldr	r3, [r7, #4]
 800062c:	429a      	cmp	r2, r3
 800062e:	d3f4      	bcc.n	800061a <LCD_FillColor+0x1c>
		
}
 8000630:	bf00      	nop
 8000632:	bf00      	nop
 8000634:	3710      	adds	r7, #16
 8000636:	46bd      	mov	sp, r7
 8000638:	bd80      	pop	{r7, pc}

0800063a <LCD_Clear>:




void LCD_Clear ( uint16_t usCOLUMN, uint16_t usPAGE, uint16_t usWidth, uint16_t usHeight, uint16_t usColor )
{
 800063a:	b590      	push	{r4, r7, lr}
 800063c:	b083      	sub	sp, #12
 800063e:	af00      	add	r7, sp, #0
 8000640:	4604      	mov	r4, r0
 8000642:	4608      	mov	r0, r1
 8000644:	4611      	mov	r1, r2
 8000646:	461a      	mov	r2, r3
 8000648:	4623      	mov	r3, r4
 800064a:	80fb      	strh	r3, [r7, #6]
 800064c:	4603      	mov	r3, r0
 800064e:	80bb      	strh	r3, [r7, #4]
 8000650:	460b      	mov	r3, r1
 8000652:	807b      	strh	r3, [r7, #2]
 8000654:	4613      	mov	r3, r2
 8000656:	803b      	strh	r3, [r7, #0]
	LCD_OpenWindow ( usCOLUMN, usPAGE, usWidth, usHeight );
 8000658:	883b      	ldrh	r3, [r7, #0]
 800065a:	887a      	ldrh	r2, [r7, #2]
 800065c:	88b9      	ldrh	r1, [r7, #4]
 800065e:	88f8      	ldrh	r0, [r7, #6]
 8000660:	f7ff ff74 	bl	800054c <LCD_OpenWindow>
	LCD_FillColor ( usWidth * usHeight, usColor );		
 8000664:	887b      	ldrh	r3, [r7, #2]
 8000666:	883a      	ldrh	r2, [r7, #0]
 8000668:	fb02 f303 	mul.w	r3, r2, r3
 800066c:	461a      	mov	r2, r3
 800066e:	8b3b      	ldrh	r3, [r7, #24]
 8000670:	4619      	mov	r1, r3
 8000672:	4610      	mov	r0, r2
 8000674:	f7ff ffc3 	bl	80005fe <LCD_FillColor>
	
}
 8000678:	bf00      	nop
 800067a:	370c      	adds	r7, #12
 800067c:	46bd      	mov	sp, r7
 800067e:	bd90      	pop	{r4, r7, pc}

08000680 <LCD_DrawChar>:
	
}   


void LCD_DrawChar ( uint16_t usC, uint16_t usP, const char cChar )
{
 8000680:	b580      	push	{r7, lr}
 8000682:	b084      	sub	sp, #16
 8000684:	af00      	add	r7, sp, #0
 8000686:	4603      	mov	r3, r0
 8000688:	80fb      	strh	r3, [r7, #6]
 800068a:	460b      	mov	r3, r1
 800068c:	80bb      	strh	r3, [r7, #4]
 800068e:	4613      	mov	r3, r2
 8000690:	70fb      	strb	r3, [r7, #3]
	uint8_t ucTemp, ucRelativePositon, ucPage, ucColumn;

	
	ucRelativePositon = cChar - ' ';
 8000692:	78fb      	ldrb	r3, [r7, #3]
 8000694:	3b20      	subs	r3, #32
 8000696:	733b      	strb	r3, [r7, #12]
	
	LCD_OpenWindow ( usC, usP, WIDTH_EN_CHAR, HEIGHT_EN_CHAR );
 8000698:	88b9      	ldrh	r1, [r7, #4]
 800069a:	88f8      	ldrh	r0, [r7, #6]
 800069c:	2310      	movs	r3, #16
 800069e:	2208      	movs	r2, #8
 80006a0:	f7ff ff54 	bl	800054c <LCD_OpenWindow>
	
	LCD_Write_Cmd ( CMD_SetPixel );	
 80006a4:	202c      	movs	r0, #44	; 0x2c
 80006a6:	f7ff fe19 	bl	80002dc <LCD_Write_Cmd>
	
	for ( ucPage = 0; ucPage < HEIGHT_EN_CHAR; ucPage ++ )
 80006aa:	2300      	movs	r3, #0
 80006ac:	73bb      	strb	r3, [r7, #14]
 80006ae:	e023      	b.n	80006f8 <LCD_DrawChar+0x78>
	{
		ucTemp = ucAscii_1608 [ ucRelativePositon ] [ ucPage ];
 80006b0:	7b3a      	ldrb	r2, [r7, #12]
 80006b2:	7bbb      	ldrb	r3, [r7, #14]
 80006b4:	4914      	ldr	r1, [pc, #80]	; (8000708 <LCD_DrawChar+0x88>)
 80006b6:	0112      	lsls	r2, r2, #4
 80006b8:	440a      	add	r2, r1
 80006ba:	4413      	add	r3, r2
 80006bc:	781b      	ldrb	r3, [r3, #0]
 80006be:	73fb      	strb	r3, [r7, #15]
		
		for ( ucColumn = 0; ucColumn < WIDTH_EN_CHAR; ucColumn ++ )
 80006c0:	2300      	movs	r3, #0
 80006c2:	737b      	strb	r3, [r7, #13]
 80006c4:	e012      	b.n	80006ec <LCD_DrawChar+0x6c>
		{
			if ( ucTemp & 0x01 )
 80006c6:	7bfb      	ldrb	r3, [r7, #15]
 80006c8:	f003 0301 	and.w	r3, r3, #1
 80006cc:	2b00      	cmp	r3, #0
 80006ce:	d003      	beq.n	80006d8 <LCD_DrawChar+0x58>
				LCD_Write_Data ( 0x001F );
 80006d0:	201f      	movs	r0, #31
 80006d2:	f7ff fe11 	bl	80002f8 <LCD_Write_Data>
 80006d6:	e003      	b.n	80006e0 <LCD_DrawChar+0x60>
			
			else
				LCD_Write_Data (  0xFFFF );								
 80006d8:	f64f 70ff 	movw	r0, #65535	; 0xffff
 80006dc:	f7ff fe0c 	bl	80002f8 <LCD_Write_Data>
			
			ucTemp >>= 1;		
 80006e0:	7bfb      	ldrb	r3, [r7, #15]
 80006e2:	085b      	lsrs	r3, r3, #1
 80006e4:	73fb      	strb	r3, [r7, #15]
		for ( ucColumn = 0; ucColumn < WIDTH_EN_CHAR; ucColumn ++ )
 80006e6:	7b7b      	ldrb	r3, [r7, #13]
 80006e8:	3301      	adds	r3, #1
 80006ea:	737b      	strb	r3, [r7, #13]
 80006ec:	7b7b      	ldrb	r3, [r7, #13]
 80006ee:	2b07      	cmp	r3, #7
 80006f0:	d9e9      	bls.n	80006c6 <LCD_DrawChar+0x46>
	for ( ucPage = 0; ucPage < HEIGHT_EN_CHAR; ucPage ++ )
 80006f2:	7bbb      	ldrb	r3, [r7, #14]
 80006f4:	3301      	adds	r3, #1
 80006f6:	73bb      	strb	r3, [r7, #14]
 80006f8:	7bbb      	ldrb	r3, [r7, #14]
 80006fa:	2b0f      	cmp	r3, #15
 80006fc:	d9d8      	bls.n	80006b0 <LCD_DrawChar+0x30>
			
		}
		
	}
	
}
 80006fe:	bf00      	nop
 8000700:	bf00      	nop
 8000702:	3710      	adds	r7, #16
 8000704:	46bd      	mov	sp, r7
 8000706:	bd80      	pop	{r7, pc}
 8000708:	08003844 	.word	0x08003844

0800070c <LCD_DrawString>:




void LCD_DrawString ( uint16_t usC, uint16_t usP, const char * pStr )
{
 800070c:	b580      	push	{r7, lr}
 800070e:	b082      	sub	sp, #8
 8000710:	af00      	add	r7, sp, #0
 8000712:	4603      	mov	r3, r0
 8000714:	603a      	str	r2, [r7, #0]
 8000716:	80fb      	strh	r3, [r7, #6]
 8000718:	460b      	mov	r3, r1
 800071a:	80bb      	strh	r3, [r7, #4]
	while ( * pStr != '\0' )
 800071c:	e01c      	b.n	8000758 <LCD_DrawString+0x4c>
	{
		if ( ( usC - LCD_DispWindow_Start_COLUMN + WIDTH_EN_CHAR ) > LCD_DispWindow_COLUMN )
 800071e:	88fb      	ldrh	r3, [r7, #6]
 8000720:	2be8      	cmp	r3, #232	; 0xe8
 8000722:	d904      	bls.n	800072e <LCD_DrawString+0x22>
		{
			usC = LCD_DispWindow_Start_COLUMN;
 8000724:	2300      	movs	r3, #0
 8000726:	80fb      	strh	r3, [r7, #6]
			usP += HEIGHT_EN_CHAR;
 8000728:	88bb      	ldrh	r3, [r7, #4]
 800072a:	3310      	adds	r3, #16
 800072c:	80bb      	strh	r3, [r7, #4]
		}
		
		if ( ( usP - LCD_DispWindow_Start_PAGE + HEIGHT_EN_CHAR ) > LCD_DispWindow_PAGE )
 800072e:	88bb      	ldrh	r3, [r7, #4]
 8000730:	f5b3 7f98 	cmp.w	r3, #304	; 0x130
 8000734:	d903      	bls.n	800073e <LCD_DrawString+0x32>
		{
			usC = LCD_DispWindow_Start_COLUMN;
 8000736:	2300      	movs	r3, #0
 8000738:	80fb      	strh	r3, [r7, #6]
			usP = LCD_DispWindow_Start_PAGE;
 800073a:	2300      	movs	r3, #0
 800073c:	80bb      	strh	r3, [r7, #4]
		}
		
		LCD_DrawChar ( usC, usP, * pStr );
 800073e:	683b      	ldr	r3, [r7, #0]
 8000740:	781a      	ldrb	r2, [r3, #0]
 8000742:	88b9      	ldrh	r1, [r7, #4]
 8000744:	88fb      	ldrh	r3, [r7, #6]
 8000746:	4618      	mov	r0, r3
 8000748:	f7ff ff9a 	bl	8000680 <LCD_DrawChar>
		
		pStr ++;
 800074c:	683b      	ldr	r3, [r7, #0]
 800074e:	3301      	adds	r3, #1
 8000750:	603b      	str	r3, [r7, #0]
		
		usC += WIDTH_EN_CHAR;
 8000752:	88fb      	ldrh	r3, [r7, #6]
 8000754:	3308      	adds	r3, #8
 8000756:	80fb      	strh	r3, [r7, #6]
	while ( * pStr != '\0' )
 8000758:	683b      	ldr	r3, [r7, #0]
 800075a:	781b      	ldrb	r3, [r3, #0]
 800075c:	2b00      	cmp	r3, #0
 800075e:	d1de      	bne.n	800071e <LCD_DrawString+0x12>
		
	}
	
}
 8000760:	bf00      	nop
 8000762:	bf00      	nop
 8000764:	3708      	adds	r7, #8
 8000766:	46bd      	mov	sp, r7
 8000768:	bd80      	pop	{r7, pc}
	...

0800076c <LCD_DrawValue>:

void LCD_DrawValue( uint16_t usC, uint16_t usP, uint32_t value )
{
 800076c:	b580      	push	{r7, lr}
 800076e:	b090      	sub	sp, #64	; 0x40
 8000770:	af00      	add	r7, sp, #0
 8000772:	4603      	mov	r3, r0
 8000774:	603a      	str	r2, [r7, #0]
 8000776:	80fb      	strh	r3, [r7, #6]
 8000778:	460b      	mov	r3, r1
 800077a:	80bb      	strh	r3, [r7, #4]
	char buffer [50];
  sprintf (buffer, "%04d", value);
 800077c:	f107 0308 	add.w	r3, r7, #8
 8000780:	683a      	ldr	r2, [r7, #0]
 8000782:	4917      	ldr	r1, [pc, #92]	; (80007e0 <LCD_DrawValue+0x74>)
 8000784:	4618      	mov	r0, r3
 8000786:	f002 fbab 	bl	8002ee0 <siprintf>
	const char* pStr = buffer;
 800078a:	f107 0308 	add.w	r3, r7, #8
 800078e:	63fb      	str	r3, [r7, #60]	; 0x3c

	while ( * pStr != '\0' )
 8000790:	e01c      	b.n	80007cc <LCD_DrawValue+0x60>
	{
		if ( ( usC - LCD_DispWindow_Start_COLUMN + WIDTH_EN_CHAR ) > LCD_DispWindow_COLUMN )
 8000792:	88fb      	ldrh	r3, [r7, #6]
 8000794:	2be8      	cmp	r3, #232	; 0xe8
 8000796:	d904      	bls.n	80007a2 <LCD_DrawValue+0x36>
		{
			usC = LCD_DispWindow_Start_COLUMN;
 8000798:	2300      	movs	r3, #0
 800079a:	80fb      	strh	r3, [r7, #6]
			usP += HEIGHT_EN_CHAR;
 800079c:	88bb      	ldrh	r3, [r7, #4]
 800079e:	3310      	adds	r3, #16
 80007a0:	80bb      	strh	r3, [r7, #4]
		}

		if ( ( usP - LCD_DispWindow_Start_PAGE + HEIGHT_EN_CHAR ) > LCD_DispWindow_PAGE )
 80007a2:	88bb      	ldrh	r3, [r7, #4]
 80007a4:	f5b3 7f98 	cmp.w	r3, #304	; 0x130
 80007a8:	d903      	bls.n	80007b2 <LCD_DrawValue+0x46>
		{
			usC = LCD_DispWindow_Start_COLUMN;
 80007aa:	2300      	movs	r3, #0
 80007ac:	80fb      	strh	r3, [r7, #6]
			usP = LCD_DispWindow_Start_PAGE;
 80007ae:	2300      	movs	r3, #0
 80007b0:	80bb      	strh	r3, [r7, #4]
		}

		LCD_DrawChar ( usC, usP, * pStr );
 80007b2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80007b4:	781a      	ldrb	r2, [r3, #0]
 80007b6:	88b9      	ldrh	r1, [r7, #4]
 80007b8:	88fb      	ldrh	r3, [r7, #6]
 80007ba:	4618      	mov	r0, r3
 80007bc:	f7ff ff60 	bl	8000680 <LCD_DrawChar>

		pStr ++;
 80007c0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80007c2:	3301      	adds	r3, #1
 80007c4:	63fb      	str	r3, [r7, #60]	; 0x3c

		usC += WIDTH_EN_CHAR;
 80007c6:	88fb      	ldrh	r3, [r7, #6]
 80007c8:	3308      	adds	r3, #8
 80007ca:	80fb      	strh	r3, [r7, #6]
	while ( * pStr != '\0' )
 80007cc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80007ce:	781b      	ldrb	r3, [r3, #0]
 80007d0:	2b00      	cmp	r3, #0
 80007d2:	d1de      	bne.n	8000792 <LCD_DrawValue+0x26>

	}
}
 80007d4:	bf00      	nop
 80007d6:	bf00      	nop
 80007d8:	3740      	adds	r7, #64	; 0x40
 80007da:	46bd      	mov	sp, r7
 80007dc:	bd80      	pop	{r7, pc}
 80007de:	bf00      	nop
 80007e0:	080037ec 	.word	0x080037ec

080007e4 <LCD_DrawValueHex>:

void LCD_DrawValueHex( uint16_t usC, uint16_t usP, uint32_t value )
{
 80007e4:	b580      	push	{r7, lr}
 80007e6:	b090      	sub	sp, #64	; 0x40
 80007e8:	af00      	add	r7, sp, #0
 80007ea:	4603      	mov	r3, r0
 80007ec:	603a      	str	r2, [r7, #0]
 80007ee:	80fb      	strh	r3, [r7, #6]
 80007f0:	460b      	mov	r3, r1
 80007f2:	80bb      	strh	r3, [r7, #4]
	char buffer [50];
  sprintf (buffer, "%03x", value);
 80007f4:	f107 0308 	add.w	r3, r7, #8
 80007f8:	683a      	ldr	r2, [r7, #0]
 80007fa:	4917      	ldr	r1, [pc, #92]	; (8000858 <LCD_DrawValueHex+0x74>)
 80007fc:	4618      	mov	r0, r3
 80007fe:	f002 fb6f 	bl	8002ee0 <siprintf>
	const char* pStr = buffer;
 8000802:	f107 0308 	add.w	r3, r7, #8
 8000806:	63fb      	str	r3, [r7, #60]	; 0x3c

	while ( * pStr != '\0' )
 8000808:	e01c      	b.n	8000844 <LCD_DrawValueHex+0x60>
	{
		if ( ( usC - LCD_DispWindow_Start_COLUMN + WIDTH_EN_CHAR ) > LCD_DispWindow_COLUMN )
 800080a:	88fb      	ldrh	r3, [r7, #6]
 800080c:	2be8      	cmp	r3, #232	; 0xe8
 800080e:	d904      	bls.n	800081a <LCD_DrawValueHex+0x36>
		{
			usC = LCD_DispWindow_Start_COLUMN;
 8000810:	2300      	movs	r3, #0
 8000812:	80fb      	strh	r3, [r7, #6]
			usP += HEIGHT_EN_CHAR;
 8000814:	88bb      	ldrh	r3, [r7, #4]
 8000816:	3310      	adds	r3, #16
 8000818:	80bb      	strh	r3, [r7, #4]
		}

		if ( ( usP - LCD_DispWindow_Start_PAGE + HEIGHT_EN_CHAR ) > LCD_DispWindow_PAGE )
 800081a:	88bb      	ldrh	r3, [r7, #4]
 800081c:	f5b3 7f98 	cmp.w	r3, #304	; 0x130
 8000820:	d903      	bls.n	800082a <LCD_DrawValueHex+0x46>
		{
			usC = LCD_DispWindow_Start_COLUMN;
 8000822:	2300      	movs	r3, #0
 8000824:	80fb      	strh	r3, [r7, #6]
			usP = LCD_DispWindow_Start_PAGE;
 8000826:	2300      	movs	r3, #0
 8000828:	80bb      	strh	r3, [r7, #4]
		}

		LCD_DrawChar ( usC, usP, * pStr );
 800082a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800082c:	781a      	ldrb	r2, [r3, #0]
 800082e:	88b9      	ldrh	r1, [r7, #4]
 8000830:	88fb      	ldrh	r3, [r7, #6]
 8000832:	4618      	mov	r0, r3
 8000834:	f7ff ff24 	bl	8000680 <LCD_DrawChar>

		pStr ++;
 8000838:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800083a:	3301      	adds	r3, #1
 800083c:	63fb      	str	r3, [r7, #60]	; 0x3c

		usC += WIDTH_EN_CHAR;
 800083e:	88fb      	ldrh	r3, [r7, #6]
 8000840:	3308      	adds	r3, #8
 8000842:	80fb      	strh	r3, [r7, #6]
	while ( * pStr != '\0' )
 8000844:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000846:	781b      	ldrb	r3, [r3, #0]
 8000848:	2b00      	cmp	r3, #0
 800084a:	d1de      	bne.n	800080a <LCD_DrawValueHex+0x26>

	}

}
 800084c:	bf00      	nop
 800084e:	bf00      	nop
 8000850:	3740      	adds	r7, #64	; 0x40
 8000852:	46bd      	mov	sp, r7
 8000854:	bd80      	pop	{r7, pc}
 8000856:	bf00      	nop
 8000858:	080037f4 	.word	0x080037f4

0800085c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800085c:	b580      	push	{r7, lr}
 800085e:	b088      	sub	sp, #32
 8000860:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000862:	f000 fc53 	bl	800110c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000866:	f000 f8f3 	bl	8000a50 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800086a:	f000 f9cb 	bl	8000c04 <MX_GPIO_Init>
  MX_FSMC_Init();
 800086e:	f000 fa73 	bl	8000d58 <MX_FSMC_Init>
  MX_ADC1_Init();
 8000872:	f000 f94b 	bl	8000b0c <MX_ADC1_Init>
  MX_ADC2_Init();
 8000876:	f000 f987 	bl	8000b88 <MX_ADC2_Init>
  /* USER CODE BEGIN 2 */
	LCD_INIT();
 800087a:	f7ff fce4 	bl	8000246 <LCD_INIT>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	HAL_ADCEx_Calibration_Start(&hadc1);
 800087e:	486c      	ldr	r0, [pc, #432]	; (8000a30 <main+0x1d4>)
 8000880:	f001 f8e4 	bl	8001a4c <HAL_ADCEx_Calibration_Start>
	HAL_ADCEx_Calibration_Start(&hadc2);
 8000884:	486b      	ldr	r0, [pc, #428]	; (8000a34 <main+0x1d8>)
 8000886:	f001 f8e1 	bl	8001a4c <HAL_ADCEx_Calibration_Start>

	uint32_t value1 = 0;
 800088a:	2300      	movs	r3, #0
 800088c:	61bb      	str	r3, [r7, #24]
	uint32_t value2 = 0;
 800088e:	2300      	movs	r3, #0
 8000890:	617b      	str	r3, [r7, #20]

	uint32_t low_intensity = 250;
 8000892:	23fa      	movs	r3, #250	; 0xfa
 8000894:	613b      	str	r3, [r7, #16]
	uint32_t large_intensity = 3050;
 8000896:	f640 33ea 	movw	r3, #3050	; 0xbea
 800089a:	60fb      	str	r3, [r7, #12]
	uint8_t num_interval = 5;
 800089c:	2305      	movs	r3, #5
 800089e:	72fb      	strb	r3, [r7, #11]
	uint32_t interval = (large_intensity - low_intensity)/num_interval;
 80008a0:	68fa      	ldr	r2, [r7, #12]
 80008a2:	693b      	ldr	r3, [r7, #16]
 80008a4:	1ad2      	subs	r2, r2, r3
 80008a6:	7afb      	ldrb	r3, [r7, #11]
 80008a8:	fbb2 f3f3 	udiv	r3, r2, r3
 80008ac:	607b      	str	r3, [r7, #4]
	GPIO_PinState current_state = GPIO_PIN_RESET;
 80008ae:	2300      	movs	r3, #0
 80008b0:	77fb      	strb	r3, [r7, #31]


	HAL_ADC_Start(&hadc2);
 80008b2:	4860      	ldr	r0, [pc, #384]	; (8000a34 <main+0x1d8>)
 80008b4:	f000 fd76 	bl	80013a4 <HAL_ADC_Start>
	while (1) {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

		if ((current_state == GPIO_PIN_RESET)
 80008b8:	7ffb      	ldrb	r3, [r7, #31]
 80008ba:	2b00      	cmp	r3, #0
 80008bc:	d109      	bne.n	80008d2 <main+0x76>
				&& (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13) == GPIO_PIN_SET)) {
 80008be:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80008c2:	485d      	ldr	r0, [pc, #372]	; (8000a38 <main+0x1dc>)
 80008c4:	f001 fbe6 	bl	8002094 <HAL_GPIO_ReadPin>
 80008c8:	4603      	mov	r3, r0
 80008ca:	2b01      	cmp	r3, #1
 80008cc:	d101      	bne.n	80008d2 <main+0x76>
			current_state = GPIO_PIN_SET;
 80008ce:	2301      	movs	r3, #1
 80008d0:	77fb      	strb	r3, [r7, #31]
		}
		if ((current_state == GPIO_PIN_SET)
 80008d2:	7ffb      	ldrb	r3, [r7, #31]
 80008d4:	2b01      	cmp	r3, #1
 80008d6:	d11f      	bne.n	8000918 <main+0xbc>
				&& (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13) == GPIO_PIN_RESET)) {
 80008d8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80008dc:	4856      	ldr	r0, [pc, #344]	; (8000a38 <main+0x1dc>)
 80008de:	f001 fbd9 	bl	8002094 <HAL_GPIO_ReadPin>
 80008e2:	4603      	mov	r3, r0
 80008e4:	2b00      	cmp	r3, #0
 80008e6:	d117      	bne.n	8000918 <main+0xbc>
			//LCD_Clear(100, 15, 150, 30, WHITE);
			current_state = GPIO_PIN_RESET;
 80008e8:	2300      	movs	r3, #0
 80008ea:	77fb      	strb	r3, [r7, #31]
			HAL_ADC_Start(&hadc1);
 80008ec:	4850      	ldr	r0, [pc, #320]	; (8000a30 <main+0x1d4>)
 80008ee:	f000 fd59 	bl	80013a4 <HAL_ADC_Start>
			HAL_ADC_PollForConversion(&hadc1, 1000);
 80008f2:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80008f6:	484e      	ldr	r0, [pc, #312]	; (8000a30 <main+0x1d4>)
 80008f8:	f000 fe02 	bl	8001500 <HAL_ADC_PollForConversion>
			value1 = HAL_ADC_GetValue(&hadc1);
 80008fc:	484c      	ldr	r0, [pc, #304]	; (8000a30 <main+0x1d4>)
 80008fe:	f000 ff05 	bl	800170c <HAL_ADC_GetValue>
 8000902:	61b8      	str	r0, [r7, #24]
			LCD_DrawValue(100, 15, (value1)); //dec
 8000904:	69ba      	ldr	r2, [r7, #24]
 8000906:	210f      	movs	r1, #15
 8000908:	2064      	movs	r0, #100	; 0x64
 800090a:	f7ff ff2f 	bl	800076c <LCD_DrawValue>
			LCD_DrawValueHex(150, 15, (value1)); //hex
 800090e:	69ba      	ldr	r2, [r7, #24]
 8000910:	210f      	movs	r1, #15
 8000912:	2096      	movs	r0, #150	; 0x96
 8000914:	f7ff ff66 	bl	80007e4 <LCD_DrawValueHex>
		}

		value2 = HAL_ADC_GetValue(&hadc2);
 8000918:	4846      	ldr	r0, [pc, #280]	; (8000a34 <main+0x1d8>)
 800091a:	f000 fef7 	bl	800170c <HAL_ADC_GetValue>
 800091e:	6178      	str	r0, [r7, #20]
		LCD_DrawValue(100, 40, (value2));
 8000920:	697a      	ldr	r2, [r7, #20]
 8000922:	2128      	movs	r1, #40	; 0x28
 8000924:	2064      	movs	r0, #100	; 0x64
 8000926:	f7ff ff21 	bl	800076c <LCD_DrawValue>
		LCD_DrawValueHex(150, 40, (value2));
 800092a:	697a      	ldr	r2, [r7, #20]
 800092c:	2128      	movs	r1, #40	; 0x28
 800092e:	2096      	movs	r0, #150	; 0x96
 8000930:	f7ff ff58 	bl	80007e4 <LCD_DrawValueHex>

		LCD_DrawString(100, 0, "DEC");
 8000934:	4a41      	ldr	r2, [pc, #260]	; (8000a3c <main+0x1e0>)
 8000936:	2100      	movs	r1, #0
 8000938:	2064      	movs	r0, #100	; 0x64
 800093a:	f7ff fee7 	bl	800070c <LCD_DrawString>
		LCD_DrawString(150, 0, "HEX");
 800093e:	4a40      	ldr	r2, [pc, #256]	; (8000a40 <main+0x1e4>)
 8000940:	2100      	movs	r1, #0
 8000942:	2096      	movs	r0, #150	; 0x96
 8000944:	f7ff fee2 	bl	800070c <LCD_DrawString>
		LCD_DrawString(0, 15, "ADC1 Value: ");
 8000948:	4a3e      	ldr	r2, [pc, #248]	; (8000a44 <main+0x1e8>)
 800094a:	210f      	movs	r1, #15
 800094c:	2000      	movs	r0, #0
 800094e:	f7ff fedd 	bl	800070c <LCD_DrawString>
		LCD_DrawString(0, 40, "ADC2 Value: ");
 8000952:	4a3d      	ldr	r2, [pc, #244]	; (8000a48 <main+0x1ec>)
 8000954:	2128      	movs	r1, #40	; 0x28
 8000956:	2000      	movs	r0, #0
 8000958:	f7ff fed8 	bl	800070c <LCD_DrawString>


		if(value2<250+interval*1){
 800095c:	687b      	ldr	r3, [r7, #4]
 800095e:	33fa      	adds	r3, #250	; 0xfa
 8000960:	697a      	ldr	r2, [r7, #20]
 8000962:	429a      	cmp	r2, r3
 8000964:	d20f      	bcs.n	8000986 <main+0x12a>
							HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_SET); // R
 8000966:	2201      	movs	r2, #1
 8000968:	2120      	movs	r1, #32
 800096a:	4838      	ldr	r0, [pc, #224]	; (8000a4c <main+0x1f0>)
 800096c:	f001 fba9 	bl	80020c2 <HAL_GPIO_WritePin>
							HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_SET); // G
 8000970:	2201      	movs	r2, #1
 8000972:	2101      	movs	r1, #1
 8000974:	4835      	ldr	r0, [pc, #212]	; (8000a4c <main+0x1f0>)
 8000976:	f001 fba4 	bl	80020c2 <HAL_GPIO_WritePin>
							HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_SET); // B
 800097a:	2201      	movs	r2, #1
 800097c:	2102      	movs	r1, #2
 800097e:	4833      	ldr	r0, [pc, #204]	; (8000a4c <main+0x1f0>)
 8000980:	f001 fb9f 	bl	80020c2 <HAL_GPIO_WritePin>
 8000984:	e798      	b.n	80008b8 <main+0x5c>
				}
				else if(value2<250+interval*2){
 8000986:	687b      	ldr	r3, [r7, #4]
 8000988:	337d      	adds	r3, #125	; 0x7d
 800098a:	005b      	lsls	r3, r3, #1
 800098c:	697a      	ldr	r2, [r7, #20]
 800098e:	429a      	cmp	r2, r3
 8000990:	d20f      	bcs.n	80009b2 <main+0x156>
							HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_SET); // R
 8000992:	2201      	movs	r2, #1
 8000994:	2120      	movs	r1, #32
 8000996:	482d      	ldr	r0, [pc, #180]	; (8000a4c <main+0x1f0>)
 8000998:	f001 fb93 	bl	80020c2 <HAL_GPIO_WritePin>
							HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_SET); // G
 800099c:	2201      	movs	r2, #1
 800099e:	2101      	movs	r1, #1
 80009a0:	482a      	ldr	r0, [pc, #168]	; (8000a4c <main+0x1f0>)
 80009a2:	f001 fb8e 	bl	80020c2 <HAL_GPIO_WritePin>
							HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_RESET); // B
 80009a6:	2200      	movs	r2, #0
 80009a8:	2102      	movs	r1, #2
 80009aa:	4828      	ldr	r0, [pc, #160]	; (8000a4c <main+0x1f0>)
 80009ac:	f001 fb89 	bl	80020c2 <HAL_GPIO_WritePin>
 80009b0:	e782      	b.n	80008b8 <main+0x5c>
				}
				else if(value2<250+interval*3){
 80009b2:	687a      	ldr	r2, [r7, #4]
 80009b4:	4613      	mov	r3, r2
 80009b6:	005b      	lsls	r3, r3, #1
 80009b8:	4413      	add	r3, r2
 80009ba:	33fa      	adds	r3, #250	; 0xfa
 80009bc:	697a      	ldr	r2, [r7, #20]
 80009be:	429a      	cmp	r2, r3
 80009c0:	d20f      	bcs.n	80009e2 <main+0x186>
							HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_SET); // R
 80009c2:	2201      	movs	r2, #1
 80009c4:	2120      	movs	r1, #32
 80009c6:	4821      	ldr	r0, [pc, #132]	; (8000a4c <main+0x1f0>)
 80009c8:	f001 fb7b 	bl	80020c2 <HAL_GPIO_WritePin>
							HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET); // G
 80009cc:	2200      	movs	r2, #0
 80009ce:	2101      	movs	r1, #1
 80009d0:	481e      	ldr	r0, [pc, #120]	; (8000a4c <main+0x1f0>)
 80009d2:	f001 fb76 	bl	80020c2 <HAL_GPIO_WritePin>
							HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_SET); // B
 80009d6:	2201      	movs	r2, #1
 80009d8:	2102      	movs	r1, #2
 80009da:	481c      	ldr	r0, [pc, #112]	; (8000a4c <main+0x1f0>)
 80009dc:	f001 fb71 	bl	80020c2 <HAL_GPIO_WritePin>
 80009e0:	e76a      	b.n	80008b8 <main+0x5c>
				}
				else if(value2<250+interval*4){
 80009e2:	687b      	ldr	r3, [r7, #4]
 80009e4:	009b      	lsls	r3, r3, #2
 80009e6:	33fa      	adds	r3, #250	; 0xfa
 80009e8:	697a      	ldr	r2, [r7, #20]
 80009ea:	429a      	cmp	r2, r3
 80009ec:	d20f      	bcs.n	8000a0e <main+0x1b2>
							HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_RESET); // R
 80009ee:	2200      	movs	r2, #0
 80009f0:	2120      	movs	r1, #32
 80009f2:	4816      	ldr	r0, [pc, #88]	; (8000a4c <main+0x1f0>)
 80009f4:	f001 fb65 	bl	80020c2 <HAL_GPIO_WritePin>
							HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_SET); // G
 80009f8:	2201      	movs	r2, #1
 80009fa:	2101      	movs	r1, #1
 80009fc:	4813      	ldr	r0, [pc, #76]	; (8000a4c <main+0x1f0>)
 80009fe:	f001 fb60 	bl	80020c2 <HAL_GPIO_WritePin>
							HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_SET); // B
 8000a02:	2201      	movs	r2, #1
 8000a04:	2102      	movs	r1, #2
 8000a06:	4811      	ldr	r0, [pc, #68]	; (8000a4c <main+0x1f0>)
 8000a08:	f001 fb5b 	bl	80020c2 <HAL_GPIO_WritePin>
 8000a0c:	e754      	b.n	80008b8 <main+0x5c>
				}
				else{
							HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_RESET); // R
 8000a0e:	2200      	movs	r2, #0
 8000a10:	2120      	movs	r1, #32
 8000a12:	480e      	ldr	r0, [pc, #56]	; (8000a4c <main+0x1f0>)
 8000a14:	f001 fb55 	bl	80020c2 <HAL_GPIO_WritePin>
							HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET); // G
 8000a18:	2200      	movs	r2, #0
 8000a1a:	2101      	movs	r1, #1
 8000a1c:	480b      	ldr	r0, [pc, #44]	; (8000a4c <main+0x1f0>)
 8000a1e:	f001 fb50 	bl	80020c2 <HAL_GPIO_WritePin>
							HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_RESET); // B
 8000a22:	2200      	movs	r2, #0
 8000a24:	2102      	movs	r1, #2
 8000a26:	4809      	ldr	r0, [pc, #36]	; (8000a4c <main+0x1f0>)
 8000a28:	f001 fb4b 	bl	80020c2 <HAL_GPIO_WritePin>
		if ((current_state == GPIO_PIN_RESET)
 8000a2c:	e744      	b.n	80008b8 <main+0x5c>
 8000a2e:	bf00      	nop
 8000a30:	2000008c 	.word	0x2000008c
 8000a34:	200000bc 	.word	0x200000bc
 8000a38:	40011000 	.word	0x40011000
 8000a3c:	080037fc 	.word	0x080037fc
 8000a40:	08003800 	.word	0x08003800
 8000a44:	08003804 	.word	0x08003804
 8000a48:	08003814 	.word	0x08003814
 8000a4c:	40010c00 	.word	0x40010c00

08000a50 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000a50:	b580      	push	{r7, lr}
 8000a52:	b096      	sub	sp, #88	; 0x58
 8000a54:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000a56:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000a5a:	2228      	movs	r2, #40	; 0x28
 8000a5c:	2100      	movs	r1, #0
 8000a5e:	4618      	mov	r0, r3
 8000a60:	f002 fa36 	bl	8002ed0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000a64:	f107 031c 	add.w	r3, r7, #28
 8000a68:	2200      	movs	r2, #0
 8000a6a:	601a      	str	r2, [r3, #0]
 8000a6c:	605a      	str	r2, [r3, #4]
 8000a6e:	609a      	str	r2, [r3, #8]
 8000a70:	60da      	str	r2, [r3, #12]
 8000a72:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000a74:	1d3b      	adds	r3, r7, #4
 8000a76:	2200      	movs	r2, #0
 8000a78:	601a      	str	r2, [r3, #0]
 8000a7a:	605a      	str	r2, [r3, #4]
 8000a7c:	609a      	str	r2, [r3, #8]
 8000a7e:	60da      	str	r2, [r3, #12]
 8000a80:	611a      	str	r2, [r3, #16]
 8000a82:	615a      	str	r2, [r3, #20]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000a84:	2301      	movs	r3, #1
 8000a86:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000a88:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000a8c:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000a8e:	2300      	movs	r3, #0
 8000a90:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000a92:	2301      	movs	r3, #1
 8000a94:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000a96:	2302      	movs	r3, #2
 8000a98:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000a9a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000a9e:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000aa0:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000aa4:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000aa6:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000aaa:	4618      	mov	r0, r3
 8000aac:	f001 fb22 	bl	80020f4 <HAL_RCC_OscConfig>
 8000ab0:	4603      	mov	r3, r0
 8000ab2:	2b00      	cmp	r3, #0
 8000ab4:	d001      	beq.n	8000aba <SystemClock_Config+0x6a>
  {
    Error_Handler();
 8000ab6:	f000 f9b3 	bl	8000e20 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000aba:	230f      	movs	r3, #15
 8000abc:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000abe:	2302      	movs	r3, #2
 8000ac0:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000ac2:	2300      	movs	r3, #0
 8000ac4:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000ac6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000aca:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000acc:	2300      	movs	r3, #0
 8000ace:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000ad0:	f107 031c 	add.w	r3, r7, #28
 8000ad4:	2102      	movs	r1, #2
 8000ad6:	4618      	mov	r0, r3
 8000ad8:	f001 fd8e 	bl	80025f8 <HAL_RCC_ClockConfig>
 8000adc:	4603      	mov	r3, r0
 8000ade:	2b00      	cmp	r3, #0
 8000ae0:	d001      	beq.n	8000ae6 <SystemClock_Config+0x96>
  {
    Error_Handler();
 8000ae2:	f000 f99d 	bl	8000e20 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000ae6:	2302      	movs	r3, #2
 8000ae8:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 8000aea:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000aee:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000af0:	1d3b      	adds	r3, r7, #4
 8000af2:	4618      	mov	r0, r3
 8000af4:	f001 ff04 	bl	8002900 <HAL_RCCEx_PeriphCLKConfig>
 8000af8:	4603      	mov	r3, r0
 8000afa:	2b00      	cmp	r3, #0
 8000afc:	d001      	beq.n	8000b02 <SystemClock_Config+0xb2>
  {
    Error_Handler();
 8000afe:	f000 f98f 	bl	8000e20 <Error_Handler>
  }
}
 8000b02:	bf00      	nop
 8000b04:	3758      	adds	r7, #88	; 0x58
 8000b06:	46bd      	mov	sp, r7
 8000b08:	bd80      	pop	{r7, pc}
	...

08000b0c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000b0c:	b580      	push	{r7, lr}
 8000b0e:	b084      	sub	sp, #16
 8000b10:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000b12:	1d3b      	adds	r3, r7, #4
 8000b14:	2200      	movs	r2, #0
 8000b16:	601a      	str	r2, [r3, #0]
 8000b18:	605a      	str	r2, [r3, #4]
 8000b1a:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000b1c:	4b18      	ldr	r3, [pc, #96]	; (8000b80 <MX_ADC1_Init+0x74>)
 8000b1e:	4a19      	ldr	r2, [pc, #100]	; (8000b84 <MX_ADC1_Init+0x78>)
 8000b20:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000b22:	4b17      	ldr	r3, [pc, #92]	; (8000b80 <MX_ADC1_Init+0x74>)
 8000b24:	2200      	movs	r2, #0
 8000b26:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000b28:	4b15      	ldr	r3, [pc, #84]	; (8000b80 <MX_ADC1_Init+0x74>)
 8000b2a:	2200      	movs	r2, #0
 8000b2c:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000b2e:	4b14      	ldr	r3, [pc, #80]	; (8000b80 <MX_ADC1_Init+0x74>)
 8000b30:	2200      	movs	r2, #0
 8000b32:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000b34:	4b12      	ldr	r3, [pc, #72]	; (8000b80 <MX_ADC1_Init+0x74>)
 8000b36:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8000b3a:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000b3c:	4b10      	ldr	r3, [pc, #64]	; (8000b80 <MX_ADC1_Init+0x74>)
 8000b3e:	2200      	movs	r2, #0
 8000b40:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 8000b42:	4b0f      	ldr	r3, [pc, #60]	; (8000b80 <MX_ADC1_Init+0x74>)
 8000b44:	2201      	movs	r2, #1
 8000b46:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000b48:	480d      	ldr	r0, [pc, #52]	; (8000b80 <MX_ADC1_Init+0x74>)
 8000b4a:	f000 fb41 	bl	80011d0 <HAL_ADC_Init>
 8000b4e:	4603      	mov	r3, r0
 8000b50:	2b00      	cmp	r3, #0
 8000b52:	d001      	beq.n	8000b58 <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 8000b54:	f000 f964 	bl	8000e20 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8000b58:	2303      	movs	r3, #3
 8000b5a:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000b5c:	2301      	movs	r3, #1
 8000b5e:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_55CYCLES_5;
 8000b60:	2305      	movs	r3, #5
 8000b62:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000b64:	1d3b      	adds	r3, r7, #4
 8000b66:	4619      	mov	r1, r3
 8000b68:	4805      	ldr	r0, [pc, #20]	; (8000b80 <MX_ADC1_Init+0x74>)
 8000b6a:	f000 fddb 	bl	8001724 <HAL_ADC_ConfigChannel>
 8000b6e:	4603      	mov	r3, r0
 8000b70:	2b00      	cmp	r3, #0
 8000b72:	d001      	beq.n	8000b78 <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 8000b74:	f000 f954 	bl	8000e20 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000b78:	bf00      	nop
 8000b7a:	3710      	adds	r7, #16
 8000b7c:	46bd      	mov	sp, r7
 8000b7e:	bd80      	pop	{r7, pc}
 8000b80:	2000008c 	.word	0x2000008c
 8000b84:	40012400 	.word	0x40012400

08000b88 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8000b88:	b580      	push	{r7, lr}
 8000b8a:	b084      	sub	sp, #16
 8000b8c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000b8e:	1d3b      	adds	r3, r7, #4
 8000b90:	2200      	movs	r2, #0
 8000b92:	601a      	str	r2, [r3, #0]
 8000b94:	605a      	str	r2, [r3, #4]
 8000b96:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 8000b98:	4b18      	ldr	r3, [pc, #96]	; (8000bfc <MX_ADC2_Init+0x74>)
 8000b9a:	4a19      	ldr	r2, [pc, #100]	; (8000c00 <MX_ADC2_Init+0x78>)
 8000b9c:	601a      	str	r2, [r3, #0]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000b9e:	4b17      	ldr	r3, [pc, #92]	; (8000bfc <MX_ADC2_Init+0x74>)
 8000ba0:	2200      	movs	r2, #0
 8000ba2:	609a      	str	r2, [r3, #8]
  hadc2.Init.ContinuousConvMode = ENABLE;
 8000ba4:	4b15      	ldr	r3, [pc, #84]	; (8000bfc <MX_ADC2_Init+0x74>)
 8000ba6:	2201      	movs	r2, #1
 8000ba8:	731a      	strb	r2, [r3, #12]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8000baa:	4b14      	ldr	r3, [pc, #80]	; (8000bfc <MX_ADC2_Init+0x74>)
 8000bac:	2200      	movs	r2, #0
 8000bae:	751a      	strb	r2, [r3, #20]
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000bb0:	4b12      	ldr	r3, [pc, #72]	; (8000bfc <MX_ADC2_Init+0x74>)
 8000bb2:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8000bb6:	61da      	str	r2, [r3, #28]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000bb8:	4b10      	ldr	r3, [pc, #64]	; (8000bfc <MX_ADC2_Init+0x74>)
 8000bba:	2200      	movs	r2, #0
 8000bbc:	605a      	str	r2, [r3, #4]
  hadc2.Init.NbrOfConversion = 1;
 8000bbe:	4b0f      	ldr	r3, [pc, #60]	; (8000bfc <MX_ADC2_Init+0x74>)
 8000bc0:	2201      	movs	r2, #1
 8000bc2:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8000bc4:	480d      	ldr	r0, [pc, #52]	; (8000bfc <MX_ADC2_Init+0x74>)
 8000bc6:	f000 fb03 	bl	80011d0 <HAL_ADC_Init>
 8000bca:	4603      	mov	r3, r0
 8000bcc:	2b00      	cmp	r3, #0
 8000bce:	d001      	beq.n	8000bd4 <MX_ADC2_Init+0x4c>
  {
    Error_Handler();
 8000bd0:	f000 f926 	bl	8000e20 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8000bd4:	2303      	movs	r3, #3
 8000bd6:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000bd8:	2301      	movs	r3, #1
 8000bda:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_55CYCLES_5;
 8000bdc:	2305      	movs	r3, #5
 8000bde:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000be0:	1d3b      	adds	r3, r7, #4
 8000be2:	4619      	mov	r1, r3
 8000be4:	4805      	ldr	r0, [pc, #20]	; (8000bfc <MX_ADC2_Init+0x74>)
 8000be6:	f000 fd9d 	bl	8001724 <HAL_ADC_ConfigChannel>
 8000bea:	4603      	mov	r3, r0
 8000bec:	2b00      	cmp	r3, #0
 8000bee:	d001      	beq.n	8000bf4 <MX_ADC2_Init+0x6c>
  {
    Error_Handler();
 8000bf0:	f000 f916 	bl	8000e20 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8000bf4:	bf00      	nop
 8000bf6:	3710      	adds	r7, #16
 8000bf8:	46bd      	mov	sp, r7
 8000bfa:	bd80      	pop	{r7, pc}
 8000bfc:	200000bc 	.word	0x200000bc
 8000c00:	40012800 	.word	0x40012800

08000c04 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000c04:	b580      	push	{r7, lr}
 8000c06:	b08a      	sub	sp, #40	; 0x28
 8000c08:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c0a:	f107 0318 	add.w	r3, r7, #24
 8000c0e:	2200      	movs	r2, #0
 8000c10:	601a      	str	r2, [r3, #0]
 8000c12:	605a      	str	r2, [r3, #4]
 8000c14:	609a      	str	r2, [r3, #8]
 8000c16:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c18:	4b49      	ldr	r3, [pc, #292]	; (8000d40 <MX_GPIO_Init+0x13c>)
 8000c1a:	699b      	ldr	r3, [r3, #24]
 8000c1c:	4a48      	ldr	r2, [pc, #288]	; (8000d40 <MX_GPIO_Init+0x13c>)
 8000c1e:	f043 0310 	orr.w	r3, r3, #16
 8000c22:	6193      	str	r3, [r2, #24]
 8000c24:	4b46      	ldr	r3, [pc, #280]	; (8000d40 <MX_GPIO_Init+0x13c>)
 8000c26:	699b      	ldr	r3, [r3, #24]
 8000c28:	f003 0310 	and.w	r3, r3, #16
 8000c2c:	617b      	str	r3, [r7, #20]
 8000c2e:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c30:	4b43      	ldr	r3, [pc, #268]	; (8000d40 <MX_GPIO_Init+0x13c>)
 8000c32:	699b      	ldr	r3, [r3, #24]
 8000c34:	4a42      	ldr	r2, [pc, #264]	; (8000d40 <MX_GPIO_Init+0x13c>)
 8000c36:	f043 0304 	orr.w	r3, r3, #4
 8000c3a:	6193      	str	r3, [r2, #24]
 8000c3c:	4b40      	ldr	r3, [pc, #256]	; (8000d40 <MX_GPIO_Init+0x13c>)
 8000c3e:	699b      	ldr	r3, [r3, #24]
 8000c40:	f003 0304 	and.w	r3, r3, #4
 8000c44:	613b      	str	r3, [r7, #16]
 8000c46:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c48:	4b3d      	ldr	r3, [pc, #244]	; (8000d40 <MX_GPIO_Init+0x13c>)
 8000c4a:	699b      	ldr	r3, [r3, #24]
 8000c4c:	4a3c      	ldr	r2, [pc, #240]	; (8000d40 <MX_GPIO_Init+0x13c>)
 8000c4e:	f043 0308 	orr.w	r3, r3, #8
 8000c52:	6193      	str	r3, [r2, #24]
 8000c54:	4b3a      	ldr	r3, [pc, #232]	; (8000d40 <MX_GPIO_Init+0x13c>)
 8000c56:	699b      	ldr	r3, [r3, #24]
 8000c58:	f003 0308 	and.w	r3, r3, #8
 8000c5c:	60fb      	str	r3, [r7, #12]
 8000c5e:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000c60:	4b37      	ldr	r3, [pc, #220]	; (8000d40 <MX_GPIO_Init+0x13c>)
 8000c62:	699b      	ldr	r3, [r3, #24]
 8000c64:	4a36      	ldr	r2, [pc, #216]	; (8000d40 <MX_GPIO_Init+0x13c>)
 8000c66:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000c6a:	6193      	str	r3, [r2, #24]
 8000c6c:	4b34      	ldr	r3, [pc, #208]	; (8000d40 <MX_GPIO_Init+0x13c>)
 8000c6e:	699b      	ldr	r3, [r3, #24]
 8000c70:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000c74:	60bb      	str	r3, [r7, #8]
 8000c76:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000c78:	4b31      	ldr	r3, [pc, #196]	; (8000d40 <MX_GPIO_Init+0x13c>)
 8000c7a:	699b      	ldr	r3, [r3, #24]
 8000c7c:	4a30      	ldr	r2, [pc, #192]	; (8000d40 <MX_GPIO_Init+0x13c>)
 8000c7e:	f043 0320 	orr.w	r3, r3, #32
 8000c82:	6193      	str	r3, [r2, #24]
 8000c84:	4b2e      	ldr	r3, [pc, #184]	; (8000d40 <MX_GPIO_Init+0x13c>)
 8000c86:	699b      	ldr	r3, [r3, #24]
 8000c88:	f003 0320 	and.w	r3, r3, #32
 8000c8c:	607b      	str	r3, [r7, #4]
 8000c8e:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_5, GPIO_PIN_SET);
 8000c90:	2201      	movs	r2, #1
 8000c92:	2123      	movs	r1, #35	; 0x23
 8000c94:	482b      	ldr	r0, [pc, #172]	; (8000d44 <MX_GPIO_Init+0x140>)
 8000c96:	f001 fa14 	bl	80020c2 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_RESET);
 8000c9a:	2200      	movs	r2, #0
 8000c9c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000ca0:	4829      	ldr	r0, [pc, #164]	; (8000d48 <MX_GPIO_Init+0x144>)
 8000ca2:	f001 fa0e 	bl	80020c2 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_1, GPIO_PIN_RESET);
 8000ca6:	2200      	movs	r2, #0
 8000ca8:	2102      	movs	r1, #2
 8000caa:	4828      	ldr	r0, [pc, #160]	; (8000d4c <MX_GPIO_Init+0x148>)
 8000cac:	f001 fa09 	bl	80020c2 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000cb0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000cb4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000cb6:	2300      	movs	r3, #0
 8000cb8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cba:	2300      	movs	r3, #0
 8000cbc:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000cbe:	f107 0318 	add.w	r3, r7, #24
 8000cc2:	4619      	mov	r1, r3
 8000cc4:	4822      	ldr	r0, [pc, #136]	; (8000d50 <MX_GPIO_Init+0x14c>)
 8000cc6:	f001 f851 	bl	8001d6c <HAL_GPIO_Init>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000cca:	2301      	movs	r3, #1
 8000ccc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000cce:	2300      	movs	r3, #0
 8000cd0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cd2:	2300      	movs	r3, #0
 8000cd4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cd6:	f107 0318 	add.w	r3, r7, #24
 8000cda:	4619      	mov	r1, r3
 8000cdc:	481d      	ldr	r0, [pc, #116]	; (8000d54 <MX_GPIO_Init+0x150>)
 8000cde:	f001 f845 	bl	8001d6c <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_5;
 8000ce2:	2323      	movs	r3, #35	; 0x23
 8000ce4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ce6:	2301      	movs	r3, #1
 8000ce8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cea:	2300      	movs	r3, #0
 8000cec:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000cee:	2303      	movs	r3, #3
 8000cf0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000cf2:	f107 0318 	add.w	r3, r7, #24
 8000cf6:	4619      	mov	r1, r3
 8000cf8:	4812      	ldr	r0, [pc, #72]	; (8000d44 <MX_GPIO_Init+0x140>)
 8000cfa:	f001 f837 	bl	8001d6c <HAL_GPIO_Init>

  /*Configure GPIO pin : PD12 */
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 8000cfe:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000d02:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d04:	2301      	movs	r3, #1
 8000d06:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d08:	2300      	movs	r3, #0
 8000d0a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000d0c:	2303      	movs	r3, #3
 8000d0e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000d10:	f107 0318 	add.w	r3, r7, #24
 8000d14:	4619      	mov	r1, r3
 8000d16:	480c      	ldr	r0, [pc, #48]	; (8000d48 <MX_GPIO_Init+0x144>)
 8000d18:	f001 f828 	bl	8001d6c <HAL_GPIO_Init>

  /*Configure GPIO pin : PE1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000d1c:	2302      	movs	r3, #2
 8000d1e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d20:	2301      	movs	r3, #1
 8000d22:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d24:	2300      	movs	r3, #0
 8000d26:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000d28:	2303      	movs	r3, #3
 8000d2a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000d2c:	f107 0318 	add.w	r3, r7, #24
 8000d30:	4619      	mov	r1, r3
 8000d32:	4806      	ldr	r0, [pc, #24]	; (8000d4c <MX_GPIO_Init+0x148>)
 8000d34:	f001 f81a 	bl	8001d6c <HAL_GPIO_Init>

}
 8000d38:	bf00      	nop
 8000d3a:	3728      	adds	r7, #40	; 0x28
 8000d3c:	46bd      	mov	sp, r7
 8000d3e:	bd80      	pop	{r7, pc}
 8000d40:	40021000 	.word	0x40021000
 8000d44:	40010c00 	.word	0x40010c00
 8000d48:	40011400 	.word	0x40011400
 8000d4c:	40011800 	.word	0x40011800
 8000d50:	40011000 	.word	0x40011000
 8000d54:	40010800 	.word	0x40010800

08000d58 <MX_FSMC_Init>:

/* FSMC initialization function */
static void MX_FSMC_Init(void)
{
 8000d58:	b580      	push	{r7, lr}
 8000d5a:	b088      	sub	sp, #32
 8000d5c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN FSMC_Init 0 */

  /* USER CODE END FSMC_Init 0 */

  FSMC_NORSRAM_TimingTypeDef Timing = {0};
 8000d5e:	1d3b      	adds	r3, r7, #4
 8000d60:	2200      	movs	r2, #0
 8000d62:	601a      	str	r2, [r3, #0]
 8000d64:	605a      	str	r2, [r3, #4]
 8000d66:	609a      	str	r2, [r3, #8]
 8000d68:	60da      	str	r2, [r3, #12]
 8000d6a:	611a      	str	r2, [r3, #16]
 8000d6c:	615a      	str	r2, [r3, #20]
 8000d6e:	619a      	str	r2, [r3, #24]

  /* USER CODE END FSMC_Init 1 */

  /** Perform the SRAM1 memory initialization sequence
  */
  hsram1.Instance = FSMC_NORSRAM_DEVICE;
 8000d70:	4b28      	ldr	r3, [pc, #160]	; (8000e14 <MX_FSMC_Init+0xbc>)
 8000d72:	f04f 4220 	mov.w	r2, #2684354560	; 0xa0000000
 8000d76:	601a      	str	r2, [r3, #0]
  hsram1.Extended = FSMC_NORSRAM_EXTENDED_DEVICE;
 8000d78:	4b26      	ldr	r3, [pc, #152]	; (8000e14 <MX_FSMC_Init+0xbc>)
 8000d7a:	4a27      	ldr	r2, [pc, #156]	; (8000e18 <MX_FSMC_Init+0xc0>)
 8000d7c:	605a      	str	r2, [r3, #4]
  /* hsram1.Init */
  hsram1.Init.NSBank = FSMC_NORSRAM_BANK1;
 8000d7e:	4b25      	ldr	r3, [pc, #148]	; (8000e14 <MX_FSMC_Init+0xbc>)
 8000d80:	2200      	movs	r2, #0
 8000d82:	609a      	str	r2, [r3, #8]
  hsram1.Init.DataAddressMux = FSMC_DATA_ADDRESS_MUX_DISABLE;
 8000d84:	4b23      	ldr	r3, [pc, #140]	; (8000e14 <MX_FSMC_Init+0xbc>)
 8000d86:	2200      	movs	r2, #0
 8000d88:	60da      	str	r2, [r3, #12]
  hsram1.Init.MemoryType = FSMC_MEMORY_TYPE_SRAM;
 8000d8a:	4b22      	ldr	r3, [pc, #136]	; (8000e14 <MX_FSMC_Init+0xbc>)
 8000d8c:	2200      	movs	r2, #0
 8000d8e:	611a      	str	r2, [r3, #16]
  hsram1.Init.MemoryDataWidth = FSMC_NORSRAM_MEM_BUS_WIDTH_16;
 8000d90:	4b20      	ldr	r3, [pc, #128]	; (8000e14 <MX_FSMC_Init+0xbc>)
 8000d92:	2210      	movs	r2, #16
 8000d94:	615a      	str	r2, [r3, #20]
  hsram1.Init.BurstAccessMode = FSMC_BURST_ACCESS_MODE_DISABLE;
 8000d96:	4b1f      	ldr	r3, [pc, #124]	; (8000e14 <MX_FSMC_Init+0xbc>)
 8000d98:	2200      	movs	r2, #0
 8000d9a:	619a      	str	r2, [r3, #24]
  hsram1.Init.WaitSignalPolarity = FSMC_WAIT_SIGNAL_POLARITY_LOW;
 8000d9c:	4b1d      	ldr	r3, [pc, #116]	; (8000e14 <MX_FSMC_Init+0xbc>)
 8000d9e:	2200      	movs	r2, #0
 8000da0:	61da      	str	r2, [r3, #28]
  hsram1.Init.WrapMode = FSMC_WRAP_MODE_DISABLE;
 8000da2:	4b1c      	ldr	r3, [pc, #112]	; (8000e14 <MX_FSMC_Init+0xbc>)
 8000da4:	2200      	movs	r2, #0
 8000da6:	621a      	str	r2, [r3, #32]
  hsram1.Init.WaitSignalActive = FSMC_WAIT_TIMING_BEFORE_WS;
 8000da8:	4b1a      	ldr	r3, [pc, #104]	; (8000e14 <MX_FSMC_Init+0xbc>)
 8000daa:	2200      	movs	r2, #0
 8000dac:	625a      	str	r2, [r3, #36]	; 0x24
  hsram1.Init.WriteOperation = FSMC_WRITE_OPERATION_ENABLE;
 8000dae:	4b19      	ldr	r3, [pc, #100]	; (8000e14 <MX_FSMC_Init+0xbc>)
 8000db0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000db4:	629a      	str	r2, [r3, #40]	; 0x28
  hsram1.Init.WaitSignal = FSMC_WAIT_SIGNAL_DISABLE;
 8000db6:	4b17      	ldr	r3, [pc, #92]	; (8000e14 <MX_FSMC_Init+0xbc>)
 8000db8:	2200      	movs	r2, #0
 8000dba:	62da      	str	r2, [r3, #44]	; 0x2c
  hsram1.Init.ExtendedMode = FSMC_EXTENDED_MODE_DISABLE;
 8000dbc:	4b15      	ldr	r3, [pc, #84]	; (8000e14 <MX_FSMC_Init+0xbc>)
 8000dbe:	2200      	movs	r2, #0
 8000dc0:	631a      	str	r2, [r3, #48]	; 0x30
  hsram1.Init.AsynchronousWait = FSMC_ASYNCHRONOUS_WAIT_DISABLE;
 8000dc2:	4b14      	ldr	r3, [pc, #80]	; (8000e14 <MX_FSMC_Init+0xbc>)
 8000dc4:	2200      	movs	r2, #0
 8000dc6:	635a      	str	r2, [r3, #52]	; 0x34
  hsram1.Init.WriteBurst = FSMC_WRITE_BURST_DISABLE;
 8000dc8:	4b12      	ldr	r3, [pc, #72]	; (8000e14 <MX_FSMC_Init+0xbc>)
 8000dca:	2200      	movs	r2, #0
 8000dcc:	639a      	str	r2, [r3, #56]	; 0x38
  /* Timing */
  Timing.AddressSetupTime = 15;
 8000dce:	230f      	movs	r3, #15
 8000dd0:	607b      	str	r3, [r7, #4]
  Timing.AddressHoldTime = 15;
 8000dd2:	230f      	movs	r3, #15
 8000dd4:	60bb      	str	r3, [r7, #8]
  Timing.DataSetupTime = 255;
 8000dd6:	23ff      	movs	r3, #255	; 0xff
 8000dd8:	60fb      	str	r3, [r7, #12]
  Timing.BusTurnAroundDuration = 15;
 8000dda:	230f      	movs	r3, #15
 8000ddc:	613b      	str	r3, [r7, #16]
  Timing.CLKDivision = 16;
 8000dde:	2310      	movs	r3, #16
 8000de0:	617b      	str	r3, [r7, #20]
  Timing.DataLatency = 17;
 8000de2:	2311      	movs	r3, #17
 8000de4:	61bb      	str	r3, [r7, #24]
  Timing.AccessMode = FSMC_ACCESS_MODE_A;
 8000de6:	2300      	movs	r3, #0
 8000de8:	61fb      	str	r3, [r7, #28]
  /* ExtTiming */

  if (HAL_SRAM_Init(&hsram1, &Timing, NULL) != HAL_OK)
 8000dea:	1d3b      	adds	r3, r7, #4
 8000dec:	2200      	movs	r2, #0
 8000dee:	4619      	mov	r1, r3
 8000df0:	4808      	ldr	r0, [pc, #32]	; (8000e14 <MX_FSMC_Init+0xbc>)
 8000df2:	f001 ff1f 	bl	8002c34 <HAL_SRAM_Init>
 8000df6:	4603      	mov	r3, r0
 8000df8:	2b00      	cmp	r3, #0
 8000dfa:	d001      	beq.n	8000e00 <MX_FSMC_Init+0xa8>
  {
    Error_Handler( );
 8000dfc:	f000 f810 	bl	8000e20 <Error_Handler>
  }

  /** Disconnect NADV
  */

  __HAL_AFIO_FSMCNADV_DISCONNECTED();
 8000e00:	4b06      	ldr	r3, [pc, #24]	; (8000e1c <MX_FSMC_Init+0xc4>)
 8000e02:	69db      	ldr	r3, [r3, #28]
 8000e04:	4a05      	ldr	r2, [pc, #20]	; (8000e1c <MX_FSMC_Init+0xc4>)
 8000e06:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000e0a:	61d3      	str	r3, [r2, #28]

  /* USER CODE BEGIN FSMC_Init 2 */

  /* USER CODE END FSMC_Init 2 */
}
 8000e0c:	bf00      	nop
 8000e0e:	3720      	adds	r7, #32
 8000e10:	46bd      	mov	sp, r7
 8000e12:	bd80      	pop	{r7, pc}
 8000e14:	200000ec 	.word	0x200000ec
 8000e18:	a0000104 	.word	0xa0000104
 8000e1c:	40010000 	.word	0x40010000

08000e20 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000e20:	b480      	push	{r7}
 8000e22:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000e24:	b672      	cpsid	i
}
 8000e26:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8000e28:	e7fe      	b.n	8000e28 <Error_Handler+0x8>
	...

08000e2c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000e2c:	b480      	push	{r7}
 8000e2e:	b085      	sub	sp, #20
 8000e30:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000e32:	4b15      	ldr	r3, [pc, #84]	; (8000e88 <HAL_MspInit+0x5c>)
 8000e34:	699b      	ldr	r3, [r3, #24]
 8000e36:	4a14      	ldr	r2, [pc, #80]	; (8000e88 <HAL_MspInit+0x5c>)
 8000e38:	f043 0301 	orr.w	r3, r3, #1
 8000e3c:	6193      	str	r3, [r2, #24]
 8000e3e:	4b12      	ldr	r3, [pc, #72]	; (8000e88 <HAL_MspInit+0x5c>)
 8000e40:	699b      	ldr	r3, [r3, #24]
 8000e42:	f003 0301 	and.w	r3, r3, #1
 8000e46:	60bb      	str	r3, [r7, #8]
 8000e48:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e4a:	4b0f      	ldr	r3, [pc, #60]	; (8000e88 <HAL_MspInit+0x5c>)
 8000e4c:	69db      	ldr	r3, [r3, #28]
 8000e4e:	4a0e      	ldr	r2, [pc, #56]	; (8000e88 <HAL_MspInit+0x5c>)
 8000e50:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000e54:	61d3      	str	r3, [r2, #28]
 8000e56:	4b0c      	ldr	r3, [pc, #48]	; (8000e88 <HAL_MspInit+0x5c>)
 8000e58:	69db      	ldr	r3, [r3, #28]
 8000e5a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e5e:	607b      	str	r3, [r7, #4]
 8000e60:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000e62:	4b0a      	ldr	r3, [pc, #40]	; (8000e8c <HAL_MspInit+0x60>)
 8000e64:	685b      	ldr	r3, [r3, #4]
 8000e66:	60fb      	str	r3, [r7, #12]
 8000e68:	68fb      	ldr	r3, [r7, #12]
 8000e6a:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000e6e:	60fb      	str	r3, [r7, #12]
 8000e70:	68fb      	ldr	r3, [r7, #12]
 8000e72:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000e76:	60fb      	str	r3, [r7, #12]
 8000e78:	4a04      	ldr	r2, [pc, #16]	; (8000e8c <HAL_MspInit+0x60>)
 8000e7a:	68fb      	ldr	r3, [r7, #12]
 8000e7c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000e7e:	bf00      	nop
 8000e80:	3714      	adds	r7, #20
 8000e82:	46bd      	mov	sp, r7
 8000e84:	bc80      	pop	{r7}
 8000e86:	4770      	bx	lr
 8000e88:	40021000 	.word	0x40021000
 8000e8c:	40010000 	.word	0x40010000

08000e90 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000e90:	b580      	push	{r7, lr}
 8000e92:	b08a      	sub	sp, #40	; 0x28
 8000e94:	af00      	add	r7, sp, #0
 8000e96:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e98:	f107 0318 	add.w	r3, r7, #24
 8000e9c:	2200      	movs	r2, #0
 8000e9e:	601a      	str	r2, [r3, #0]
 8000ea0:	605a      	str	r2, [r3, #4]
 8000ea2:	609a      	str	r2, [r3, #8]
 8000ea4:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	681b      	ldr	r3, [r3, #0]
 8000eaa:	4a28      	ldr	r2, [pc, #160]	; (8000f4c <HAL_ADC_MspInit+0xbc>)
 8000eac:	4293      	cmp	r3, r2
 8000eae:	d122      	bne.n	8000ef6 <HAL_ADC_MspInit+0x66>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000eb0:	4b27      	ldr	r3, [pc, #156]	; (8000f50 <HAL_ADC_MspInit+0xc0>)
 8000eb2:	699b      	ldr	r3, [r3, #24]
 8000eb4:	4a26      	ldr	r2, [pc, #152]	; (8000f50 <HAL_ADC_MspInit+0xc0>)
 8000eb6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000eba:	6193      	str	r3, [r2, #24]
 8000ebc:	4b24      	ldr	r3, [pc, #144]	; (8000f50 <HAL_ADC_MspInit+0xc0>)
 8000ebe:	699b      	ldr	r3, [r3, #24]
 8000ec0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000ec4:	617b      	str	r3, [r7, #20]
 8000ec6:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ec8:	4b21      	ldr	r3, [pc, #132]	; (8000f50 <HAL_ADC_MspInit+0xc0>)
 8000eca:	699b      	ldr	r3, [r3, #24]
 8000ecc:	4a20      	ldr	r2, [pc, #128]	; (8000f50 <HAL_ADC_MspInit+0xc0>)
 8000ece:	f043 0304 	orr.w	r3, r3, #4
 8000ed2:	6193      	str	r3, [r2, #24]
 8000ed4:	4b1e      	ldr	r3, [pc, #120]	; (8000f50 <HAL_ADC_MspInit+0xc0>)
 8000ed6:	699b      	ldr	r3, [r3, #24]
 8000ed8:	f003 0304 	and.w	r3, r3, #4
 8000edc:	613b      	str	r3, [r7, #16]
 8000ede:	693b      	ldr	r3, [r7, #16]
    /**ADC1 GPIO Configuration
    PA3     ------> ADC1_IN3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000ee0:	2308      	movs	r3, #8
 8000ee2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000ee4:	2303      	movs	r3, #3
 8000ee6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ee8:	f107 0318 	add.w	r3, r7, #24
 8000eec:	4619      	mov	r1, r3
 8000eee:	4819      	ldr	r0, [pc, #100]	; (8000f54 <HAL_ADC_MspInit+0xc4>)
 8000ef0:	f000 ff3c 	bl	8001d6c <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 8000ef4:	e026      	b.n	8000f44 <HAL_ADC_MspInit+0xb4>
  else if(hadc->Instance==ADC2)
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	681b      	ldr	r3, [r3, #0]
 8000efa:	4a17      	ldr	r2, [pc, #92]	; (8000f58 <HAL_ADC_MspInit+0xc8>)
 8000efc:	4293      	cmp	r3, r2
 8000efe:	d121      	bne.n	8000f44 <HAL_ADC_MspInit+0xb4>
    __HAL_RCC_ADC2_CLK_ENABLE();
 8000f00:	4b13      	ldr	r3, [pc, #76]	; (8000f50 <HAL_ADC_MspInit+0xc0>)
 8000f02:	699b      	ldr	r3, [r3, #24]
 8000f04:	4a12      	ldr	r2, [pc, #72]	; (8000f50 <HAL_ADC_MspInit+0xc0>)
 8000f06:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000f0a:	6193      	str	r3, [r2, #24]
 8000f0c:	4b10      	ldr	r3, [pc, #64]	; (8000f50 <HAL_ADC_MspInit+0xc0>)
 8000f0e:	699b      	ldr	r3, [r3, #24]
 8000f10:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000f14:	60fb      	str	r3, [r7, #12]
 8000f16:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f18:	4b0d      	ldr	r3, [pc, #52]	; (8000f50 <HAL_ADC_MspInit+0xc0>)
 8000f1a:	699b      	ldr	r3, [r3, #24]
 8000f1c:	4a0c      	ldr	r2, [pc, #48]	; (8000f50 <HAL_ADC_MspInit+0xc0>)
 8000f1e:	f043 0304 	orr.w	r3, r3, #4
 8000f22:	6193      	str	r3, [r2, #24]
 8000f24:	4b0a      	ldr	r3, [pc, #40]	; (8000f50 <HAL_ADC_MspInit+0xc0>)
 8000f26:	699b      	ldr	r3, [r3, #24]
 8000f28:	f003 0304 	and.w	r3, r3, #4
 8000f2c:	60bb      	str	r3, [r7, #8]
 8000f2e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000f30:	2308      	movs	r3, #8
 8000f32:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000f34:	2303      	movs	r3, #3
 8000f36:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f38:	f107 0318 	add.w	r3, r7, #24
 8000f3c:	4619      	mov	r1, r3
 8000f3e:	4805      	ldr	r0, [pc, #20]	; (8000f54 <HAL_ADC_MspInit+0xc4>)
 8000f40:	f000 ff14 	bl	8001d6c <HAL_GPIO_Init>
}
 8000f44:	bf00      	nop
 8000f46:	3728      	adds	r7, #40	; 0x28
 8000f48:	46bd      	mov	sp, r7
 8000f4a:	bd80      	pop	{r7, pc}
 8000f4c:	40012400 	.word	0x40012400
 8000f50:	40021000 	.word	0x40021000
 8000f54:	40010800 	.word	0x40010800
 8000f58:	40012800 	.word	0x40012800

08000f5c <HAL_FSMC_MspInit>:

}

static uint32_t FSMC_Initialized = 0;

static void HAL_FSMC_MspInit(void){
 8000f5c:	b580      	push	{r7, lr}
 8000f5e:	b086      	sub	sp, #24
 8000f60:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FSMC_MspInit 0 */

  /* USER CODE END FSMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 8000f62:	f107 0308 	add.w	r3, r7, #8
 8000f66:	2200      	movs	r2, #0
 8000f68:	601a      	str	r2, [r3, #0]
 8000f6a:	605a      	str	r2, [r3, #4]
 8000f6c:	609a      	str	r2, [r3, #8]
 8000f6e:	60da      	str	r2, [r3, #12]
  if (FSMC_Initialized) {
 8000f70:	4b18      	ldr	r3, [pc, #96]	; (8000fd4 <HAL_FSMC_MspInit+0x78>)
 8000f72:	681b      	ldr	r3, [r3, #0]
 8000f74:	2b00      	cmp	r3, #0
 8000f76:	d129      	bne.n	8000fcc <HAL_FSMC_MspInit+0x70>
    return;
  }
  FSMC_Initialized = 1;
 8000f78:	4b16      	ldr	r3, [pc, #88]	; (8000fd4 <HAL_FSMC_MspInit+0x78>)
 8000f7a:	2201      	movs	r2, #1
 8000f7c:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FSMC_CLK_ENABLE();
 8000f7e:	4b16      	ldr	r3, [pc, #88]	; (8000fd8 <HAL_FSMC_MspInit+0x7c>)
 8000f80:	695b      	ldr	r3, [r3, #20]
 8000f82:	4a15      	ldr	r2, [pc, #84]	; (8000fd8 <HAL_FSMC_MspInit+0x7c>)
 8000f84:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000f88:	6153      	str	r3, [r2, #20]
 8000f8a:	4b13      	ldr	r3, [pc, #76]	; (8000fd8 <HAL_FSMC_MspInit+0x7c>)
 8000f8c:	695b      	ldr	r3, [r3, #20]
 8000f8e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000f92:	607b      	str	r3, [r7, #4]
 8000f94:	687b      	ldr	r3, [r7, #4]
  PD1   ------> FSMC_D3
  PD4   ------> FSMC_NOE
  PD5   ------> FSMC_NWE
  PD7   ------> FSMC_NE1
  */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
 8000f96:	f64f 7380 	movw	r3, #65408	; 0xff80
 8000f9a:	60bb      	str	r3, [r7, #8]
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14
                          |GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f9c:	2302      	movs	r3, #2
 8000f9e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000fa0:	2303      	movs	r3, #3
 8000fa2:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000fa4:	f107 0308 	add.w	r3, r7, #8
 8000fa8:	4619      	mov	r1, r3
 8000faa:	480c      	ldr	r0, [pc, #48]	; (8000fdc <HAL_FSMC_MspInit+0x80>)
 8000fac:	f000 fede 	bl	8001d6c <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 8000fb0:	f64c 73b3 	movw	r3, #53171	; 0xcfb3
 8000fb4:	60bb      	str	r3, [r7, #8]
                          |GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fb6:	2302      	movs	r3, #2
 8000fb8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000fba:	2303      	movs	r3, #3
 8000fbc:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000fbe:	f107 0308 	add.w	r3, r7, #8
 8000fc2:	4619      	mov	r1, r3
 8000fc4:	4806      	ldr	r0, [pc, #24]	; (8000fe0 <HAL_FSMC_MspInit+0x84>)
 8000fc6:	f000 fed1 	bl	8001d6c <HAL_GPIO_Init>
 8000fca:	e000      	b.n	8000fce <HAL_FSMC_MspInit+0x72>
    return;
 8000fcc:	bf00      	nop

  /* USER CODE BEGIN FSMC_MspInit 1 */

  /* USER CODE END FSMC_MspInit 1 */
}
 8000fce:	3718      	adds	r7, #24
 8000fd0:	46bd      	mov	sp, r7
 8000fd2:	bd80      	pop	{r7, pc}
 8000fd4:	20000134 	.word	0x20000134
 8000fd8:	40021000 	.word	0x40021000
 8000fdc:	40011800 	.word	0x40011800
 8000fe0:	40011400 	.word	0x40011400

08000fe4 <HAL_SRAM_MspInit>:

void HAL_SRAM_MspInit(SRAM_HandleTypeDef* hsram){
 8000fe4:	b580      	push	{r7, lr}
 8000fe6:	b082      	sub	sp, #8
 8000fe8:	af00      	add	r7, sp, #0
 8000fea:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SRAM_MspInit 0 */

  /* USER CODE END SRAM_MspInit 0 */
  HAL_FSMC_MspInit();
 8000fec:	f7ff ffb6 	bl	8000f5c <HAL_FSMC_MspInit>
  /* USER CODE BEGIN SRAM_MspInit 1 */

  /* USER CODE END SRAM_MspInit 1 */
}
 8000ff0:	bf00      	nop
 8000ff2:	3708      	adds	r7, #8
 8000ff4:	46bd      	mov	sp, r7
 8000ff6:	bd80      	pop	{r7, pc}

08000ff8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ff8:	b480      	push	{r7}
 8000ffa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000ffc:	e7fe      	b.n	8000ffc <NMI_Handler+0x4>

08000ffe <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000ffe:	b480      	push	{r7}
 8001000:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001002:	e7fe      	b.n	8001002 <HardFault_Handler+0x4>

08001004 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001004:	b480      	push	{r7}
 8001006:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001008:	e7fe      	b.n	8001008 <MemManage_Handler+0x4>

0800100a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800100a:	b480      	push	{r7}
 800100c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800100e:	e7fe      	b.n	800100e <BusFault_Handler+0x4>

08001010 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001010:	b480      	push	{r7}
 8001012:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001014:	e7fe      	b.n	8001014 <UsageFault_Handler+0x4>

08001016 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001016:	b480      	push	{r7}
 8001018:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800101a:	bf00      	nop
 800101c:	46bd      	mov	sp, r7
 800101e:	bc80      	pop	{r7}
 8001020:	4770      	bx	lr

08001022 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001022:	b480      	push	{r7}
 8001024:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001026:	bf00      	nop
 8001028:	46bd      	mov	sp, r7
 800102a:	bc80      	pop	{r7}
 800102c:	4770      	bx	lr

0800102e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800102e:	b480      	push	{r7}
 8001030:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001032:	bf00      	nop
 8001034:	46bd      	mov	sp, r7
 8001036:	bc80      	pop	{r7}
 8001038:	4770      	bx	lr

0800103a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800103a:	b580      	push	{r7, lr}
 800103c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800103e:	f000 f8ab 	bl	8001198 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001042:	bf00      	nop
 8001044:	bd80      	pop	{r7, pc}
	...

08001048 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001048:	b580      	push	{r7, lr}
 800104a:	b086      	sub	sp, #24
 800104c:	af00      	add	r7, sp, #0
 800104e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001050:	4a14      	ldr	r2, [pc, #80]	; (80010a4 <_sbrk+0x5c>)
 8001052:	4b15      	ldr	r3, [pc, #84]	; (80010a8 <_sbrk+0x60>)
 8001054:	1ad3      	subs	r3, r2, r3
 8001056:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001058:	697b      	ldr	r3, [r7, #20]
 800105a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800105c:	4b13      	ldr	r3, [pc, #76]	; (80010ac <_sbrk+0x64>)
 800105e:	681b      	ldr	r3, [r3, #0]
 8001060:	2b00      	cmp	r3, #0
 8001062:	d102      	bne.n	800106a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001064:	4b11      	ldr	r3, [pc, #68]	; (80010ac <_sbrk+0x64>)
 8001066:	4a12      	ldr	r2, [pc, #72]	; (80010b0 <_sbrk+0x68>)
 8001068:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800106a:	4b10      	ldr	r3, [pc, #64]	; (80010ac <_sbrk+0x64>)
 800106c:	681a      	ldr	r2, [r3, #0]
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	4413      	add	r3, r2
 8001072:	693a      	ldr	r2, [r7, #16]
 8001074:	429a      	cmp	r2, r3
 8001076:	d207      	bcs.n	8001088 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001078:	f001 ff00 	bl	8002e7c <__errno>
 800107c:	4603      	mov	r3, r0
 800107e:	220c      	movs	r2, #12
 8001080:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001082:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001086:	e009      	b.n	800109c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001088:	4b08      	ldr	r3, [pc, #32]	; (80010ac <_sbrk+0x64>)
 800108a:	681b      	ldr	r3, [r3, #0]
 800108c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800108e:	4b07      	ldr	r3, [pc, #28]	; (80010ac <_sbrk+0x64>)
 8001090:	681a      	ldr	r2, [r3, #0]
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	4413      	add	r3, r2
 8001096:	4a05      	ldr	r2, [pc, #20]	; (80010ac <_sbrk+0x64>)
 8001098:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800109a:	68fb      	ldr	r3, [r7, #12]
}
 800109c:	4618      	mov	r0, r3
 800109e:	3718      	adds	r7, #24
 80010a0:	46bd      	mov	sp, r7
 80010a2:	bd80      	pop	{r7, pc}
 80010a4:	20010000 	.word	0x20010000
 80010a8:	00000400 	.word	0x00000400
 80010ac:	20000138 	.word	0x20000138
 80010b0:	20000150 	.word	0x20000150

080010b4 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80010b4:	b480      	push	{r7}
 80010b6:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80010b8:	bf00      	nop
 80010ba:	46bd      	mov	sp, r7
 80010bc:	bc80      	pop	{r7}
 80010be:	4770      	bx	lr

080010c0 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80010c0:	f7ff fff8 	bl	80010b4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80010c4:	480b      	ldr	r0, [pc, #44]	; (80010f4 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80010c6:	490c      	ldr	r1, [pc, #48]	; (80010f8 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80010c8:	4a0c      	ldr	r2, [pc, #48]	; (80010fc <LoopFillZerobss+0x16>)
  movs r3, #0
 80010ca:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80010cc:	e002      	b.n	80010d4 <LoopCopyDataInit>

080010ce <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80010ce:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80010d0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80010d2:	3304      	adds	r3, #4

080010d4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80010d4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80010d6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80010d8:	d3f9      	bcc.n	80010ce <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80010da:	4a09      	ldr	r2, [pc, #36]	; (8001100 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80010dc:	4c09      	ldr	r4, [pc, #36]	; (8001104 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80010de:	2300      	movs	r3, #0
  b LoopFillZerobss
 80010e0:	e001      	b.n	80010e6 <LoopFillZerobss>

080010e2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80010e2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80010e4:	3204      	adds	r2, #4

080010e6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80010e6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80010e8:	d3fb      	bcc.n	80010e2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80010ea:	f001 fecd 	bl	8002e88 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80010ee:	f7ff fbb5 	bl	800085c <main>
  bx lr
 80010f2:	4770      	bx	lr
  ldr r0, =_sdata
 80010f4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80010f8:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 80010fc:	08003e88 	.word	0x08003e88
  ldr r2, =_sbss
 8001100:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8001104:	20000150 	.word	0x20000150

08001108 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001108:	e7fe      	b.n	8001108 <ADC1_2_IRQHandler>
	...

0800110c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800110c:	b580      	push	{r7, lr}
 800110e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001110:	4b08      	ldr	r3, [pc, #32]	; (8001134 <HAL_Init+0x28>)
 8001112:	681b      	ldr	r3, [r3, #0]
 8001114:	4a07      	ldr	r2, [pc, #28]	; (8001134 <HAL_Init+0x28>)
 8001116:	f043 0310 	orr.w	r3, r3, #16
 800111a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800111c:	2003      	movs	r0, #3
 800111e:	f000 fdf1 	bl	8001d04 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001122:	200f      	movs	r0, #15
 8001124:	f000 f808 	bl	8001138 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001128:	f7ff fe80 	bl	8000e2c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800112c:	2300      	movs	r3, #0
}
 800112e:	4618      	mov	r0, r3
 8001130:	bd80      	pop	{r7, pc}
 8001132:	bf00      	nop
 8001134:	40022000 	.word	0x40022000

08001138 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001138:	b580      	push	{r7, lr}
 800113a:	b082      	sub	sp, #8
 800113c:	af00      	add	r7, sp, #0
 800113e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001140:	4b12      	ldr	r3, [pc, #72]	; (800118c <HAL_InitTick+0x54>)
 8001142:	681a      	ldr	r2, [r3, #0]
 8001144:	4b12      	ldr	r3, [pc, #72]	; (8001190 <HAL_InitTick+0x58>)
 8001146:	781b      	ldrb	r3, [r3, #0]
 8001148:	4619      	mov	r1, r3
 800114a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800114e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001152:	fbb2 f3f3 	udiv	r3, r2, r3
 8001156:	4618      	mov	r0, r3
 8001158:	f000 fdfb 	bl	8001d52 <HAL_SYSTICK_Config>
 800115c:	4603      	mov	r3, r0
 800115e:	2b00      	cmp	r3, #0
 8001160:	d001      	beq.n	8001166 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001162:	2301      	movs	r3, #1
 8001164:	e00e      	b.n	8001184 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	2b0f      	cmp	r3, #15
 800116a:	d80a      	bhi.n	8001182 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800116c:	2200      	movs	r2, #0
 800116e:	6879      	ldr	r1, [r7, #4]
 8001170:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001174:	f000 fdd1 	bl	8001d1a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001178:	4a06      	ldr	r2, [pc, #24]	; (8001194 <HAL_InitTick+0x5c>)
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800117e:	2300      	movs	r3, #0
 8001180:	e000      	b.n	8001184 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001182:	2301      	movs	r3, #1
}
 8001184:	4618      	mov	r0, r3
 8001186:	3708      	adds	r7, #8
 8001188:	46bd      	mov	sp, r7
 800118a:	bd80      	pop	{r7, pc}
 800118c:	20000000 	.word	0x20000000
 8001190:	20000008 	.word	0x20000008
 8001194:	20000004 	.word	0x20000004

08001198 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001198:	b480      	push	{r7}
 800119a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800119c:	4b05      	ldr	r3, [pc, #20]	; (80011b4 <HAL_IncTick+0x1c>)
 800119e:	781b      	ldrb	r3, [r3, #0]
 80011a0:	461a      	mov	r2, r3
 80011a2:	4b05      	ldr	r3, [pc, #20]	; (80011b8 <HAL_IncTick+0x20>)
 80011a4:	681b      	ldr	r3, [r3, #0]
 80011a6:	4413      	add	r3, r2
 80011a8:	4a03      	ldr	r2, [pc, #12]	; (80011b8 <HAL_IncTick+0x20>)
 80011aa:	6013      	str	r3, [r2, #0]
}
 80011ac:	bf00      	nop
 80011ae:	46bd      	mov	sp, r7
 80011b0:	bc80      	pop	{r7}
 80011b2:	4770      	bx	lr
 80011b4:	20000008 	.word	0x20000008
 80011b8:	2000013c 	.word	0x2000013c

080011bc <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80011bc:	b480      	push	{r7}
 80011be:	af00      	add	r7, sp, #0
  return uwTick;
 80011c0:	4b02      	ldr	r3, [pc, #8]	; (80011cc <HAL_GetTick+0x10>)
 80011c2:	681b      	ldr	r3, [r3, #0]
}
 80011c4:	4618      	mov	r0, r3
 80011c6:	46bd      	mov	sp, r7
 80011c8:	bc80      	pop	{r7}
 80011ca:	4770      	bx	lr
 80011cc:	2000013c 	.word	0x2000013c

080011d0 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80011d0:	b580      	push	{r7, lr}
 80011d2:	b086      	sub	sp, #24
 80011d4:	af00      	add	r7, sp, #0
 80011d6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80011d8:	2300      	movs	r3, #0
 80011da:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 80011dc:	2300      	movs	r3, #0
 80011de:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 80011e0:	2300      	movs	r3, #0
 80011e2:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 80011e4:	2300      	movs	r3, #0
 80011e6:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	2b00      	cmp	r3, #0
 80011ec:	d101      	bne.n	80011f2 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 80011ee:	2301      	movs	r3, #1
 80011f0:	e0ce      	b.n	8001390 <HAL_ADC_Init+0x1c0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	689b      	ldr	r3, [r3, #8]
 80011f6:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80011fc:	2b00      	cmp	r3, #0
 80011fe:	d109      	bne.n	8001214 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	2200      	movs	r2, #0
 8001204:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	2200      	movs	r2, #0
 800120a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800120e:	6878      	ldr	r0, [r7, #4]
 8001210:	f7ff fe3e 	bl	8000e90 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8001214:	6878      	ldr	r0, [r7, #4]
 8001216:	f000 fbd7 	bl	80019c8 <ADC_ConversionStop_Disable>
 800121a:	4603      	mov	r3, r0
 800121c:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001222:	f003 0310 	and.w	r3, r3, #16
 8001226:	2b00      	cmp	r3, #0
 8001228:	f040 80a9 	bne.w	800137e <HAL_ADC_Init+0x1ae>
 800122c:	7dfb      	ldrb	r3, [r7, #23]
 800122e:	2b00      	cmp	r3, #0
 8001230:	f040 80a5 	bne.w	800137e <HAL_ADC_Init+0x1ae>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001238:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800123c:	f023 0302 	bic.w	r3, r3, #2
 8001240:	f043 0202 	orr.w	r2, r3, #2
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	681b      	ldr	r3, [r3, #0]
 8001250:	4951      	ldr	r1, [pc, #324]	; (8001398 <HAL_ADC_Init+0x1c8>)
 8001252:	428b      	cmp	r3, r1
 8001254:	d10a      	bne.n	800126c <HAL_ADC_Init+0x9c>
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	69db      	ldr	r3, [r3, #28]
 800125a:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 800125e:	d002      	beq.n	8001266 <HAL_ADC_Init+0x96>
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	69db      	ldr	r3, [r3, #28]
 8001264:	e004      	b.n	8001270 <HAL_ADC_Init+0xa0>
 8001266:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800126a:	e001      	b.n	8001270 <HAL_ADC_Init+0xa0>
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001270:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	7b1b      	ldrb	r3, [r3, #12]
 8001276:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001278:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 800127a:	68ba      	ldr	r2, [r7, #8]
 800127c:	4313      	orrs	r3, r2
 800127e:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	689b      	ldr	r3, [r3, #8]
 8001284:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001288:	d003      	beq.n	8001292 <HAL_ADC_Init+0xc2>
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	689b      	ldr	r3, [r3, #8]
 800128e:	2b01      	cmp	r3, #1
 8001290:	d102      	bne.n	8001298 <HAL_ADC_Init+0xc8>
 8001292:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001296:	e000      	b.n	800129a <HAL_ADC_Init+0xca>
 8001298:	2300      	movs	r3, #0
 800129a:	693a      	ldr	r2, [r7, #16]
 800129c:	4313      	orrs	r3, r2
 800129e:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	7d1b      	ldrb	r3, [r3, #20]
 80012a4:	2b01      	cmp	r3, #1
 80012a6:	d119      	bne.n	80012dc <HAL_ADC_Init+0x10c>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	7b1b      	ldrb	r3, [r3, #12]
 80012ac:	2b00      	cmp	r3, #0
 80012ae:	d109      	bne.n	80012c4 <HAL_ADC_Init+0xf4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	699b      	ldr	r3, [r3, #24]
 80012b4:	3b01      	subs	r3, #1
 80012b6:	035a      	lsls	r2, r3, #13
 80012b8:	693b      	ldr	r3, [r7, #16]
 80012ba:	4313      	orrs	r3, r2
 80012bc:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80012c0:	613b      	str	r3, [r7, #16]
 80012c2:	e00b      	b.n	80012dc <HAL_ADC_Init+0x10c>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80012c8:	f043 0220 	orr.w	r2, r3, #32
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80012d4:	f043 0201 	orr.w	r2, r3, #1
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	685b      	ldr	r3, [r3, #4]
 80012e2:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	681b      	ldr	r3, [r3, #0]
 80012ea:	693a      	ldr	r2, [r7, #16]
 80012ec:	430a      	orrs	r2, r1
 80012ee:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	681b      	ldr	r3, [r3, #0]
 80012f4:	689a      	ldr	r2, [r3, #8]
 80012f6:	4b29      	ldr	r3, [pc, #164]	; (800139c <HAL_ADC_Init+0x1cc>)
 80012f8:	4013      	ands	r3, r2
 80012fa:	687a      	ldr	r2, [r7, #4]
 80012fc:	6812      	ldr	r2, [r2, #0]
 80012fe:	68b9      	ldr	r1, [r7, #8]
 8001300:	430b      	orrs	r3, r1
 8001302:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	689b      	ldr	r3, [r3, #8]
 8001308:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800130c:	d003      	beq.n	8001316 <HAL_ADC_Init+0x146>
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	689b      	ldr	r3, [r3, #8]
 8001312:	2b01      	cmp	r3, #1
 8001314:	d104      	bne.n	8001320 <HAL_ADC_Init+0x150>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	691b      	ldr	r3, [r3, #16]
 800131a:	3b01      	subs	r3, #1
 800131c:	051b      	lsls	r3, r3, #20
 800131e:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001326:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	681b      	ldr	r3, [r3, #0]
 800132e:	68fa      	ldr	r2, [r7, #12]
 8001330:	430a      	orrs	r2, r1
 8001332:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	681b      	ldr	r3, [r3, #0]
 8001338:	689a      	ldr	r2, [r3, #8]
 800133a:	4b19      	ldr	r3, [pc, #100]	; (80013a0 <HAL_ADC_Init+0x1d0>)
 800133c:	4013      	ands	r3, r2
 800133e:	68ba      	ldr	r2, [r7, #8]
 8001340:	429a      	cmp	r2, r3
 8001342:	d10b      	bne.n	800135c <HAL_ADC_Init+0x18c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	2200      	movs	r2, #0
 8001348:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800134e:	f023 0303 	bic.w	r3, r3, #3
 8001352:	f043 0201 	orr.w	r2, r3, #1
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 800135a:	e018      	b.n	800138e <HAL_ADC_Init+0x1be>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001360:	f023 0312 	bic.w	r3, r3, #18
 8001364:	f043 0210 	orr.w	r2, r3, #16
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001370:	f043 0201 	orr.w	r2, r3, #1
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8001378:	2301      	movs	r3, #1
 800137a:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 800137c:	e007      	b.n	800138e <HAL_ADC_Init+0x1be>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001382:	f043 0210 	orr.w	r2, r3, #16
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 800138a:	2301      	movs	r3, #1
 800138c:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 800138e:	7dfb      	ldrb	r3, [r7, #23]
}
 8001390:	4618      	mov	r0, r3
 8001392:	3718      	adds	r7, #24
 8001394:	46bd      	mov	sp, r7
 8001396:	bd80      	pop	{r7, pc}
 8001398:	40013c00 	.word	0x40013c00
 800139c:	ffe1f7fd 	.word	0xffe1f7fd
 80013a0:	ff1f0efe 	.word	0xff1f0efe

080013a4 <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 80013a4:	b580      	push	{r7, lr}
 80013a6:	b084      	sub	sp, #16
 80013a8:	af00      	add	r7, sp, #0
 80013aa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80013ac:	2300      	movs	r3, #0
 80013ae:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80013b6:	2b01      	cmp	r3, #1
 80013b8:	d101      	bne.n	80013be <HAL_ADC_Start+0x1a>
 80013ba:	2302      	movs	r3, #2
 80013bc:	e098      	b.n	80014f0 <HAL_ADC_Start+0x14c>
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	2201      	movs	r2, #1
 80013c2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
   
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 80013c6:	6878      	ldr	r0, [r7, #4]
 80013c8:	f000 faa4 	bl	8001914 <ADC_Enable>
 80013cc:	4603      	mov	r3, r0
 80013ce:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 80013d0:	7bfb      	ldrb	r3, [r7, #15]
 80013d2:	2b00      	cmp	r3, #0
 80013d4:	f040 8087 	bne.w	80014e6 <HAL_ADC_Start+0x142>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80013dc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80013e0:	f023 0301 	bic.w	r3, r3, #1
 80013e4:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	4a41      	ldr	r2, [pc, #260]	; (80014f8 <HAL_ADC_Start+0x154>)
 80013f2:	4293      	cmp	r3, r2
 80013f4:	d105      	bne.n	8001402 <HAL_ADC_Start+0x5e>
 80013f6:	4b41      	ldr	r3, [pc, #260]	; (80014fc <HAL_ADC_Start+0x158>)
 80013f8:	685b      	ldr	r3, [r3, #4]
 80013fa:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 80013fe:	2b00      	cmp	r3, #0
 8001400:	d115      	bne.n	800142e <HAL_ADC_Start+0x8a>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001406:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	681b      	ldr	r3, [r3, #0]
 8001412:	685b      	ldr	r3, [r3, #4]
 8001414:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001418:	2b00      	cmp	r3, #0
 800141a:	d026      	beq.n	800146a <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001420:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001424:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800142c:	e01d      	b.n	800146a <HAL_ADC_Start+0xc6>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001432:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	681b      	ldr	r3, [r3, #0]
 800143e:	4a2f      	ldr	r2, [pc, #188]	; (80014fc <HAL_ADC_Start+0x158>)
 8001440:	4293      	cmp	r3, r2
 8001442:	d004      	beq.n	800144e <HAL_ADC_Start+0xaa>
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	4a2b      	ldr	r2, [pc, #172]	; (80014f8 <HAL_ADC_Start+0x154>)
 800144a:	4293      	cmp	r3, r2
 800144c:	d10d      	bne.n	800146a <HAL_ADC_Start+0xc6>
 800144e:	4b2b      	ldr	r3, [pc, #172]	; (80014fc <HAL_ADC_Start+0x158>)
 8001450:	685b      	ldr	r3, [r3, #4]
 8001452:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001456:	2b00      	cmp	r3, #0
 8001458:	d007      	beq.n	800146a <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800145e:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001462:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800146e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001472:	2b00      	cmp	r3, #0
 8001474:	d006      	beq.n	8001484 <HAL_ADC_Start+0xe0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800147a:	f023 0206 	bic.w	r2, r3, #6
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	62da      	str	r2, [r3, #44]	; 0x2c
 8001482:	e002      	b.n	800148a <HAL_ADC_Start+0xe6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	2200      	movs	r2, #0
 8001488:	62da      	str	r2, [r3, #44]	; 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	2200      	movs	r2, #0
 800148e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
    /* Clear regular group conversion flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	f06f 0202 	mvn.w	r2, #2
 800149a:	601a      	str	r2, [r3, #0]
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    /* If ADC is master, ADC is enabled and conversion is started.            */
    /* Note: Alternate trigger for single conversion could be to force an     */
    /*       additional set of bit ADON "hadc->Instance->CR2 |= ADC_CR2_ADON;"*/
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	689b      	ldr	r3, [r3, #8]
 80014a2:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 80014a6:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 80014aa:	d113      	bne.n	80014d4 <HAL_ADC_Start+0x130>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 80014b0:	4a11      	ldr	r2, [pc, #68]	; (80014f8 <HAL_ADC_Start+0x154>)
 80014b2:	4293      	cmp	r3, r2
 80014b4:	d105      	bne.n	80014c2 <HAL_ADC_Start+0x11e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 80014b6:	4b11      	ldr	r3, [pc, #68]	; (80014fc <HAL_ADC_Start+0x158>)
 80014b8:	685b      	ldr	r3, [r3, #4]
 80014ba:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 80014be:	2b00      	cmp	r3, #0
 80014c0:	d108      	bne.n	80014d4 <HAL_ADC_Start+0x130>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	689a      	ldr	r2, [r3, #8]
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 80014d0:	609a      	str	r2, [r3, #8]
 80014d2:	e00c      	b.n	80014ee <HAL_ADC_Start+0x14a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	689a      	ldr	r2, [r3, #8]
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 80014e2:	609a      	str	r2, [r3, #8]
 80014e4:	e003      	b.n	80014ee <HAL_ADC_Start+0x14a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	2200      	movs	r2, #0
 80014ea:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }
    
  /* Return function status */
  return tmp_hal_status;
 80014ee:	7bfb      	ldrb	r3, [r7, #15]
}
 80014f0:	4618      	mov	r0, r3
 80014f2:	3710      	adds	r7, #16
 80014f4:	46bd      	mov	sp, r7
 80014f6:	bd80      	pop	{r7, pc}
 80014f8:	40012800 	.word	0x40012800
 80014fc:	40012400 	.word	0x40012400

08001500 <HAL_ADC_PollForConversion>:
  * @param  hadc: ADC handle
  * @param  Timeout: Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8001500:	b590      	push	{r4, r7, lr}
 8001502:	b087      	sub	sp, #28
 8001504:	af00      	add	r7, sp, #0
 8001506:	6078      	str	r0, [r7, #4]
 8001508:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 800150a:	2300      	movs	r3, #0
 800150c:	617b      	str	r3, [r7, #20]
  
  /* Variables for polling in case of scan mode enabled and polling for each  */
  /* conversion.                                                              */
  __IO uint32_t Conversion_Timeout_CPU_cycles = 0U;
 800150e:	2300      	movs	r3, #0
 8001510:	60fb      	str	r3, [r7, #12]
  uint32_t Conversion_Timeout_CPU_cycles_max = 0U;
 8001512:	2300      	movs	r3, #0
 8001514:	613b      	str	r3, [r7, #16]
 
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Get tick count */
  tickstart = HAL_GetTick();
 8001516:	f7ff fe51 	bl	80011bc <HAL_GetTick>
 800151a:	6178      	str	r0, [r7, #20]
  
  /* Verification that ADC configuration is compliant with polling for        */
  /* each conversion:                                                         */
  /* Particular case is ADC configured in DMA mode                            */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	689b      	ldr	r3, [r3, #8]
 8001522:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001526:	2b00      	cmp	r3, #0
 8001528:	d00b      	beq.n	8001542 <HAL_ADC_PollForConversion+0x42>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800152e:	f043 0220 	orr.w	r2, r3, #32
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	2200      	movs	r2, #0
 800153a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    return HAL_ERROR;
 800153e:	2301      	movs	r3, #1
 8001540:	e0d3      	b.n	80016ea <HAL_ADC_PollForConversion+0x1ea>
  /*    from ADC conversion time (selected sampling time + conversion time of */
  /*    12.5 ADC clock cycles) and APB2/ADC clock prescalers (depending on    */
  /*    settings, conversion time range can be from 28 to 32256 CPU cycles).  */
  /*    As flag EOC is not set after each conversion, no timeout status can   */
  /*    be set.                                                               */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	685b      	ldr	r3, [r3, #4]
 8001548:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800154c:	2b00      	cmp	r3, #0
 800154e:	d131      	bne.n	80015b4 <HAL_ADC_PollForConversion+0xb4>
      HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L)    )
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001556:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 800155a:	2b00      	cmp	r3, #0
 800155c:	d12a      	bne.n	80015b4 <HAL_ADC_PollForConversion+0xb4>
  {
    /* Wait until End of Conversion flag is raised */
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 800155e:	e021      	b.n	80015a4 <HAL_ADC_PollForConversion+0xa4>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 8001560:	683b      	ldr	r3, [r7, #0]
 8001562:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001566:	d01d      	beq.n	80015a4 <HAL_ADC_PollForConversion+0xa4>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8001568:	683b      	ldr	r3, [r7, #0]
 800156a:	2b00      	cmp	r3, #0
 800156c:	d007      	beq.n	800157e <HAL_ADC_PollForConversion+0x7e>
 800156e:	f7ff fe25 	bl	80011bc <HAL_GetTick>
 8001572:	4602      	mov	r2, r0
 8001574:	697b      	ldr	r3, [r7, #20]
 8001576:	1ad3      	subs	r3, r2, r3
 8001578:	683a      	ldr	r2, [r7, #0]
 800157a:	429a      	cmp	r2, r3
 800157c:	d212      	bcs.n	80015a4 <HAL_ADC_PollForConversion+0xa4>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	f003 0302 	and.w	r3, r3, #2
 8001588:	2b00      	cmp	r3, #0
 800158a:	d10b      	bne.n	80015a4 <HAL_ADC_PollForConversion+0xa4>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001590:	f043 0204 	orr.w	r2, r3, #4
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	629a      	str	r2, [r3, #40]	; 0x28
            
            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	2200      	movs	r2, #0
 800159c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
            
            return HAL_TIMEOUT;
 80015a0:	2303      	movs	r3, #3
 80015a2:	e0a2      	b.n	80016ea <HAL_ADC_PollForConversion+0x1ea>
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	f003 0302 	and.w	r3, r3, #2
 80015ae:	2b00      	cmp	r3, #0
 80015b0:	d0d6      	beq.n	8001560 <HAL_ADC_PollForConversion+0x60>
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 80015b2:	e070      	b.n	8001696 <HAL_ADC_PollForConversion+0x196>
    /* Replace polling by wait for maximum conversion time */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles   */
    /*    and ADC maximum conversion cycles on all channels.                  */
    /*  - Wait for the expected ADC clock cycles delay                        */
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
                                          / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 80015b4:	4b4f      	ldr	r3, [pc, #316]	; (80016f4 <HAL_ADC_PollForConversion+0x1f4>)
 80015b6:	681c      	ldr	r4, [r3, #0]
 80015b8:	2002      	movs	r0, #2
 80015ba:	f001 fa57 	bl	8002a6c <HAL_RCCEx_GetPeriphCLKFreq>
 80015be:	4603      	mov	r3, r0
 80015c0:	fbb4 f2f3 	udiv	r2, r4, r3
                                         * ADC_CONVCYCLES_MAX_RANGE(hadc)                 );
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	6919      	ldr	r1, [r3, #16]
 80015ca:	4b4b      	ldr	r3, [pc, #300]	; (80016f8 <HAL_ADC_PollForConversion+0x1f8>)
 80015cc:	400b      	ands	r3, r1
 80015ce:	2b00      	cmp	r3, #0
 80015d0:	d118      	bne.n	8001604 <HAL_ADC_PollForConversion+0x104>
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	68d9      	ldr	r1, [r3, #12]
 80015d8:	4b48      	ldr	r3, [pc, #288]	; (80016fc <HAL_ADC_PollForConversion+0x1fc>)
 80015da:	400b      	ands	r3, r1
 80015dc:	2b00      	cmp	r3, #0
 80015de:	d111      	bne.n	8001604 <HAL_ADC_PollForConversion+0x104>
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	6919      	ldr	r1, [r3, #16]
 80015e6:	4b46      	ldr	r3, [pc, #280]	; (8001700 <HAL_ADC_PollForConversion+0x200>)
 80015e8:	400b      	ands	r3, r1
 80015ea:	2b00      	cmp	r3, #0
 80015ec:	d108      	bne.n	8001600 <HAL_ADC_PollForConversion+0x100>
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	68d9      	ldr	r1, [r3, #12]
 80015f4:	4b43      	ldr	r3, [pc, #268]	; (8001704 <HAL_ADC_PollForConversion+0x204>)
 80015f6:	400b      	ands	r3, r1
 80015f8:	2b00      	cmp	r3, #0
 80015fa:	d101      	bne.n	8001600 <HAL_ADC_PollForConversion+0x100>
 80015fc:	2314      	movs	r3, #20
 80015fe:	e020      	b.n	8001642 <HAL_ADC_PollForConversion+0x142>
 8001600:	2329      	movs	r3, #41	; 0x29
 8001602:	e01e      	b.n	8001642 <HAL_ADC_PollForConversion+0x142>
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	6919      	ldr	r1, [r3, #16]
 800160a:	4b3d      	ldr	r3, [pc, #244]	; (8001700 <HAL_ADC_PollForConversion+0x200>)
 800160c:	400b      	ands	r3, r1
 800160e:	2b00      	cmp	r3, #0
 8001610:	d106      	bne.n	8001620 <HAL_ADC_PollForConversion+0x120>
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	68d9      	ldr	r1, [r3, #12]
 8001618:	4b3a      	ldr	r3, [pc, #232]	; (8001704 <HAL_ADC_PollForConversion+0x204>)
 800161a:	400b      	ands	r3, r1
 800161c:	2b00      	cmp	r3, #0
 800161e:	d00d      	beq.n	800163c <HAL_ADC_PollForConversion+0x13c>
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	6919      	ldr	r1, [r3, #16]
 8001626:	4b38      	ldr	r3, [pc, #224]	; (8001708 <HAL_ADC_PollForConversion+0x208>)
 8001628:	400b      	ands	r3, r1
 800162a:	2b00      	cmp	r3, #0
 800162c:	d108      	bne.n	8001640 <HAL_ADC_PollForConversion+0x140>
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	68d9      	ldr	r1, [r3, #12]
 8001634:	4b34      	ldr	r3, [pc, #208]	; (8001708 <HAL_ADC_PollForConversion+0x208>)
 8001636:	400b      	ands	r3, r1
 8001638:	2b00      	cmp	r3, #0
 800163a:	d101      	bne.n	8001640 <HAL_ADC_PollForConversion+0x140>
 800163c:	2354      	movs	r3, #84	; 0x54
 800163e:	e000      	b.n	8001642 <HAL_ADC_PollForConversion+0x142>
 8001640:	23fc      	movs	r3, #252	; 0xfc
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
 8001642:	fb02 f303 	mul.w	r3, r2, r3
 8001646:	613b      	str	r3, [r7, #16]
    
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8001648:	e021      	b.n	800168e <HAL_ADC_PollForConversion+0x18e>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 800164a:	683b      	ldr	r3, [r7, #0]
 800164c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001650:	d01a      	beq.n	8001688 <HAL_ADC_PollForConversion+0x188>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8001652:	683b      	ldr	r3, [r7, #0]
 8001654:	2b00      	cmp	r3, #0
 8001656:	d007      	beq.n	8001668 <HAL_ADC_PollForConversion+0x168>
 8001658:	f7ff fdb0 	bl	80011bc <HAL_GetTick>
 800165c:	4602      	mov	r2, r0
 800165e:	697b      	ldr	r3, [r7, #20]
 8001660:	1ad3      	subs	r3, r2, r3
 8001662:	683a      	ldr	r2, [r7, #0]
 8001664:	429a      	cmp	r2, r3
 8001666:	d20f      	bcs.n	8001688 <HAL_ADC_PollForConversion+0x188>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8001668:	68fb      	ldr	r3, [r7, #12]
 800166a:	693a      	ldr	r2, [r7, #16]
 800166c:	429a      	cmp	r2, r3
 800166e:	d90b      	bls.n	8001688 <HAL_ADC_PollForConversion+0x188>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001674:	f043 0204 	orr.w	r2, r3, #4
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	629a      	str	r2, [r3, #40]	; 0x28

            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	2200      	movs	r2, #0
 8001680:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

            return HAL_TIMEOUT;
 8001684:	2303      	movs	r3, #3
 8001686:	e030      	b.n	80016ea <HAL_ADC_PollForConversion+0x1ea>
          }
        }
      }
      Conversion_Timeout_CPU_cycles ++;
 8001688:	68fb      	ldr	r3, [r7, #12]
 800168a:	3301      	adds	r3, #1
 800168c:	60fb      	str	r3, [r7, #12]
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 800168e:	68fb      	ldr	r3, [r7, #12]
 8001690:	693a      	ldr	r2, [r7, #16]
 8001692:	429a      	cmp	r2, r3
 8001694:	d8d9      	bhi.n	800164a <HAL_ADC_PollForConversion+0x14a>
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	f06f 0212 	mvn.w	r2, #18
 800169e:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80016a4:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	629a      	str	r2, [r3, #40]	; 0x28
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F1 devices, in case of sequencer enabled                   */
  /*       (several ranks selected), end of conversion flag is raised         */
  /*       at the end of the sequence.                                        */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	689b      	ldr	r3, [r3, #8]
 80016b2:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 80016b6:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 80016ba:	d115      	bne.n	80016e8 <HAL_ADC_PollForConversion+0x1e8>
     (hadc->Init.ContinuousConvMode == DISABLE)   )
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	7b1b      	ldrb	r3, [r3, #12]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80016c0:	2b00      	cmp	r3, #0
 80016c2:	d111      	bne.n	80016e8 <HAL_ADC_PollForConversion+0x1e8>
  {   
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80016c8:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	629a      	str	r2, [r3, #40]	; 0x28

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80016d4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80016d8:	2b00      	cmp	r3, #0
 80016da:	d105      	bne.n	80016e8 <HAL_ADC_PollForConversion+0x1e8>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80016e0:	f043 0201 	orr.w	r2, r3, #1
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	629a      	str	r2, [r3, #40]	; 0x28
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 80016e8:	2300      	movs	r3, #0
}
 80016ea:	4618      	mov	r0, r3
 80016ec:	371c      	adds	r7, #28
 80016ee:	46bd      	mov	sp, r7
 80016f0:	bd90      	pop	{r4, r7, pc}
 80016f2:	bf00      	nop
 80016f4:	20000000 	.word	0x20000000
 80016f8:	24924924 	.word	0x24924924
 80016fc:	00924924 	.word	0x00924924
 8001700:	12492492 	.word	0x12492492
 8001704:	00492492 	.word	0x00492492
 8001708:	00249249 	.word	0x00249249

0800170c <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc: ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 800170c:	b480      	push	{r7}
 800170e:	b083      	sub	sp, #12
 8001710:	af00      	add	r7, sp, #0
 8001712:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 800171a:	4618      	mov	r0, r3
 800171c:	370c      	adds	r7, #12
 800171e:	46bd      	mov	sp, r7
 8001720:	bc80      	pop	{r7}
 8001722:	4770      	bx	lr

08001724 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8001724:	b480      	push	{r7}
 8001726:	b085      	sub	sp, #20
 8001728:	af00      	add	r7, sp, #0
 800172a:	6078      	str	r0, [r7, #4]
 800172c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800172e:	2300      	movs	r3, #0
 8001730:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8001732:	2300      	movs	r3, #0
 8001734:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800173c:	2b01      	cmp	r3, #1
 800173e:	d101      	bne.n	8001744 <HAL_ADC_ConfigChannel+0x20>
 8001740:	2302      	movs	r3, #2
 8001742:	e0dc      	b.n	80018fe <HAL_ADC_ConfigChannel+0x1da>
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	2201      	movs	r2, #1
 8001748:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800174c:	683b      	ldr	r3, [r7, #0]
 800174e:	685b      	ldr	r3, [r3, #4]
 8001750:	2b06      	cmp	r3, #6
 8001752:	d81c      	bhi.n	800178e <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800175a:	683b      	ldr	r3, [r7, #0]
 800175c:	685a      	ldr	r2, [r3, #4]
 800175e:	4613      	mov	r3, r2
 8001760:	009b      	lsls	r3, r3, #2
 8001762:	4413      	add	r3, r2
 8001764:	3b05      	subs	r3, #5
 8001766:	221f      	movs	r2, #31
 8001768:	fa02 f303 	lsl.w	r3, r2, r3
 800176c:	43db      	mvns	r3, r3
 800176e:	4019      	ands	r1, r3
 8001770:	683b      	ldr	r3, [r7, #0]
 8001772:	6818      	ldr	r0, [r3, #0]
 8001774:	683b      	ldr	r3, [r7, #0]
 8001776:	685a      	ldr	r2, [r3, #4]
 8001778:	4613      	mov	r3, r2
 800177a:	009b      	lsls	r3, r3, #2
 800177c:	4413      	add	r3, r2
 800177e:	3b05      	subs	r3, #5
 8001780:	fa00 f203 	lsl.w	r2, r0, r3
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	430a      	orrs	r2, r1
 800178a:	635a      	str	r2, [r3, #52]	; 0x34
 800178c:	e03c      	b.n	8001808 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 800178e:	683b      	ldr	r3, [r7, #0]
 8001790:	685b      	ldr	r3, [r3, #4]
 8001792:	2b0c      	cmp	r3, #12
 8001794:	d81c      	bhi.n	80017d0 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800179c:	683b      	ldr	r3, [r7, #0]
 800179e:	685a      	ldr	r2, [r3, #4]
 80017a0:	4613      	mov	r3, r2
 80017a2:	009b      	lsls	r3, r3, #2
 80017a4:	4413      	add	r3, r2
 80017a6:	3b23      	subs	r3, #35	; 0x23
 80017a8:	221f      	movs	r2, #31
 80017aa:	fa02 f303 	lsl.w	r3, r2, r3
 80017ae:	43db      	mvns	r3, r3
 80017b0:	4019      	ands	r1, r3
 80017b2:	683b      	ldr	r3, [r7, #0]
 80017b4:	6818      	ldr	r0, [r3, #0]
 80017b6:	683b      	ldr	r3, [r7, #0]
 80017b8:	685a      	ldr	r2, [r3, #4]
 80017ba:	4613      	mov	r3, r2
 80017bc:	009b      	lsls	r3, r3, #2
 80017be:	4413      	add	r3, r2
 80017c0:	3b23      	subs	r3, #35	; 0x23
 80017c2:	fa00 f203 	lsl.w	r2, r0, r3
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	430a      	orrs	r2, r1
 80017cc:	631a      	str	r2, [r3, #48]	; 0x30
 80017ce:	e01b      	b.n	8001808 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80017d6:	683b      	ldr	r3, [r7, #0]
 80017d8:	685a      	ldr	r2, [r3, #4]
 80017da:	4613      	mov	r3, r2
 80017dc:	009b      	lsls	r3, r3, #2
 80017de:	4413      	add	r3, r2
 80017e0:	3b41      	subs	r3, #65	; 0x41
 80017e2:	221f      	movs	r2, #31
 80017e4:	fa02 f303 	lsl.w	r3, r2, r3
 80017e8:	43db      	mvns	r3, r3
 80017ea:	4019      	ands	r1, r3
 80017ec:	683b      	ldr	r3, [r7, #0]
 80017ee:	6818      	ldr	r0, [r3, #0]
 80017f0:	683b      	ldr	r3, [r7, #0]
 80017f2:	685a      	ldr	r2, [r3, #4]
 80017f4:	4613      	mov	r3, r2
 80017f6:	009b      	lsls	r3, r3, #2
 80017f8:	4413      	add	r3, r2
 80017fa:	3b41      	subs	r3, #65	; 0x41
 80017fc:	fa00 f203 	lsl.w	r2, r0, r3
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	430a      	orrs	r2, r1
 8001806:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8001808:	683b      	ldr	r3, [r7, #0]
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	2b09      	cmp	r3, #9
 800180e:	d91c      	bls.n	800184a <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	68d9      	ldr	r1, [r3, #12]
 8001816:	683b      	ldr	r3, [r7, #0]
 8001818:	681a      	ldr	r2, [r3, #0]
 800181a:	4613      	mov	r3, r2
 800181c:	005b      	lsls	r3, r3, #1
 800181e:	4413      	add	r3, r2
 8001820:	3b1e      	subs	r3, #30
 8001822:	2207      	movs	r2, #7
 8001824:	fa02 f303 	lsl.w	r3, r2, r3
 8001828:	43db      	mvns	r3, r3
 800182a:	4019      	ands	r1, r3
 800182c:	683b      	ldr	r3, [r7, #0]
 800182e:	6898      	ldr	r0, [r3, #8]
 8001830:	683b      	ldr	r3, [r7, #0]
 8001832:	681a      	ldr	r2, [r3, #0]
 8001834:	4613      	mov	r3, r2
 8001836:	005b      	lsls	r3, r3, #1
 8001838:	4413      	add	r3, r2
 800183a:	3b1e      	subs	r3, #30
 800183c:	fa00 f203 	lsl.w	r2, r0, r3
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	430a      	orrs	r2, r1
 8001846:	60da      	str	r2, [r3, #12]
 8001848:	e019      	b.n	800187e <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	6919      	ldr	r1, [r3, #16]
 8001850:	683b      	ldr	r3, [r7, #0]
 8001852:	681a      	ldr	r2, [r3, #0]
 8001854:	4613      	mov	r3, r2
 8001856:	005b      	lsls	r3, r3, #1
 8001858:	4413      	add	r3, r2
 800185a:	2207      	movs	r2, #7
 800185c:	fa02 f303 	lsl.w	r3, r2, r3
 8001860:	43db      	mvns	r3, r3
 8001862:	4019      	ands	r1, r3
 8001864:	683b      	ldr	r3, [r7, #0]
 8001866:	6898      	ldr	r0, [r3, #8]
 8001868:	683b      	ldr	r3, [r7, #0]
 800186a:	681a      	ldr	r2, [r3, #0]
 800186c:	4613      	mov	r3, r2
 800186e:	005b      	lsls	r3, r3, #1
 8001870:	4413      	add	r3, r2
 8001872:	fa00 f203 	lsl.w	r2, r0, r3
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	430a      	orrs	r2, r1
 800187c:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 800187e:	683b      	ldr	r3, [r7, #0]
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	2b10      	cmp	r3, #16
 8001884:	d003      	beq.n	800188e <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8001886:	683b      	ldr	r3, [r7, #0]
 8001888:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 800188a:	2b11      	cmp	r3, #17
 800188c:	d132      	bne.n	80018f4 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	4a1d      	ldr	r2, [pc, #116]	; (8001908 <HAL_ADC_ConfigChannel+0x1e4>)
 8001894:	4293      	cmp	r3, r2
 8001896:	d125      	bne.n	80018e4 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	689b      	ldr	r3, [r3, #8]
 800189e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80018a2:	2b00      	cmp	r3, #0
 80018a4:	d126      	bne.n	80018f4 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	689a      	ldr	r2, [r3, #8]
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 80018b4:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80018b6:	683b      	ldr	r3, [r7, #0]
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	2b10      	cmp	r3, #16
 80018bc:	d11a      	bne.n	80018f4 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80018be:	4b13      	ldr	r3, [pc, #76]	; (800190c <HAL_ADC_ConfigChannel+0x1e8>)
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	4a13      	ldr	r2, [pc, #76]	; (8001910 <HAL_ADC_ConfigChannel+0x1ec>)
 80018c4:	fba2 2303 	umull	r2, r3, r2, r3
 80018c8:	0c9a      	lsrs	r2, r3, #18
 80018ca:	4613      	mov	r3, r2
 80018cc:	009b      	lsls	r3, r3, #2
 80018ce:	4413      	add	r3, r2
 80018d0:	005b      	lsls	r3, r3, #1
 80018d2:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80018d4:	e002      	b.n	80018dc <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 80018d6:	68bb      	ldr	r3, [r7, #8]
 80018d8:	3b01      	subs	r3, #1
 80018da:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80018dc:	68bb      	ldr	r3, [r7, #8]
 80018de:	2b00      	cmp	r3, #0
 80018e0:	d1f9      	bne.n	80018d6 <HAL_ADC_ConfigChannel+0x1b2>
 80018e2:	e007      	b.n	80018f4 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80018e8:	f043 0220 	orr.w	r2, r3, #32
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 80018f0:	2301      	movs	r3, #1
 80018f2:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	2200      	movs	r2, #0
 80018f8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 80018fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80018fe:	4618      	mov	r0, r3
 8001900:	3714      	adds	r7, #20
 8001902:	46bd      	mov	sp, r7
 8001904:	bc80      	pop	{r7}
 8001906:	4770      	bx	lr
 8001908:	40012400 	.word	0x40012400
 800190c:	20000000 	.word	0x20000000
 8001910:	431bde83 	.word	0x431bde83

08001914 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8001914:	b580      	push	{r7, lr}
 8001916:	b084      	sub	sp, #16
 8001918:	af00      	add	r7, sp, #0
 800191a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800191c:	2300      	movs	r3, #0
 800191e:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8001920:	2300      	movs	r3, #0
 8001922:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	689b      	ldr	r3, [r3, #8]
 800192a:	f003 0301 	and.w	r3, r3, #1
 800192e:	2b01      	cmp	r3, #1
 8001930:	d040      	beq.n	80019b4 <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	689a      	ldr	r2, [r3, #8]
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	f042 0201 	orr.w	r2, r2, #1
 8001940:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001942:	4b1f      	ldr	r3, [pc, #124]	; (80019c0 <ADC_Enable+0xac>)
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	4a1f      	ldr	r2, [pc, #124]	; (80019c4 <ADC_Enable+0xb0>)
 8001948:	fba2 2303 	umull	r2, r3, r2, r3
 800194c:	0c9b      	lsrs	r3, r3, #18
 800194e:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8001950:	e002      	b.n	8001958 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 8001952:	68bb      	ldr	r3, [r7, #8]
 8001954:	3b01      	subs	r3, #1
 8001956:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8001958:	68bb      	ldr	r3, [r7, #8]
 800195a:	2b00      	cmp	r3, #0
 800195c:	d1f9      	bne.n	8001952 <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 800195e:	f7ff fc2d 	bl	80011bc <HAL_GetTick>
 8001962:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8001964:	e01f      	b.n	80019a6 <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8001966:	f7ff fc29 	bl	80011bc <HAL_GetTick>
 800196a:	4602      	mov	r2, r0
 800196c:	68fb      	ldr	r3, [r7, #12]
 800196e:	1ad3      	subs	r3, r2, r3
 8001970:	2b02      	cmp	r3, #2
 8001972:	d918      	bls.n	80019a6 <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	689b      	ldr	r3, [r3, #8]
 800197a:	f003 0301 	and.w	r3, r3, #1
 800197e:	2b01      	cmp	r3, #1
 8001980:	d011      	beq.n	80019a6 <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001986:	f043 0210 	orr.w	r2, r3, #16
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001992:	f043 0201 	orr.w	r2, r3, #1
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	62da      	str	r2, [r3, #44]	; 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	2200      	movs	r2, #0
 800199e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 80019a2:	2301      	movs	r3, #1
 80019a4:	e007      	b.n	80019b6 <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	689b      	ldr	r3, [r3, #8]
 80019ac:	f003 0301 	and.w	r3, r3, #1
 80019b0:	2b01      	cmp	r3, #1
 80019b2:	d1d8      	bne.n	8001966 <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 80019b4:	2300      	movs	r3, #0
}
 80019b6:	4618      	mov	r0, r3
 80019b8:	3710      	adds	r7, #16
 80019ba:	46bd      	mov	sp, r7
 80019bc:	bd80      	pop	{r7, pc}
 80019be:	bf00      	nop
 80019c0:	20000000 	.word	0x20000000
 80019c4:	431bde83 	.word	0x431bde83

080019c8 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 80019c8:	b580      	push	{r7, lr}
 80019ca:	b084      	sub	sp, #16
 80019cc:	af00      	add	r7, sp, #0
 80019ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80019d0:	2300      	movs	r3, #0
 80019d2:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	689b      	ldr	r3, [r3, #8]
 80019da:	f003 0301 	and.w	r3, r3, #1
 80019de:	2b01      	cmp	r3, #1
 80019e0:	d12e      	bne.n	8001a40 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	689a      	ldr	r2, [r3, #8]
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	f022 0201 	bic.w	r2, r2, #1
 80019f0:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 80019f2:	f7ff fbe3 	bl	80011bc <HAL_GetTick>
 80019f6:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 80019f8:	e01b      	b.n	8001a32 <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80019fa:	f7ff fbdf 	bl	80011bc <HAL_GetTick>
 80019fe:	4602      	mov	r2, r0
 8001a00:	68fb      	ldr	r3, [r7, #12]
 8001a02:	1ad3      	subs	r3, r2, r3
 8001a04:	2b02      	cmp	r3, #2
 8001a06:	d914      	bls.n	8001a32 <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	689b      	ldr	r3, [r3, #8]
 8001a0e:	f003 0301 	and.w	r3, r3, #1
 8001a12:	2b01      	cmp	r3, #1
 8001a14:	d10d      	bne.n	8001a32 <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a1a:	f043 0210 	orr.w	r2, r3, #16
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a26:	f043 0201 	orr.w	r2, r3, #1
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 8001a2e:	2301      	movs	r3, #1
 8001a30:	e007      	b.n	8001a42 <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	689b      	ldr	r3, [r3, #8]
 8001a38:	f003 0301 	and.w	r3, r3, #1
 8001a3c:	2b01      	cmp	r3, #1
 8001a3e:	d0dc      	beq.n	80019fa <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8001a40:	2300      	movs	r3, #0
}
 8001a42:	4618      	mov	r0, r3
 8001a44:	3710      	adds	r7, #16
 8001a46:	46bd      	mov	sp, r7
 8001a48:	bd80      	pop	{r7, pc}
	...

08001a4c <HAL_ADCEx_Calibration_Start>:
  *         the completion of this function.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef* hadc)
{
 8001a4c:	b590      	push	{r4, r7, lr}
 8001a4e:	b087      	sub	sp, #28
 8001a50:	af00      	add	r7, sp, #0
 8001a52:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001a54:	2300      	movs	r3, #0
 8001a56:	75fb      	strb	r3, [r7, #23]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0U;
 8001a58:	2300      	movs	r3, #0
 8001a5a:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001a62:	2b01      	cmp	r3, #1
 8001a64:	d101      	bne.n	8001a6a <HAL_ADCEx_Calibration_Start+0x1e>
 8001a66:	2302      	movs	r3, #2
 8001a68:	e095      	b.n	8001b96 <HAL_ADCEx_Calibration_Start+0x14a>
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	2201      	movs	r2, #1
 8001a6e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  /* 1. Calibration prerequisite:                                             */
  /*    - ADC must be disabled for at least two ADC clock cycles in disable   */
  /*      mode before ADC enable                                              */
  /* Stop potential conversion on going, on regular and injected groups       */
  /* Disable ADC peripheral */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8001a72:	6878      	ldr	r0, [r7, #4]
 8001a74:	f7ff ffa8 	bl	80019c8 <ADC_ConversionStop_Disable>
 8001a78:	4603      	mov	r3, r0
 8001a7a:	75fb      	strb	r3, [r7, #23]
  
  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8001a7c:	7dfb      	ldrb	r3, [r7, #23]
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	f040 8084 	bne.w	8001b8c <HAL_ADCEx_Calibration_Start+0x140>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a88:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001a8c:	f023 0302 	bic.w	r3, r3, #2
 8001a90:	f043 0202 	orr.w	r2, r3, #2
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Hardware prerequisite: delay before starting the calibration.          */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles.  */
    /*  - Wait for the expected ADC clock cycles delay */
    wait_loop_index = ((SystemCoreClock
                        / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 8001a98:	4b41      	ldr	r3, [pc, #260]	; (8001ba0 <HAL_ADCEx_Calibration_Start+0x154>)
 8001a9a:	681c      	ldr	r4, [r3, #0]
 8001a9c:	2002      	movs	r0, #2
 8001a9e:	f000 ffe5 	bl	8002a6c <HAL_RCCEx_GetPeriphCLKFreq>
 8001aa2:	4603      	mov	r3, r0
 8001aa4:	fbb4 f3f3 	udiv	r3, r4, r3
                       * ADC_PRECALIBRATION_DELAY_ADCCLOCKCYCLES        );
 8001aa8:	005b      	lsls	r3, r3, #1
    wait_loop_index = ((SystemCoreClock
 8001aaa:	60fb      	str	r3, [r7, #12]

    while(wait_loop_index != 0U)
 8001aac:	e002      	b.n	8001ab4 <HAL_ADCEx_Calibration_Start+0x68>
    {
      wait_loop_index--;
 8001aae:	68fb      	ldr	r3, [r7, #12]
 8001ab0:	3b01      	subs	r3, #1
 8001ab2:	60fb      	str	r3, [r7, #12]
    while(wait_loop_index != 0U)
 8001ab4:	68fb      	ldr	r3, [r7, #12]
 8001ab6:	2b00      	cmp	r3, #0
 8001ab8:	d1f9      	bne.n	8001aae <HAL_ADCEx_Calibration_Start+0x62>
    }
    
    /* 2. Enable the ADC peripheral */
    ADC_Enable(hadc);
 8001aba:	6878      	ldr	r0, [r7, #4]
 8001abc:	f7ff ff2a 	bl	8001914 <ADC_Enable>
    
    /* 3. Resets ADC calibration registers */  
    SET_BIT(hadc->Instance->CR2, ADC_CR2_RSTCAL);
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	689a      	ldr	r2, [r3, #8]
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	f042 0208 	orr.w	r2, r2, #8
 8001ace:	609a      	str	r2, [r3, #8]
    
    tickstart = HAL_GetTick();  
 8001ad0:	f7ff fb74 	bl	80011bc <HAL_GetTick>
 8001ad4:	6138      	str	r0, [r7, #16]

    /* Wait for calibration reset completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 8001ad6:	e01b      	b.n	8001b10 <HAL_ADCEx_Calibration_Start+0xc4>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 8001ad8:	f7ff fb70 	bl	80011bc <HAL_GetTick>
 8001adc:	4602      	mov	r2, r0
 8001ade:	693b      	ldr	r3, [r7, #16]
 8001ae0:	1ad3      	subs	r3, r2, r3
 8001ae2:	2b0a      	cmp	r3, #10
 8001ae4:	d914      	bls.n	8001b10 <HAL_ADCEx_Calibration_Start+0xc4>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	689b      	ldr	r3, [r3, #8]
 8001aec:	f003 0308 	and.w	r3, r3, #8
 8001af0:	2b00      	cmp	r3, #0
 8001af2:	d00d      	beq.n	8001b10 <HAL_ADCEx_Calibration_Start+0xc4>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001af8:	f023 0312 	bic.w	r3, r3, #18
 8001afc:	f043 0210 	orr.w	r2, r3, #16
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	629a      	str	r2, [r3, #40]	; 0x28
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	2200      	movs	r2, #0
 8001b08:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 8001b0c:	2301      	movs	r3, #1
 8001b0e:	e042      	b.n	8001b96 <HAL_ADCEx_Calibration_Start+0x14a>
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	689b      	ldr	r3, [r3, #8]
 8001b16:	f003 0308 	and.w	r3, r3, #8
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	d1dc      	bne.n	8001ad8 <HAL_ADCEx_Calibration_Start+0x8c>
        }
      }
    }
    
    /* 4. Start ADC calibration */
    SET_BIT(hadc->Instance->CR2, ADC_CR2_CAL);
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	689a      	ldr	r2, [r3, #8]
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	f042 0204 	orr.w	r2, r2, #4
 8001b2c:	609a      	str	r2, [r3, #8]
    
    tickstart = HAL_GetTick();  
 8001b2e:	f7ff fb45 	bl	80011bc <HAL_GetTick>
 8001b32:	6138      	str	r0, [r7, #16]

    /* Wait for calibration completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 8001b34:	e01b      	b.n	8001b6e <HAL_ADCEx_Calibration_Start+0x122>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 8001b36:	f7ff fb41 	bl	80011bc <HAL_GetTick>
 8001b3a:	4602      	mov	r2, r0
 8001b3c:	693b      	ldr	r3, [r7, #16]
 8001b3e:	1ad3      	subs	r3, r2, r3
 8001b40:	2b0a      	cmp	r3, #10
 8001b42:	d914      	bls.n	8001b6e <HAL_ADCEx_Calibration_Start+0x122>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	689b      	ldr	r3, [r3, #8]
 8001b4a:	f003 0304 	and.w	r3, r3, #4
 8001b4e:	2b00      	cmp	r3, #0
 8001b50:	d00d      	beq.n	8001b6e <HAL_ADCEx_Calibration_Start+0x122>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b56:	f023 0312 	bic.w	r3, r3, #18
 8001b5a:	f043 0210 	orr.w	r2, r3, #16
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	629a      	str	r2, [r3, #40]	; 0x28
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	2200      	movs	r2, #0
 8001b66:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 8001b6a:	2301      	movs	r3, #1
 8001b6c:	e013      	b.n	8001b96 <HAL_ADCEx_Calibration_Start+0x14a>
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	689b      	ldr	r3, [r3, #8]
 8001b74:	f003 0304 	and.w	r3, r3, #4
 8001b78:	2b00      	cmp	r3, #0
 8001b7a:	d1dc      	bne.n	8001b36 <HAL_ADCEx_Calibration_Start+0xea>
        }
      }
    }
    
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b80:	f023 0303 	bic.w	r3, r3, #3
 8001b84:	f043 0201 	orr.w	r2, r3, #1
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	2200      	movs	r2, #0
 8001b90:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8001b94:	7dfb      	ldrb	r3, [r7, #23]
}
 8001b96:	4618      	mov	r0, r3
 8001b98:	371c      	adds	r7, #28
 8001b9a:	46bd      	mov	sp, r7
 8001b9c:	bd90      	pop	{r4, r7, pc}
 8001b9e:	bf00      	nop
 8001ba0:	20000000 	.word	0x20000000

08001ba4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ba4:	b480      	push	{r7}
 8001ba6:	b085      	sub	sp, #20
 8001ba8:	af00      	add	r7, sp, #0
 8001baa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	f003 0307 	and.w	r3, r3, #7
 8001bb2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001bb4:	4b0c      	ldr	r3, [pc, #48]	; (8001be8 <__NVIC_SetPriorityGrouping+0x44>)
 8001bb6:	68db      	ldr	r3, [r3, #12]
 8001bb8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001bba:	68ba      	ldr	r2, [r7, #8]
 8001bbc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001bc0:	4013      	ands	r3, r2
 8001bc2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001bc4:	68fb      	ldr	r3, [r7, #12]
 8001bc6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001bc8:	68bb      	ldr	r3, [r7, #8]
 8001bca:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001bcc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001bd0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001bd4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001bd6:	4a04      	ldr	r2, [pc, #16]	; (8001be8 <__NVIC_SetPriorityGrouping+0x44>)
 8001bd8:	68bb      	ldr	r3, [r7, #8]
 8001bda:	60d3      	str	r3, [r2, #12]
}
 8001bdc:	bf00      	nop
 8001bde:	3714      	adds	r7, #20
 8001be0:	46bd      	mov	sp, r7
 8001be2:	bc80      	pop	{r7}
 8001be4:	4770      	bx	lr
 8001be6:	bf00      	nop
 8001be8:	e000ed00 	.word	0xe000ed00

08001bec <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001bec:	b480      	push	{r7}
 8001bee:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001bf0:	4b04      	ldr	r3, [pc, #16]	; (8001c04 <__NVIC_GetPriorityGrouping+0x18>)
 8001bf2:	68db      	ldr	r3, [r3, #12]
 8001bf4:	0a1b      	lsrs	r3, r3, #8
 8001bf6:	f003 0307 	and.w	r3, r3, #7
}
 8001bfa:	4618      	mov	r0, r3
 8001bfc:	46bd      	mov	sp, r7
 8001bfe:	bc80      	pop	{r7}
 8001c00:	4770      	bx	lr
 8001c02:	bf00      	nop
 8001c04:	e000ed00 	.word	0xe000ed00

08001c08 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001c08:	b480      	push	{r7}
 8001c0a:	b083      	sub	sp, #12
 8001c0c:	af00      	add	r7, sp, #0
 8001c0e:	4603      	mov	r3, r0
 8001c10:	6039      	str	r1, [r7, #0]
 8001c12:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c14:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c18:	2b00      	cmp	r3, #0
 8001c1a:	db0a      	blt.n	8001c32 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c1c:	683b      	ldr	r3, [r7, #0]
 8001c1e:	b2da      	uxtb	r2, r3
 8001c20:	490c      	ldr	r1, [pc, #48]	; (8001c54 <__NVIC_SetPriority+0x4c>)
 8001c22:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c26:	0112      	lsls	r2, r2, #4
 8001c28:	b2d2      	uxtb	r2, r2
 8001c2a:	440b      	add	r3, r1
 8001c2c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001c30:	e00a      	b.n	8001c48 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c32:	683b      	ldr	r3, [r7, #0]
 8001c34:	b2da      	uxtb	r2, r3
 8001c36:	4908      	ldr	r1, [pc, #32]	; (8001c58 <__NVIC_SetPriority+0x50>)
 8001c38:	79fb      	ldrb	r3, [r7, #7]
 8001c3a:	f003 030f 	and.w	r3, r3, #15
 8001c3e:	3b04      	subs	r3, #4
 8001c40:	0112      	lsls	r2, r2, #4
 8001c42:	b2d2      	uxtb	r2, r2
 8001c44:	440b      	add	r3, r1
 8001c46:	761a      	strb	r2, [r3, #24]
}
 8001c48:	bf00      	nop
 8001c4a:	370c      	adds	r7, #12
 8001c4c:	46bd      	mov	sp, r7
 8001c4e:	bc80      	pop	{r7}
 8001c50:	4770      	bx	lr
 8001c52:	bf00      	nop
 8001c54:	e000e100 	.word	0xe000e100
 8001c58:	e000ed00 	.word	0xe000ed00

08001c5c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001c5c:	b480      	push	{r7}
 8001c5e:	b089      	sub	sp, #36	; 0x24
 8001c60:	af00      	add	r7, sp, #0
 8001c62:	60f8      	str	r0, [r7, #12]
 8001c64:	60b9      	str	r1, [r7, #8]
 8001c66:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001c68:	68fb      	ldr	r3, [r7, #12]
 8001c6a:	f003 0307 	and.w	r3, r3, #7
 8001c6e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001c70:	69fb      	ldr	r3, [r7, #28]
 8001c72:	f1c3 0307 	rsb	r3, r3, #7
 8001c76:	2b04      	cmp	r3, #4
 8001c78:	bf28      	it	cs
 8001c7a:	2304      	movcs	r3, #4
 8001c7c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001c7e:	69fb      	ldr	r3, [r7, #28]
 8001c80:	3304      	adds	r3, #4
 8001c82:	2b06      	cmp	r3, #6
 8001c84:	d902      	bls.n	8001c8c <NVIC_EncodePriority+0x30>
 8001c86:	69fb      	ldr	r3, [r7, #28]
 8001c88:	3b03      	subs	r3, #3
 8001c8a:	e000      	b.n	8001c8e <NVIC_EncodePriority+0x32>
 8001c8c:	2300      	movs	r3, #0
 8001c8e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c90:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001c94:	69bb      	ldr	r3, [r7, #24]
 8001c96:	fa02 f303 	lsl.w	r3, r2, r3
 8001c9a:	43da      	mvns	r2, r3
 8001c9c:	68bb      	ldr	r3, [r7, #8]
 8001c9e:	401a      	ands	r2, r3
 8001ca0:	697b      	ldr	r3, [r7, #20]
 8001ca2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001ca4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001ca8:	697b      	ldr	r3, [r7, #20]
 8001caa:	fa01 f303 	lsl.w	r3, r1, r3
 8001cae:	43d9      	mvns	r1, r3
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001cb4:	4313      	orrs	r3, r2
         );
}
 8001cb6:	4618      	mov	r0, r3
 8001cb8:	3724      	adds	r7, #36	; 0x24
 8001cba:	46bd      	mov	sp, r7
 8001cbc:	bc80      	pop	{r7}
 8001cbe:	4770      	bx	lr

08001cc0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001cc0:	b580      	push	{r7, lr}
 8001cc2:	b082      	sub	sp, #8
 8001cc4:	af00      	add	r7, sp, #0
 8001cc6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	3b01      	subs	r3, #1
 8001ccc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001cd0:	d301      	bcc.n	8001cd6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001cd2:	2301      	movs	r3, #1
 8001cd4:	e00f      	b.n	8001cf6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001cd6:	4a0a      	ldr	r2, [pc, #40]	; (8001d00 <SysTick_Config+0x40>)
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	3b01      	subs	r3, #1
 8001cdc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001cde:	210f      	movs	r1, #15
 8001ce0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001ce4:	f7ff ff90 	bl	8001c08 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001ce8:	4b05      	ldr	r3, [pc, #20]	; (8001d00 <SysTick_Config+0x40>)
 8001cea:	2200      	movs	r2, #0
 8001cec:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001cee:	4b04      	ldr	r3, [pc, #16]	; (8001d00 <SysTick_Config+0x40>)
 8001cf0:	2207      	movs	r2, #7
 8001cf2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001cf4:	2300      	movs	r3, #0
}
 8001cf6:	4618      	mov	r0, r3
 8001cf8:	3708      	adds	r7, #8
 8001cfa:	46bd      	mov	sp, r7
 8001cfc:	bd80      	pop	{r7, pc}
 8001cfe:	bf00      	nop
 8001d00:	e000e010 	.word	0xe000e010

08001d04 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d04:	b580      	push	{r7, lr}
 8001d06:	b082      	sub	sp, #8
 8001d08:	af00      	add	r7, sp, #0
 8001d0a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001d0c:	6878      	ldr	r0, [r7, #4]
 8001d0e:	f7ff ff49 	bl	8001ba4 <__NVIC_SetPriorityGrouping>
}
 8001d12:	bf00      	nop
 8001d14:	3708      	adds	r7, #8
 8001d16:	46bd      	mov	sp, r7
 8001d18:	bd80      	pop	{r7, pc}

08001d1a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001d1a:	b580      	push	{r7, lr}
 8001d1c:	b086      	sub	sp, #24
 8001d1e:	af00      	add	r7, sp, #0
 8001d20:	4603      	mov	r3, r0
 8001d22:	60b9      	str	r1, [r7, #8]
 8001d24:	607a      	str	r2, [r7, #4]
 8001d26:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001d28:	2300      	movs	r3, #0
 8001d2a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001d2c:	f7ff ff5e 	bl	8001bec <__NVIC_GetPriorityGrouping>
 8001d30:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001d32:	687a      	ldr	r2, [r7, #4]
 8001d34:	68b9      	ldr	r1, [r7, #8]
 8001d36:	6978      	ldr	r0, [r7, #20]
 8001d38:	f7ff ff90 	bl	8001c5c <NVIC_EncodePriority>
 8001d3c:	4602      	mov	r2, r0
 8001d3e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001d42:	4611      	mov	r1, r2
 8001d44:	4618      	mov	r0, r3
 8001d46:	f7ff ff5f 	bl	8001c08 <__NVIC_SetPriority>
}
 8001d4a:	bf00      	nop
 8001d4c:	3718      	adds	r7, #24
 8001d4e:	46bd      	mov	sp, r7
 8001d50:	bd80      	pop	{r7, pc}

08001d52 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001d52:	b580      	push	{r7, lr}
 8001d54:	b082      	sub	sp, #8
 8001d56:	af00      	add	r7, sp, #0
 8001d58:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001d5a:	6878      	ldr	r0, [r7, #4]
 8001d5c:	f7ff ffb0 	bl	8001cc0 <SysTick_Config>
 8001d60:	4603      	mov	r3, r0
}
 8001d62:	4618      	mov	r0, r3
 8001d64:	3708      	adds	r7, #8
 8001d66:	46bd      	mov	sp, r7
 8001d68:	bd80      	pop	{r7, pc}
	...

08001d6c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001d6c:	b480      	push	{r7}
 8001d6e:	b08b      	sub	sp, #44	; 0x2c
 8001d70:	af00      	add	r7, sp, #0
 8001d72:	6078      	str	r0, [r7, #4]
 8001d74:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001d76:	2300      	movs	r3, #0
 8001d78:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001d7a:	2300      	movs	r3, #0
 8001d7c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001d7e:	e179      	b.n	8002074 <HAL_GPIO_Init+0x308>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001d80:	2201      	movs	r2, #1
 8001d82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d84:	fa02 f303 	lsl.w	r3, r2, r3
 8001d88:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001d8a:	683b      	ldr	r3, [r7, #0]
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	69fa      	ldr	r2, [r7, #28]
 8001d90:	4013      	ands	r3, r2
 8001d92:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001d94:	69ba      	ldr	r2, [r7, #24]
 8001d96:	69fb      	ldr	r3, [r7, #28]
 8001d98:	429a      	cmp	r2, r3
 8001d9a:	f040 8168 	bne.w	800206e <HAL_GPIO_Init+0x302>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001d9e:	683b      	ldr	r3, [r7, #0]
 8001da0:	685b      	ldr	r3, [r3, #4]
 8001da2:	4a96      	ldr	r2, [pc, #600]	; (8001ffc <HAL_GPIO_Init+0x290>)
 8001da4:	4293      	cmp	r3, r2
 8001da6:	d05e      	beq.n	8001e66 <HAL_GPIO_Init+0xfa>
 8001da8:	4a94      	ldr	r2, [pc, #592]	; (8001ffc <HAL_GPIO_Init+0x290>)
 8001daa:	4293      	cmp	r3, r2
 8001dac:	d875      	bhi.n	8001e9a <HAL_GPIO_Init+0x12e>
 8001dae:	4a94      	ldr	r2, [pc, #592]	; (8002000 <HAL_GPIO_Init+0x294>)
 8001db0:	4293      	cmp	r3, r2
 8001db2:	d058      	beq.n	8001e66 <HAL_GPIO_Init+0xfa>
 8001db4:	4a92      	ldr	r2, [pc, #584]	; (8002000 <HAL_GPIO_Init+0x294>)
 8001db6:	4293      	cmp	r3, r2
 8001db8:	d86f      	bhi.n	8001e9a <HAL_GPIO_Init+0x12e>
 8001dba:	4a92      	ldr	r2, [pc, #584]	; (8002004 <HAL_GPIO_Init+0x298>)
 8001dbc:	4293      	cmp	r3, r2
 8001dbe:	d052      	beq.n	8001e66 <HAL_GPIO_Init+0xfa>
 8001dc0:	4a90      	ldr	r2, [pc, #576]	; (8002004 <HAL_GPIO_Init+0x298>)
 8001dc2:	4293      	cmp	r3, r2
 8001dc4:	d869      	bhi.n	8001e9a <HAL_GPIO_Init+0x12e>
 8001dc6:	4a90      	ldr	r2, [pc, #576]	; (8002008 <HAL_GPIO_Init+0x29c>)
 8001dc8:	4293      	cmp	r3, r2
 8001dca:	d04c      	beq.n	8001e66 <HAL_GPIO_Init+0xfa>
 8001dcc:	4a8e      	ldr	r2, [pc, #568]	; (8002008 <HAL_GPIO_Init+0x29c>)
 8001dce:	4293      	cmp	r3, r2
 8001dd0:	d863      	bhi.n	8001e9a <HAL_GPIO_Init+0x12e>
 8001dd2:	4a8e      	ldr	r2, [pc, #568]	; (800200c <HAL_GPIO_Init+0x2a0>)
 8001dd4:	4293      	cmp	r3, r2
 8001dd6:	d046      	beq.n	8001e66 <HAL_GPIO_Init+0xfa>
 8001dd8:	4a8c      	ldr	r2, [pc, #560]	; (800200c <HAL_GPIO_Init+0x2a0>)
 8001dda:	4293      	cmp	r3, r2
 8001ddc:	d85d      	bhi.n	8001e9a <HAL_GPIO_Init+0x12e>
 8001dde:	2b12      	cmp	r3, #18
 8001de0:	d82a      	bhi.n	8001e38 <HAL_GPIO_Init+0xcc>
 8001de2:	2b12      	cmp	r3, #18
 8001de4:	d859      	bhi.n	8001e9a <HAL_GPIO_Init+0x12e>
 8001de6:	a201      	add	r2, pc, #4	; (adr r2, 8001dec <HAL_GPIO_Init+0x80>)
 8001de8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001dec:	08001e67 	.word	0x08001e67
 8001df0:	08001e41 	.word	0x08001e41
 8001df4:	08001e53 	.word	0x08001e53
 8001df8:	08001e95 	.word	0x08001e95
 8001dfc:	08001e9b 	.word	0x08001e9b
 8001e00:	08001e9b 	.word	0x08001e9b
 8001e04:	08001e9b 	.word	0x08001e9b
 8001e08:	08001e9b 	.word	0x08001e9b
 8001e0c:	08001e9b 	.word	0x08001e9b
 8001e10:	08001e9b 	.word	0x08001e9b
 8001e14:	08001e9b 	.word	0x08001e9b
 8001e18:	08001e9b 	.word	0x08001e9b
 8001e1c:	08001e9b 	.word	0x08001e9b
 8001e20:	08001e9b 	.word	0x08001e9b
 8001e24:	08001e9b 	.word	0x08001e9b
 8001e28:	08001e9b 	.word	0x08001e9b
 8001e2c:	08001e9b 	.word	0x08001e9b
 8001e30:	08001e49 	.word	0x08001e49
 8001e34:	08001e5d 	.word	0x08001e5d
 8001e38:	4a75      	ldr	r2, [pc, #468]	; (8002010 <HAL_GPIO_Init+0x2a4>)
 8001e3a:	4293      	cmp	r3, r2
 8001e3c:	d013      	beq.n	8001e66 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001e3e:	e02c      	b.n	8001e9a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001e40:	683b      	ldr	r3, [r7, #0]
 8001e42:	68db      	ldr	r3, [r3, #12]
 8001e44:	623b      	str	r3, [r7, #32]
          break;
 8001e46:	e029      	b.n	8001e9c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001e48:	683b      	ldr	r3, [r7, #0]
 8001e4a:	68db      	ldr	r3, [r3, #12]
 8001e4c:	3304      	adds	r3, #4
 8001e4e:	623b      	str	r3, [r7, #32]
          break;
 8001e50:	e024      	b.n	8001e9c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001e52:	683b      	ldr	r3, [r7, #0]
 8001e54:	68db      	ldr	r3, [r3, #12]
 8001e56:	3308      	adds	r3, #8
 8001e58:	623b      	str	r3, [r7, #32]
          break;
 8001e5a:	e01f      	b.n	8001e9c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001e5c:	683b      	ldr	r3, [r7, #0]
 8001e5e:	68db      	ldr	r3, [r3, #12]
 8001e60:	330c      	adds	r3, #12
 8001e62:	623b      	str	r3, [r7, #32]
          break;
 8001e64:	e01a      	b.n	8001e9c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001e66:	683b      	ldr	r3, [r7, #0]
 8001e68:	689b      	ldr	r3, [r3, #8]
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	d102      	bne.n	8001e74 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001e6e:	2304      	movs	r3, #4
 8001e70:	623b      	str	r3, [r7, #32]
          break;
 8001e72:	e013      	b.n	8001e9c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001e74:	683b      	ldr	r3, [r7, #0]
 8001e76:	689b      	ldr	r3, [r3, #8]
 8001e78:	2b01      	cmp	r3, #1
 8001e7a:	d105      	bne.n	8001e88 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001e7c:	2308      	movs	r3, #8
 8001e7e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	69fa      	ldr	r2, [r7, #28]
 8001e84:	611a      	str	r2, [r3, #16]
          break;
 8001e86:	e009      	b.n	8001e9c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001e88:	2308      	movs	r3, #8
 8001e8a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	69fa      	ldr	r2, [r7, #28]
 8001e90:	615a      	str	r2, [r3, #20]
          break;
 8001e92:	e003      	b.n	8001e9c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001e94:	2300      	movs	r3, #0
 8001e96:	623b      	str	r3, [r7, #32]
          break;
 8001e98:	e000      	b.n	8001e9c <HAL_GPIO_Init+0x130>
          break;
 8001e9a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001e9c:	69bb      	ldr	r3, [r7, #24]
 8001e9e:	2bff      	cmp	r3, #255	; 0xff
 8001ea0:	d801      	bhi.n	8001ea6 <HAL_GPIO_Init+0x13a>
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	e001      	b.n	8001eaa <HAL_GPIO_Init+0x13e>
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	3304      	adds	r3, #4
 8001eaa:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001eac:	69bb      	ldr	r3, [r7, #24]
 8001eae:	2bff      	cmp	r3, #255	; 0xff
 8001eb0:	d802      	bhi.n	8001eb8 <HAL_GPIO_Init+0x14c>
 8001eb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001eb4:	009b      	lsls	r3, r3, #2
 8001eb6:	e002      	b.n	8001ebe <HAL_GPIO_Init+0x152>
 8001eb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001eba:	3b08      	subs	r3, #8
 8001ebc:	009b      	lsls	r3, r3, #2
 8001ebe:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001ec0:	697b      	ldr	r3, [r7, #20]
 8001ec2:	681a      	ldr	r2, [r3, #0]
 8001ec4:	210f      	movs	r1, #15
 8001ec6:	693b      	ldr	r3, [r7, #16]
 8001ec8:	fa01 f303 	lsl.w	r3, r1, r3
 8001ecc:	43db      	mvns	r3, r3
 8001ece:	401a      	ands	r2, r3
 8001ed0:	6a39      	ldr	r1, [r7, #32]
 8001ed2:	693b      	ldr	r3, [r7, #16]
 8001ed4:	fa01 f303 	lsl.w	r3, r1, r3
 8001ed8:	431a      	orrs	r2, r3
 8001eda:	697b      	ldr	r3, [r7, #20]
 8001edc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001ede:	683b      	ldr	r3, [r7, #0]
 8001ee0:	685b      	ldr	r3, [r3, #4]
 8001ee2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ee6:	2b00      	cmp	r3, #0
 8001ee8:	f000 80c1 	beq.w	800206e <HAL_GPIO_Init+0x302>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001eec:	4b49      	ldr	r3, [pc, #292]	; (8002014 <HAL_GPIO_Init+0x2a8>)
 8001eee:	699b      	ldr	r3, [r3, #24]
 8001ef0:	4a48      	ldr	r2, [pc, #288]	; (8002014 <HAL_GPIO_Init+0x2a8>)
 8001ef2:	f043 0301 	orr.w	r3, r3, #1
 8001ef6:	6193      	str	r3, [r2, #24]
 8001ef8:	4b46      	ldr	r3, [pc, #280]	; (8002014 <HAL_GPIO_Init+0x2a8>)
 8001efa:	699b      	ldr	r3, [r3, #24]
 8001efc:	f003 0301 	and.w	r3, r3, #1
 8001f00:	60bb      	str	r3, [r7, #8]
 8001f02:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001f04:	4a44      	ldr	r2, [pc, #272]	; (8002018 <HAL_GPIO_Init+0x2ac>)
 8001f06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f08:	089b      	lsrs	r3, r3, #2
 8001f0a:	3302      	adds	r3, #2
 8001f0c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001f10:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001f12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f14:	f003 0303 	and.w	r3, r3, #3
 8001f18:	009b      	lsls	r3, r3, #2
 8001f1a:	220f      	movs	r2, #15
 8001f1c:	fa02 f303 	lsl.w	r3, r2, r3
 8001f20:	43db      	mvns	r3, r3
 8001f22:	68fa      	ldr	r2, [r7, #12]
 8001f24:	4013      	ands	r3, r2
 8001f26:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	4a3c      	ldr	r2, [pc, #240]	; (800201c <HAL_GPIO_Init+0x2b0>)
 8001f2c:	4293      	cmp	r3, r2
 8001f2e:	d01f      	beq.n	8001f70 <HAL_GPIO_Init+0x204>
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	4a3b      	ldr	r2, [pc, #236]	; (8002020 <HAL_GPIO_Init+0x2b4>)
 8001f34:	4293      	cmp	r3, r2
 8001f36:	d019      	beq.n	8001f6c <HAL_GPIO_Init+0x200>
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	4a3a      	ldr	r2, [pc, #232]	; (8002024 <HAL_GPIO_Init+0x2b8>)
 8001f3c:	4293      	cmp	r3, r2
 8001f3e:	d013      	beq.n	8001f68 <HAL_GPIO_Init+0x1fc>
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	4a39      	ldr	r2, [pc, #228]	; (8002028 <HAL_GPIO_Init+0x2bc>)
 8001f44:	4293      	cmp	r3, r2
 8001f46:	d00d      	beq.n	8001f64 <HAL_GPIO_Init+0x1f8>
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	4a38      	ldr	r2, [pc, #224]	; (800202c <HAL_GPIO_Init+0x2c0>)
 8001f4c:	4293      	cmp	r3, r2
 8001f4e:	d007      	beq.n	8001f60 <HAL_GPIO_Init+0x1f4>
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	4a37      	ldr	r2, [pc, #220]	; (8002030 <HAL_GPIO_Init+0x2c4>)
 8001f54:	4293      	cmp	r3, r2
 8001f56:	d101      	bne.n	8001f5c <HAL_GPIO_Init+0x1f0>
 8001f58:	2305      	movs	r3, #5
 8001f5a:	e00a      	b.n	8001f72 <HAL_GPIO_Init+0x206>
 8001f5c:	2306      	movs	r3, #6
 8001f5e:	e008      	b.n	8001f72 <HAL_GPIO_Init+0x206>
 8001f60:	2304      	movs	r3, #4
 8001f62:	e006      	b.n	8001f72 <HAL_GPIO_Init+0x206>
 8001f64:	2303      	movs	r3, #3
 8001f66:	e004      	b.n	8001f72 <HAL_GPIO_Init+0x206>
 8001f68:	2302      	movs	r3, #2
 8001f6a:	e002      	b.n	8001f72 <HAL_GPIO_Init+0x206>
 8001f6c:	2301      	movs	r3, #1
 8001f6e:	e000      	b.n	8001f72 <HAL_GPIO_Init+0x206>
 8001f70:	2300      	movs	r3, #0
 8001f72:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001f74:	f002 0203 	and.w	r2, r2, #3
 8001f78:	0092      	lsls	r2, r2, #2
 8001f7a:	4093      	lsls	r3, r2
 8001f7c:	68fa      	ldr	r2, [r7, #12]
 8001f7e:	4313      	orrs	r3, r2
 8001f80:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001f82:	4925      	ldr	r1, [pc, #148]	; (8002018 <HAL_GPIO_Init+0x2ac>)
 8001f84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f86:	089b      	lsrs	r3, r3, #2
 8001f88:	3302      	adds	r3, #2
 8001f8a:	68fa      	ldr	r2, [r7, #12]
 8001f8c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001f90:	683b      	ldr	r3, [r7, #0]
 8001f92:	685b      	ldr	r3, [r3, #4]
 8001f94:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001f98:	2b00      	cmp	r3, #0
 8001f9a:	d006      	beq.n	8001faa <HAL_GPIO_Init+0x23e>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001f9c:	4b25      	ldr	r3, [pc, #148]	; (8002034 <HAL_GPIO_Init+0x2c8>)
 8001f9e:	681a      	ldr	r2, [r3, #0]
 8001fa0:	4924      	ldr	r1, [pc, #144]	; (8002034 <HAL_GPIO_Init+0x2c8>)
 8001fa2:	69bb      	ldr	r3, [r7, #24]
 8001fa4:	4313      	orrs	r3, r2
 8001fa6:	600b      	str	r3, [r1, #0]
 8001fa8:	e006      	b.n	8001fb8 <HAL_GPIO_Init+0x24c>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001faa:	4b22      	ldr	r3, [pc, #136]	; (8002034 <HAL_GPIO_Init+0x2c8>)
 8001fac:	681a      	ldr	r2, [r3, #0]
 8001fae:	69bb      	ldr	r3, [r7, #24]
 8001fb0:	43db      	mvns	r3, r3
 8001fb2:	4920      	ldr	r1, [pc, #128]	; (8002034 <HAL_GPIO_Init+0x2c8>)
 8001fb4:	4013      	ands	r3, r2
 8001fb6:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001fb8:	683b      	ldr	r3, [r7, #0]
 8001fba:	685b      	ldr	r3, [r3, #4]
 8001fbc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001fc0:	2b00      	cmp	r3, #0
 8001fc2:	d006      	beq.n	8001fd2 <HAL_GPIO_Init+0x266>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001fc4:	4b1b      	ldr	r3, [pc, #108]	; (8002034 <HAL_GPIO_Init+0x2c8>)
 8001fc6:	685a      	ldr	r2, [r3, #4]
 8001fc8:	491a      	ldr	r1, [pc, #104]	; (8002034 <HAL_GPIO_Init+0x2c8>)
 8001fca:	69bb      	ldr	r3, [r7, #24]
 8001fcc:	4313      	orrs	r3, r2
 8001fce:	604b      	str	r3, [r1, #4]
 8001fd0:	e006      	b.n	8001fe0 <HAL_GPIO_Init+0x274>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001fd2:	4b18      	ldr	r3, [pc, #96]	; (8002034 <HAL_GPIO_Init+0x2c8>)
 8001fd4:	685a      	ldr	r2, [r3, #4]
 8001fd6:	69bb      	ldr	r3, [r7, #24]
 8001fd8:	43db      	mvns	r3, r3
 8001fda:	4916      	ldr	r1, [pc, #88]	; (8002034 <HAL_GPIO_Init+0x2c8>)
 8001fdc:	4013      	ands	r3, r2
 8001fde:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001fe0:	683b      	ldr	r3, [r7, #0]
 8001fe2:	685b      	ldr	r3, [r3, #4]
 8001fe4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001fe8:	2b00      	cmp	r3, #0
 8001fea:	d025      	beq.n	8002038 <HAL_GPIO_Init+0x2cc>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001fec:	4b11      	ldr	r3, [pc, #68]	; (8002034 <HAL_GPIO_Init+0x2c8>)
 8001fee:	689a      	ldr	r2, [r3, #8]
 8001ff0:	4910      	ldr	r1, [pc, #64]	; (8002034 <HAL_GPIO_Init+0x2c8>)
 8001ff2:	69bb      	ldr	r3, [r7, #24]
 8001ff4:	4313      	orrs	r3, r2
 8001ff6:	608b      	str	r3, [r1, #8]
 8001ff8:	e025      	b.n	8002046 <HAL_GPIO_Init+0x2da>
 8001ffa:	bf00      	nop
 8001ffc:	10320000 	.word	0x10320000
 8002000:	10310000 	.word	0x10310000
 8002004:	10220000 	.word	0x10220000
 8002008:	10210000 	.word	0x10210000
 800200c:	10120000 	.word	0x10120000
 8002010:	10110000 	.word	0x10110000
 8002014:	40021000 	.word	0x40021000
 8002018:	40010000 	.word	0x40010000
 800201c:	40010800 	.word	0x40010800
 8002020:	40010c00 	.word	0x40010c00
 8002024:	40011000 	.word	0x40011000
 8002028:	40011400 	.word	0x40011400
 800202c:	40011800 	.word	0x40011800
 8002030:	40011c00 	.word	0x40011c00
 8002034:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002038:	4b15      	ldr	r3, [pc, #84]	; (8002090 <HAL_GPIO_Init+0x324>)
 800203a:	689a      	ldr	r2, [r3, #8]
 800203c:	69bb      	ldr	r3, [r7, #24]
 800203e:	43db      	mvns	r3, r3
 8002040:	4913      	ldr	r1, [pc, #76]	; (8002090 <HAL_GPIO_Init+0x324>)
 8002042:	4013      	ands	r3, r2
 8002044:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002046:	683b      	ldr	r3, [r7, #0]
 8002048:	685b      	ldr	r3, [r3, #4]
 800204a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800204e:	2b00      	cmp	r3, #0
 8002050:	d006      	beq.n	8002060 <HAL_GPIO_Init+0x2f4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002052:	4b0f      	ldr	r3, [pc, #60]	; (8002090 <HAL_GPIO_Init+0x324>)
 8002054:	68da      	ldr	r2, [r3, #12]
 8002056:	490e      	ldr	r1, [pc, #56]	; (8002090 <HAL_GPIO_Init+0x324>)
 8002058:	69bb      	ldr	r3, [r7, #24]
 800205a:	4313      	orrs	r3, r2
 800205c:	60cb      	str	r3, [r1, #12]
 800205e:	e006      	b.n	800206e <HAL_GPIO_Init+0x302>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002060:	4b0b      	ldr	r3, [pc, #44]	; (8002090 <HAL_GPIO_Init+0x324>)
 8002062:	68da      	ldr	r2, [r3, #12]
 8002064:	69bb      	ldr	r3, [r7, #24]
 8002066:	43db      	mvns	r3, r3
 8002068:	4909      	ldr	r1, [pc, #36]	; (8002090 <HAL_GPIO_Init+0x324>)
 800206a:	4013      	ands	r3, r2
 800206c:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 800206e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002070:	3301      	adds	r3, #1
 8002072:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002074:	683b      	ldr	r3, [r7, #0]
 8002076:	681a      	ldr	r2, [r3, #0]
 8002078:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800207a:	fa22 f303 	lsr.w	r3, r2, r3
 800207e:	2b00      	cmp	r3, #0
 8002080:	f47f ae7e 	bne.w	8001d80 <HAL_GPIO_Init+0x14>
  }
}
 8002084:	bf00      	nop
 8002086:	bf00      	nop
 8002088:	372c      	adds	r7, #44	; 0x2c
 800208a:	46bd      	mov	sp, r7
 800208c:	bc80      	pop	{r7}
 800208e:	4770      	bx	lr
 8002090:	40010400 	.word	0x40010400

08002094 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002094:	b480      	push	{r7}
 8002096:	b085      	sub	sp, #20
 8002098:	af00      	add	r7, sp, #0
 800209a:	6078      	str	r0, [r7, #4]
 800209c:	460b      	mov	r3, r1
 800209e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	689a      	ldr	r2, [r3, #8]
 80020a4:	887b      	ldrh	r3, [r7, #2]
 80020a6:	4013      	ands	r3, r2
 80020a8:	2b00      	cmp	r3, #0
 80020aa:	d002      	beq.n	80020b2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80020ac:	2301      	movs	r3, #1
 80020ae:	73fb      	strb	r3, [r7, #15]
 80020b0:	e001      	b.n	80020b6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80020b2:	2300      	movs	r3, #0
 80020b4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80020b6:	7bfb      	ldrb	r3, [r7, #15]
}
 80020b8:	4618      	mov	r0, r3
 80020ba:	3714      	adds	r7, #20
 80020bc:	46bd      	mov	sp, r7
 80020be:	bc80      	pop	{r7}
 80020c0:	4770      	bx	lr

080020c2 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80020c2:	b480      	push	{r7}
 80020c4:	b083      	sub	sp, #12
 80020c6:	af00      	add	r7, sp, #0
 80020c8:	6078      	str	r0, [r7, #4]
 80020ca:	460b      	mov	r3, r1
 80020cc:	807b      	strh	r3, [r7, #2]
 80020ce:	4613      	mov	r3, r2
 80020d0:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80020d2:	787b      	ldrb	r3, [r7, #1]
 80020d4:	2b00      	cmp	r3, #0
 80020d6:	d003      	beq.n	80020e0 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80020d8:	887a      	ldrh	r2, [r7, #2]
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80020de:	e003      	b.n	80020e8 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80020e0:	887b      	ldrh	r3, [r7, #2]
 80020e2:	041a      	lsls	r2, r3, #16
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	611a      	str	r2, [r3, #16]
}
 80020e8:	bf00      	nop
 80020ea:	370c      	adds	r7, #12
 80020ec:	46bd      	mov	sp, r7
 80020ee:	bc80      	pop	{r7}
 80020f0:	4770      	bx	lr
	...

080020f4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80020f4:	b580      	push	{r7, lr}
 80020f6:	b086      	sub	sp, #24
 80020f8:	af00      	add	r7, sp, #0
 80020fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	2b00      	cmp	r3, #0
 8002100:	d101      	bne.n	8002106 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002102:	2301      	movs	r3, #1
 8002104:	e272      	b.n	80025ec <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	f003 0301 	and.w	r3, r3, #1
 800210e:	2b00      	cmp	r3, #0
 8002110:	f000 8087 	beq.w	8002222 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002114:	4b92      	ldr	r3, [pc, #584]	; (8002360 <HAL_RCC_OscConfig+0x26c>)
 8002116:	685b      	ldr	r3, [r3, #4]
 8002118:	f003 030c 	and.w	r3, r3, #12
 800211c:	2b04      	cmp	r3, #4
 800211e:	d00c      	beq.n	800213a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002120:	4b8f      	ldr	r3, [pc, #572]	; (8002360 <HAL_RCC_OscConfig+0x26c>)
 8002122:	685b      	ldr	r3, [r3, #4]
 8002124:	f003 030c 	and.w	r3, r3, #12
 8002128:	2b08      	cmp	r3, #8
 800212a:	d112      	bne.n	8002152 <HAL_RCC_OscConfig+0x5e>
 800212c:	4b8c      	ldr	r3, [pc, #560]	; (8002360 <HAL_RCC_OscConfig+0x26c>)
 800212e:	685b      	ldr	r3, [r3, #4]
 8002130:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002134:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002138:	d10b      	bne.n	8002152 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800213a:	4b89      	ldr	r3, [pc, #548]	; (8002360 <HAL_RCC_OscConfig+0x26c>)
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002142:	2b00      	cmp	r3, #0
 8002144:	d06c      	beq.n	8002220 <HAL_RCC_OscConfig+0x12c>
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	685b      	ldr	r3, [r3, #4]
 800214a:	2b00      	cmp	r3, #0
 800214c:	d168      	bne.n	8002220 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800214e:	2301      	movs	r3, #1
 8002150:	e24c      	b.n	80025ec <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	685b      	ldr	r3, [r3, #4]
 8002156:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800215a:	d106      	bne.n	800216a <HAL_RCC_OscConfig+0x76>
 800215c:	4b80      	ldr	r3, [pc, #512]	; (8002360 <HAL_RCC_OscConfig+0x26c>)
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	4a7f      	ldr	r2, [pc, #508]	; (8002360 <HAL_RCC_OscConfig+0x26c>)
 8002162:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002166:	6013      	str	r3, [r2, #0]
 8002168:	e02e      	b.n	80021c8 <HAL_RCC_OscConfig+0xd4>
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	685b      	ldr	r3, [r3, #4]
 800216e:	2b00      	cmp	r3, #0
 8002170:	d10c      	bne.n	800218c <HAL_RCC_OscConfig+0x98>
 8002172:	4b7b      	ldr	r3, [pc, #492]	; (8002360 <HAL_RCC_OscConfig+0x26c>)
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	4a7a      	ldr	r2, [pc, #488]	; (8002360 <HAL_RCC_OscConfig+0x26c>)
 8002178:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800217c:	6013      	str	r3, [r2, #0]
 800217e:	4b78      	ldr	r3, [pc, #480]	; (8002360 <HAL_RCC_OscConfig+0x26c>)
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	4a77      	ldr	r2, [pc, #476]	; (8002360 <HAL_RCC_OscConfig+0x26c>)
 8002184:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002188:	6013      	str	r3, [r2, #0]
 800218a:	e01d      	b.n	80021c8 <HAL_RCC_OscConfig+0xd4>
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	685b      	ldr	r3, [r3, #4]
 8002190:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002194:	d10c      	bne.n	80021b0 <HAL_RCC_OscConfig+0xbc>
 8002196:	4b72      	ldr	r3, [pc, #456]	; (8002360 <HAL_RCC_OscConfig+0x26c>)
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	4a71      	ldr	r2, [pc, #452]	; (8002360 <HAL_RCC_OscConfig+0x26c>)
 800219c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80021a0:	6013      	str	r3, [r2, #0]
 80021a2:	4b6f      	ldr	r3, [pc, #444]	; (8002360 <HAL_RCC_OscConfig+0x26c>)
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	4a6e      	ldr	r2, [pc, #440]	; (8002360 <HAL_RCC_OscConfig+0x26c>)
 80021a8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80021ac:	6013      	str	r3, [r2, #0]
 80021ae:	e00b      	b.n	80021c8 <HAL_RCC_OscConfig+0xd4>
 80021b0:	4b6b      	ldr	r3, [pc, #428]	; (8002360 <HAL_RCC_OscConfig+0x26c>)
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	4a6a      	ldr	r2, [pc, #424]	; (8002360 <HAL_RCC_OscConfig+0x26c>)
 80021b6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80021ba:	6013      	str	r3, [r2, #0]
 80021bc:	4b68      	ldr	r3, [pc, #416]	; (8002360 <HAL_RCC_OscConfig+0x26c>)
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	4a67      	ldr	r2, [pc, #412]	; (8002360 <HAL_RCC_OscConfig+0x26c>)
 80021c2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80021c6:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	685b      	ldr	r3, [r3, #4]
 80021cc:	2b00      	cmp	r3, #0
 80021ce:	d013      	beq.n	80021f8 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021d0:	f7fe fff4 	bl	80011bc <HAL_GetTick>
 80021d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80021d6:	e008      	b.n	80021ea <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80021d8:	f7fe fff0 	bl	80011bc <HAL_GetTick>
 80021dc:	4602      	mov	r2, r0
 80021de:	693b      	ldr	r3, [r7, #16]
 80021e0:	1ad3      	subs	r3, r2, r3
 80021e2:	2b64      	cmp	r3, #100	; 0x64
 80021e4:	d901      	bls.n	80021ea <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80021e6:	2303      	movs	r3, #3
 80021e8:	e200      	b.n	80025ec <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80021ea:	4b5d      	ldr	r3, [pc, #372]	; (8002360 <HAL_RCC_OscConfig+0x26c>)
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	d0f0      	beq.n	80021d8 <HAL_RCC_OscConfig+0xe4>
 80021f6:	e014      	b.n	8002222 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021f8:	f7fe ffe0 	bl	80011bc <HAL_GetTick>
 80021fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80021fe:	e008      	b.n	8002212 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002200:	f7fe ffdc 	bl	80011bc <HAL_GetTick>
 8002204:	4602      	mov	r2, r0
 8002206:	693b      	ldr	r3, [r7, #16]
 8002208:	1ad3      	subs	r3, r2, r3
 800220a:	2b64      	cmp	r3, #100	; 0x64
 800220c:	d901      	bls.n	8002212 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800220e:	2303      	movs	r3, #3
 8002210:	e1ec      	b.n	80025ec <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002212:	4b53      	ldr	r3, [pc, #332]	; (8002360 <HAL_RCC_OscConfig+0x26c>)
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800221a:	2b00      	cmp	r3, #0
 800221c:	d1f0      	bne.n	8002200 <HAL_RCC_OscConfig+0x10c>
 800221e:	e000      	b.n	8002222 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002220:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	f003 0302 	and.w	r3, r3, #2
 800222a:	2b00      	cmp	r3, #0
 800222c:	d063      	beq.n	80022f6 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800222e:	4b4c      	ldr	r3, [pc, #304]	; (8002360 <HAL_RCC_OscConfig+0x26c>)
 8002230:	685b      	ldr	r3, [r3, #4]
 8002232:	f003 030c 	and.w	r3, r3, #12
 8002236:	2b00      	cmp	r3, #0
 8002238:	d00b      	beq.n	8002252 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800223a:	4b49      	ldr	r3, [pc, #292]	; (8002360 <HAL_RCC_OscConfig+0x26c>)
 800223c:	685b      	ldr	r3, [r3, #4]
 800223e:	f003 030c 	and.w	r3, r3, #12
 8002242:	2b08      	cmp	r3, #8
 8002244:	d11c      	bne.n	8002280 <HAL_RCC_OscConfig+0x18c>
 8002246:	4b46      	ldr	r3, [pc, #280]	; (8002360 <HAL_RCC_OscConfig+0x26c>)
 8002248:	685b      	ldr	r3, [r3, #4]
 800224a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800224e:	2b00      	cmp	r3, #0
 8002250:	d116      	bne.n	8002280 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002252:	4b43      	ldr	r3, [pc, #268]	; (8002360 <HAL_RCC_OscConfig+0x26c>)
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	f003 0302 	and.w	r3, r3, #2
 800225a:	2b00      	cmp	r3, #0
 800225c:	d005      	beq.n	800226a <HAL_RCC_OscConfig+0x176>
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	691b      	ldr	r3, [r3, #16]
 8002262:	2b01      	cmp	r3, #1
 8002264:	d001      	beq.n	800226a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002266:	2301      	movs	r3, #1
 8002268:	e1c0      	b.n	80025ec <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800226a:	4b3d      	ldr	r3, [pc, #244]	; (8002360 <HAL_RCC_OscConfig+0x26c>)
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	695b      	ldr	r3, [r3, #20]
 8002276:	00db      	lsls	r3, r3, #3
 8002278:	4939      	ldr	r1, [pc, #228]	; (8002360 <HAL_RCC_OscConfig+0x26c>)
 800227a:	4313      	orrs	r3, r2
 800227c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800227e:	e03a      	b.n	80022f6 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	691b      	ldr	r3, [r3, #16]
 8002284:	2b00      	cmp	r3, #0
 8002286:	d020      	beq.n	80022ca <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002288:	4b36      	ldr	r3, [pc, #216]	; (8002364 <HAL_RCC_OscConfig+0x270>)
 800228a:	2201      	movs	r2, #1
 800228c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800228e:	f7fe ff95 	bl	80011bc <HAL_GetTick>
 8002292:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002294:	e008      	b.n	80022a8 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002296:	f7fe ff91 	bl	80011bc <HAL_GetTick>
 800229a:	4602      	mov	r2, r0
 800229c:	693b      	ldr	r3, [r7, #16]
 800229e:	1ad3      	subs	r3, r2, r3
 80022a0:	2b02      	cmp	r3, #2
 80022a2:	d901      	bls.n	80022a8 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80022a4:	2303      	movs	r3, #3
 80022a6:	e1a1      	b.n	80025ec <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80022a8:	4b2d      	ldr	r3, [pc, #180]	; (8002360 <HAL_RCC_OscConfig+0x26c>)
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	f003 0302 	and.w	r3, r3, #2
 80022b0:	2b00      	cmp	r3, #0
 80022b2:	d0f0      	beq.n	8002296 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80022b4:	4b2a      	ldr	r3, [pc, #168]	; (8002360 <HAL_RCC_OscConfig+0x26c>)
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	695b      	ldr	r3, [r3, #20]
 80022c0:	00db      	lsls	r3, r3, #3
 80022c2:	4927      	ldr	r1, [pc, #156]	; (8002360 <HAL_RCC_OscConfig+0x26c>)
 80022c4:	4313      	orrs	r3, r2
 80022c6:	600b      	str	r3, [r1, #0]
 80022c8:	e015      	b.n	80022f6 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80022ca:	4b26      	ldr	r3, [pc, #152]	; (8002364 <HAL_RCC_OscConfig+0x270>)
 80022cc:	2200      	movs	r2, #0
 80022ce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022d0:	f7fe ff74 	bl	80011bc <HAL_GetTick>
 80022d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80022d6:	e008      	b.n	80022ea <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80022d8:	f7fe ff70 	bl	80011bc <HAL_GetTick>
 80022dc:	4602      	mov	r2, r0
 80022de:	693b      	ldr	r3, [r7, #16]
 80022e0:	1ad3      	subs	r3, r2, r3
 80022e2:	2b02      	cmp	r3, #2
 80022e4:	d901      	bls.n	80022ea <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80022e6:	2303      	movs	r3, #3
 80022e8:	e180      	b.n	80025ec <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80022ea:	4b1d      	ldr	r3, [pc, #116]	; (8002360 <HAL_RCC_OscConfig+0x26c>)
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	f003 0302 	and.w	r3, r3, #2
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	d1f0      	bne.n	80022d8 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	f003 0308 	and.w	r3, r3, #8
 80022fe:	2b00      	cmp	r3, #0
 8002300:	d03a      	beq.n	8002378 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	699b      	ldr	r3, [r3, #24]
 8002306:	2b00      	cmp	r3, #0
 8002308:	d019      	beq.n	800233e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800230a:	4b17      	ldr	r3, [pc, #92]	; (8002368 <HAL_RCC_OscConfig+0x274>)
 800230c:	2201      	movs	r2, #1
 800230e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002310:	f7fe ff54 	bl	80011bc <HAL_GetTick>
 8002314:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002316:	e008      	b.n	800232a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002318:	f7fe ff50 	bl	80011bc <HAL_GetTick>
 800231c:	4602      	mov	r2, r0
 800231e:	693b      	ldr	r3, [r7, #16]
 8002320:	1ad3      	subs	r3, r2, r3
 8002322:	2b02      	cmp	r3, #2
 8002324:	d901      	bls.n	800232a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002326:	2303      	movs	r3, #3
 8002328:	e160      	b.n	80025ec <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800232a:	4b0d      	ldr	r3, [pc, #52]	; (8002360 <HAL_RCC_OscConfig+0x26c>)
 800232c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800232e:	f003 0302 	and.w	r3, r3, #2
 8002332:	2b00      	cmp	r3, #0
 8002334:	d0f0      	beq.n	8002318 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002336:	2001      	movs	r0, #1
 8002338:	f000 fac4 	bl	80028c4 <RCC_Delay>
 800233c:	e01c      	b.n	8002378 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800233e:	4b0a      	ldr	r3, [pc, #40]	; (8002368 <HAL_RCC_OscConfig+0x274>)
 8002340:	2200      	movs	r2, #0
 8002342:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002344:	f7fe ff3a 	bl	80011bc <HAL_GetTick>
 8002348:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800234a:	e00f      	b.n	800236c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800234c:	f7fe ff36 	bl	80011bc <HAL_GetTick>
 8002350:	4602      	mov	r2, r0
 8002352:	693b      	ldr	r3, [r7, #16]
 8002354:	1ad3      	subs	r3, r2, r3
 8002356:	2b02      	cmp	r3, #2
 8002358:	d908      	bls.n	800236c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800235a:	2303      	movs	r3, #3
 800235c:	e146      	b.n	80025ec <HAL_RCC_OscConfig+0x4f8>
 800235e:	bf00      	nop
 8002360:	40021000 	.word	0x40021000
 8002364:	42420000 	.word	0x42420000
 8002368:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800236c:	4b92      	ldr	r3, [pc, #584]	; (80025b8 <HAL_RCC_OscConfig+0x4c4>)
 800236e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002370:	f003 0302 	and.w	r3, r3, #2
 8002374:	2b00      	cmp	r3, #0
 8002376:	d1e9      	bne.n	800234c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	f003 0304 	and.w	r3, r3, #4
 8002380:	2b00      	cmp	r3, #0
 8002382:	f000 80a6 	beq.w	80024d2 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002386:	2300      	movs	r3, #0
 8002388:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800238a:	4b8b      	ldr	r3, [pc, #556]	; (80025b8 <HAL_RCC_OscConfig+0x4c4>)
 800238c:	69db      	ldr	r3, [r3, #28]
 800238e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002392:	2b00      	cmp	r3, #0
 8002394:	d10d      	bne.n	80023b2 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002396:	4b88      	ldr	r3, [pc, #544]	; (80025b8 <HAL_RCC_OscConfig+0x4c4>)
 8002398:	69db      	ldr	r3, [r3, #28]
 800239a:	4a87      	ldr	r2, [pc, #540]	; (80025b8 <HAL_RCC_OscConfig+0x4c4>)
 800239c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80023a0:	61d3      	str	r3, [r2, #28]
 80023a2:	4b85      	ldr	r3, [pc, #532]	; (80025b8 <HAL_RCC_OscConfig+0x4c4>)
 80023a4:	69db      	ldr	r3, [r3, #28]
 80023a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80023aa:	60bb      	str	r3, [r7, #8]
 80023ac:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80023ae:	2301      	movs	r3, #1
 80023b0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80023b2:	4b82      	ldr	r3, [pc, #520]	; (80025bc <HAL_RCC_OscConfig+0x4c8>)
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	d118      	bne.n	80023f0 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80023be:	4b7f      	ldr	r3, [pc, #508]	; (80025bc <HAL_RCC_OscConfig+0x4c8>)
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	4a7e      	ldr	r2, [pc, #504]	; (80025bc <HAL_RCC_OscConfig+0x4c8>)
 80023c4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80023c8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80023ca:	f7fe fef7 	bl	80011bc <HAL_GetTick>
 80023ce:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80023d0:	e008      	b.n	80023e4 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80023d2:	f7fe fef3 	bl	80011bc <HAL_GetTick>
 80023d6:	4602      	mov	r2, r0
 80023d8:	693b      	ldr	r3, [r7, #16]
 80023da:	1ad3      	subs	r3, r2, r3
 80023dc:	2b64      	cmp	r3, #100	; 0x64
 80023de:	d901      	bls.n	80023e4 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80023e0:	2303      	movs	r3, #3
 80023e2:	e103      	b.n	80025ec <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80023e4:	4b75      	ldr	r3, [pc, #468]	; (80025bc <HAL_RCC_OscConfig+0x4c8>)
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80023ec:	2b00      	cmp	r3, #0
 80023ee:	d0f0      	beq.n	80023d2 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	68db      	ldr	r3, [r3, #12]
 80023f4:	2b01      	cmp	r3, #1
 80023f6:	d106      	bne.n	8002406 <HAL_RCC_OscConfig+0x312>
 80023f8:	4b6f      	ldr	r3, [pc, #444]	; (80025b8 <HAL_RCC_OscConfig+0x4c4>)
 80023fa:	6a1b      	ldr	r3, [r3, #32]
 80023fc:	4a6e      	ldr	r2, [pc, #440]	; (80025b8 <HAL_RCC_OscConfig+0x4c4>)
 80023fe:	f043 0301 	orr.w	r3, r3, #1
 8002402:	6213      	str	r3, [r2, #32]
 8002404:	e02d      	b.n	8002462 <HAL_RCC_OscConfig+0x36e>
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	68db      	ldr	r3, [r3, #12]
 800240a:	2b00      	cmp	r3, #0
 800240c:	d10c      	bne.n	8002428 <HAL_RCC_OscConfig+0x334>
 800240e:	4b6a      	ldr	r3, [pc, #424]	; (80025b8 <HAL_RCC_OscConfig+0x4c4>)
 8002410:	6a1b      	ldr	r3, [r3, #32]
 8002412:	4a69      	ldr	r2, [pc, #420]	; (80025b8 <HAL_RCC_OscConfig+0x4c4>)
 8002414:	f023 0301 	bic.w	r3, r3, #1
 8002418:	6213      	str	r3, [r2, #32]
 800241a:	4b67      	ldr	r3, [pc, #412]	; (80025b8 <HAL_RCC_OscConfig+0x4c4>)
 800241c:	6a1b      	ldr	r3, [r3, #32]
 800241e:	4a66      	ldr	r2, [pc, #408]	; (80025b8 <HAL_RCC_OscConfig+0x4c4>)
 8002420:	f023 0304 	bic.w	r3, r3, #4
 8002424:	6213      	str	r3, [r2, #32]
 8002426:	e01c      	b.n	8002462 <HAL_RCC_OscConfig+0x36e>
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	68db      	ldr	r3, [r3, #12]
 800242c:	2b05      	cmp	r3, #5
 800242e:	d10c      	bne.n	800244a <HAL_RCC_OscConfig+0x356>
 8002430:	4b61      	ldr	r3, [pc, #388]	; (80025b8 <HAL_RCC_OscConfig+0x4c4>)
 8002432:	6a1b      	ldr	r3, [r3, #32]
 8002434:	4a60      	ldr	r2, [pc, #384]	; (80025b8 <HAL_RCC_OscConfig+0x4c4>)
 8002436:	f043 0304 	orr.w	r3, r3, #4
 800243a:	6213      	str	r3, [r2, #32]
 800243c:	4b5e      	ldr	r3, [pc, #376]	; (80025b8 <HAL_RCC_OscConfig+0x4c4>)
 800243e:	6a1b      	ldr	r3, [r3, #32]
 8002440:	4a5d      	ldr	r2, [pc, #372]	; (80025b8 <HAL_RCC_OscConfig+0x4c4>)
 8002442:	f043 0301 	orr.w	r3, r3, #1
 8002446:	6213      	str	r3, [r2, #32]
 8002448:	e00b      	b.n	8002462 <HAL_RCC_OscConfig+0x36e>
 800244a:	4b5b      	ldr	r3, [pc, #364]	; (80025b8 <HAL_RCC_OscConfig+0x4c4>)
 800244c:	6a1b      	ldr	r3, [r3, #32]
 800244e:	4a5a      	ldr	r2, [pc, #360]	; (80025b8 <HAL_RCC_OscConfig+0x4c4>)
 8002450:	f023 0301 	bic.w	r3, r3, #1
 8002454:	6213      	str	r3, [r2, #32]
 8002456:	4b58      	ldr	r3, [pc, #352]	; (80025b8 <HAL_RCC_OscConfig+0x4c4>)
 8002458:	6a1b      	ldr	r3, [r3, #32]
 800245a:	4a57      	ldr	r2, [pc, #348]	; (80025b8 <HAL_RCC_OscConfig+0x4c4>)
 800245c:	f023 0304 	bic.w	r3, r3, #4
 8002460:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	68db      	ldr	r3, [r3, #12]
 8002466:	2b00      	cmp	r3, #0
 8002468:	d015      	beq.n	8002496 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800246a:	f7fe fea7 	bl	80011bc <HAL_GetTick>
 800246e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002470:	e00a      	b.n	8002488 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002472:	f7fe fea3 	bl	80011bc <HAL_GetTick>
 8002476:	4602      	mov	r2, r0
 8002478:	693b      	ldr	r3, [r7, #16]
 800247a:	1ad3      	subs	r3, r2, r3
 800247c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002480:	4293      	cmp	r3, r2
 8002482:	d901      	bls.n	8002488 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002484:	2303      	movs	r3, #3
 8002486:	e0b1      	b.n	80025ec <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002488:	4b4b      	ldr	r3, [pc, #300]	; (80025b8 <HAL_RCC_OscConfig+0x4c4>)
 800248a:	6a1b      	ldr	r3, [r3, #32]
 800248c:	f003 0302 	and.w	r3, r3, #2
 8002490:	2b00      	cmp	r3, #0
 8002492:	d0ee      	beq.n	8002472 <HAL_RCC_OscConfig+0x37e>
 8002494:	e014      	b.n	80024c0 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002496:	f7fe fe91 	bl	80011bc <HAL_GetTick>
 800249a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800249c:	e00a      	b.n	80024b4 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800249e:	f7fe fe8d 	bl	80011bc <HAL_GetTick>
 80024a2:	4602      	mov	r2, r0
 80024a4:	693b      	ldr	r3, [r7, #16]
 80024a6:	1ad3      	subs	r3, r2, r3
 80024a8:	f241 3288 	movw	r2, #5000	; 0x1388
 80024ac:	4293      	cmp	r3, r2
 80024ae:	d901      	bls.n	80024b4 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80024b0:	2303      	movs	r3, #3
 80024b2:	e09b      	b.n	80025ec <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80024b4:	4b40      	ldr	r3, [pc, #256]	; (80025b8 <HAL_RCC_OscConfig+0x4c4>)
 80024b6:	6a1b      	ldr	r3, [r3, #32]
 80024b8:	f003 0302 	and.w	r3, r3, #2
 80024bc:	2b00      	cmp	r3, #0
 80024be:	d1ee      	bne.n	800249e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80024c0:	7dfb      	ldrb	r3, [r7, #23]
 80024c2:	2b01      	cmp	r3, #1
 80024c4:	d105      	bne.n	80024d2 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80024c6:	4b3c      	ldr	r3, [pc, #240]	; (80025b8 <HAL_RCC_OscConfig+0x4c4>)
 80024c8:	69db      	ldr	r3, [r3, #28]
 80024ca:	4a3b      	ldr	r2, [pc, #236]	; (80025b8 <HAL_RCC_OscConfig+0x4c4>)
 80024cc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80024d0:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	69db      	ldr	r3, [r3, #28]
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	f000 8087 	beq.w	80025ea <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80024dc:	4b36      	ldr	r3, [pc, #216]	; (80025b8 <HAL_RCC_OscConfig+0x4c4>)
 80024de:	685b      	ldr	r3, [r3, #4]
 80024e0:	f003 030c 	and.w	r3, r3, #12
 80024e4:	2b08      	cmp	r3, #8
 80024e6:	d061      	beq.n	80025ac <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	69db      	ldr	r3, [r3, #28]
 80024ec:	2b02      	cmp	r3, #2
 80024ee:	d146      	bne.n	800257e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80024f0:	4b33      	ldr	r3, [pc, #204]	; (80025c0 <HAL_RCC_OscConfig+0x4cc>)
 80024f2:	2200      	movs	r2, #0
 80024f4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024f6:	f7fe fe61 	bl	80011bc <HAL_GetTick>
 80024fa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80024fc:	e008      	b.n	8002510 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80024fe:	f7fe fe5d 	bl	80011bc <HAL_GetTick>
 8002502:	4602      	mov	r2, r0
 8002504:	693b      	ldr	r3, [r7, #16]
 8002506:	1ad3      	subs	r3, r2, r3
 8002508:	2b02      	cmp	r3, #2
 800250a:	d901      	bls.n	8002510 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 800250c:	2303      	movs	r3, #3
 800250e:	e06d      	b.n	80025ec <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002510:	4b29      	ldr	r3, [pc, #164]	; (80025b8 <HAL_RCC_OscConfig+0x4c4>)
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002518:	2b00      	cmp	r3, #0
 800251a:	d1f0      	bne.n	80024fe <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	6a1b      	ldr	r3, [r3, #32]
 8002520:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002524:	d108      	bne.n	8002538 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002526:	4b24      	ldr	r3, [pc, #144]	; (80025b8 <HAL_RCC_OscConfig+0x4c4>)
 8002528:	685b      	ldr	r3, [r3, #4]
 800252a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	689b      	ldr	r3, [r3, #8]
 8002532:	4921      	ldr	r1, [pc, #132]	; (80025b8 <HAL_RCC_OscConfig+0x4c4>)
 8002534:	4313      	orrs	r3, r2
 8002536:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002538:	4b1f      	ldr	r3, [pc, #124]	; (80025b8 <HAL_RCC_OscConfig+0x4c4>)
 800253a:	685b      	ldr	r3, [r3, #4]
 800253c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	6a19      	ldr	r1, [r3, #32]
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002548:	430b      	orrs	r3, r1
 800254a:	491b      	ldr	r1, [pc, #108]	; (80025b8 <HAL_RCC_OscConfig+0x4c4>)
 800254c:	4313      	orrs	r3, r2
 800254e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002550:	4b1b      	ldr	r3, [pc, #108]	; (80025c0 <HAL_RCC_OscConfig+0x4cc>)
 8002552:	2201      	movs	r2, #1
 8002554:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002556:	f7fe fe31 	bl	80011bc <HAL_GetTick>
 800255a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800255c:	e008      	b.n	8002570 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800255e:	f7fe fe2d 	bl	80011bc <HAL_GetTick>
 8002562:	4602      	mov	r2, r0
 8002564:	693b      	ldr	r3, [r7, #16]
 8002566:	1ad3      	subs	r3, r2, r3
 8002568:	2b02      	cmp	r3, #2
 800256a:	d901      	bls.n	8002570 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 800256c:	2303      	movs	r3, #3
 800256e:	e03d      	b.n	80025ec <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002570:	4b11      	ldr	r3, [pc, #68]	; (80025b8 <HAL_RCC_OscConfig+0x4c4>)
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002578:	2b00      	cmp	r3, #0
 800257a:	d0f0      	beq.n	800255e <HAL_RCC_OscConfig+0x46a>
 800257c:	e035      	b.n	80025ea <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800257e:	4b10      	ldr	r3, [pc, #64]	; (80025c0 <HAL_RCC_OscConfig+0x4cc>)
 8002580:	2200      	movs	r2, #0
 8002582:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002584:	f7fe fe1a 	bl	80011bc <HAL_GetTick>
 8002588:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800258a:	e008      	b.n	800259e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800258c:	f7fe fe16 	bl	80011bc <HAL_GetTick>
 8002590:	4602      	mov	r2, r0
 8002592:	693b      	ldr	r3, [r7, #16]
 8002594:	1ad3      	subs	r3, r2, r3
 8002596:	2b02      	cmp	r3, #2
 8002598:	d901      	bls.n	800259e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800259a:	2303      	movs	r3, #3
 800259c:	e026      	b.n	80025ec <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800259e:	4b06      	ldr	r3, [pc, #24]	; (80025b8 <HAL_RCC_OscConfig+0x4c4>)
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	d1f0      	bne.n	800258c <HAL_RCC_OscConfig+0x498>
 80025aa:	e01e      	b.n	80025ea <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	69db      	ldr	r3, [r3, #28]
 80025b0:	2b01      	cmp	r3, #1
 80025b2:	d107      	bne.n	80025c4 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80025b4:	2301      	movs	r3, #1
 80025b6:	e019      	b.n	80025ec <HAL_RCC_OscConfig+0x4f8>
 80025b8:	40021000 	.word	0x40021000
 80025bc:	40007000 	.word	0x40007000
 80025c0:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80025c4:	4b0b      	ldr	r3, [pc, #44]	; (80025f4 <HAL_RCC_OscConfig+0x500>)
 80025c6:	685b      	ldr	r3, [r3, #4]
 80025c8:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80025ca:	68fb      	ldr	r3, [r7, #12]
 80025cc:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	6a1b      	ldr	r3, [r3, #32]
 80025d4:	429a      	cmp	r2, r3
 80025d6:	d106      	bne.n	80025e6 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80025d8:	68fb      	ldr	r3, [r7, #12]
 80025da:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80025e2:	429a      	cmp	r2, r3
 80025e4:	d001      	beq.n	80025ea <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80025e6:	2301      	movs	r3, #1
 80025e8:	e000      	b.n	80025ec <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80025ea:	2300      	movs	r3, #0
}
 80025ec:	4618      	mov	r0, r3
 80025ee:	3718      	adds	r7, #24
 80025f0:	46bd      	mov	sp, r7
 80025f2:	bd80      	pop	{r7, pc}
 80025f4:	40021000 	.word	0x40021000

080025f8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80025f8:	b580      	push	{r7, lr}
 80025fa:	b084      	sub	sp, #16
 80025fc:	af00      	add	r7, sp, #0
 80025fe:	6078      	str	r0, [r7, #4]
 8002600:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	2b00      	cmp	r3, #0
 8002606:	d101      	bne.n	800260c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002608:	2301      	movs	r3, #1
 800260a:	e0d0      	b.n	80027ae <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800260c:	4b6a      	ldr	r3, [pc, #424]	; (80027b8 <HAL_RCC_ClockConfig+0x1c0>)
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	f003 0307 	and.w	r3, r3, #7
 8002614:	683a      	ldr	r2, [r7, #0]
 8002616:	429a      	cmp	r2, r3
 8002618:	d910      	bls.n	800263c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800261a:	4b67      	ldr	r3, [pc, #412]	; (80027b8 <HAL_RCC_ClockConfig+0x1c0>)
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	f023 0207 	bic.w	r2, r3, #7
 8002622:	4965      	ldr	r1, [pc, #404]	; (80027b8 <HAL_RCC_ClockConfig+0x1c0>)
 8002624:	683b      	ldr	r3, [r7, #0]
 8002626:	4313      	orrs	r3, r2
 8002628:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800262a:	4b63      	ldr	r3, [pc, #396]	; (80027b8 <HAL_RCC_ClockConfig+0x1c0>)
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	f003 0307 	and.w	r3, r3, #7
 8002632:	683a      	ldr	r2, [r7, #0]
 8002634:	429a      	cmp	r2, r3
 8002636:	d001      	beq.n	800263c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002638:	2301      	movs	r3, #1
 800263a:	e0b8      	b.n	80027ae <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	f003 0302 	and.w	r3, r3, #2
 8002644:	2b00      	cmp	r3, #0
 8002646:	d020      	beq.n	800268a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	f003 0304 	and.w	r3, r3, #4
 8002650:	2b00      	cmp	r3, #0
 8002652:	d005      	beq.n	8002660 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002654:	4b59      	ldr	r3, [pc, #356]	; (80027bc <HAL_RCC_ClockConfig+0x1c4>)
 8002656:	685b      	ldr	r3, [r3, #4]
 8002658:	4a58      	ldr	r2, [pc, #352]	; (80027bc <HAL_RCC_ClockConfig+0x1c4>)
 800265a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800265e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	f003 0308 	and.w	r3, r3, #8
 8002668:	2b00      	cmp	r3, #0
 800266a:	d005      	beq.n	8002678 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800266c:	4b53      	ldr	r3, [pc, #332]	; (80027bc <HAL_RCC_ClockConfig+0x1c4>)
 800266e:	685b      	ldr	r3, [r3, #4]
 8002670:	4a52      	ldr	r2, [pc, #328]	; (80027bc <HAL_RCC_ClockConfig+0x1c4>)
 8002672:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8002676:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002678:	4b50      	ldr	r3, [pc, #320]	; (80027bc <HAL_RCC_ClockConfig+0x1c4>)
 800267a:	685b      	ldr	r3, [r3, #4]
 800267c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	689b      	ldr	r3, [r3, #8]
 8002684:	494d      	ldr	r1, [pc, #308]	; (80027bc <HAL_RCC_ClockConfig+0x1c4>)
 8002686:	4313      	orrs	r3, r2
 8002688:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	f003 0301 	and.w	r3, r3, #1
 8002692:	2b00      	cmp	r3, #0
 8002694:	d040      	beq.n	8002718 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	685b      	ldr	r3, [r3, #4]
 800269a:	2b01      	cmp	r3, #1
 800269c:	d107      	bne.n	80026ae <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800269e:	4b47      	ldr	r3, [pc, #284]	; (80027bc <HAL_RCC_ClockConfig+0x1c4>)
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	d115      	bne.n	80026d6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80026aa:	2301      	movs	r3, #1
 80026ac:	e07f      	b.n	80027ae <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	685b      	ldr	r3, [r3, #4]
 80026b2:	2b02      	cmp	r3, #2
 80026b4:	d107      	bne.n	80026c6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80026b6:	4b41      	ldr	r3, [pc, #260]	; (80027bc <HAL_RCC_ClockConfig+0x1c4>)
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80026be:	2b00      	cmp	r3, #0
 80026c0:	d109      	bne.n	80026d6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80026c2:	2301      	movs	r3, #1
 80026c4:	e073      	b.n	80027ae <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80026c6:	4b3d      	ldr	r3, [pc, #244]	; (80027bc <HAL_RCC_ClockConfig+0x1c4>)
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	f003 0302 	and.w	r3, r3, #2
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	d101      	bne.n	80026d6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80026d2:	2301      	movs	r3, #1
 80026d4:	e06b      	b.n	80027ae <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80026d6:	4b39      	ldr	r3, [pc, #228]	; (80027bc <HAL_RCC_ClockConfig+0x1c4>)
 80026d8:	685b      	ldr	r3, [r3, #4]
 80026da:	f023 0203 	bic.w	r2, r3, #3
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	685b      	ldr	r3, [r3, #4]
 80026e2:	4936      	ldr	r1, [pc, #216]	; (80027bc <HAL_RCC_ClockConfig+0x1c4>)
 80026e4:	4313      	orrs	r3, r2
 80026e6:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80026e8:	f7fe fd68 	bl	80011bc <HAL_GetTick>
 80026ec:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80026ee:	e00a      	b.n	8002706 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80026f0:	f7fe fd64 	bl	80011bc <HAL_GetTick>
 80026f4:	4602      	mov	r2, r0
 80026f6:	68fb      	ldr	r3, [r7, #12]
 80026f8:	1ad3      	subs	r3, r2, r3
 80026fa:	f241 3288 	movw	r2, #5000	; 0x1388
 80026fe:	4293      	cmp	r3, r2
 8002700:	d901      	bls.n	8002706 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002702:	2303      	movs	r3, #3
 8002704:	e053      	b.n	80027ae <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002706:	4b2d      	ldr	r3, [pc, #180]	; (80027bc <HAL_RCC_ClockConfig+0x1c4>)
 8002708:	685b      	ldr	r3, [r3, #4]
 800270a:	f003 020c 	and.w	r2, r3, #12
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	685b      	ldr	r3, [r3, #4]
 8002712:	009b      	lsls	r3, r3, #2
 8002714:	429a      	cmp	r2, r3
 8002716:	d1eb      	bne.n	80026f0 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002718:	4b27      	ldr	r3, [pc, #156]	; (80027b8 <HAL_RCC_ClockConfig+0x1c0>)
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	f003 0307 	and.w	r3, r3, #7
 8002720:	683a      	ldr	r2, [r7, #0]
 8002722:	429a      	cmp	r2, r3
 8002724:	d210      	bcs.n	8002748 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002726:	4b24      	ldr	r3, [pc, #144]	; (80027b8 <HAL_RCC_ClockConfig+0x1c0>)
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	f023 0207 	bic.w	r2, r3, #7
 800272e:	4922      	ldr	r1, [pc, #136]	; (80027b8 <HAL_RCC_ClockConfig+0x1c0>)
 8002730:	683b      	ldr	r3, [r7, #0]
 8002732:	4313      	orrs	r3, r2
 8002734:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002736:	4b20      	ldr	r3, [pc, #128]	; (80027b8 <HAL_RCC_ClockConfig+0x1c0>)
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	f003 0307 	and.w	r3, r3, #7
 800273e:	683a      	ldr	r2, [r7, #0]
 8002740:	429a      	cmp	r2, r3
 8002742:	d001      	beq.n	8002748 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002744:	2301      	movs	r3, #1
 8002746:	e032      	b.n	80027ae <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	f003 0304 	and.w	r3, r3, #4
 8002750:	2b00      	cmp	r3, #0
 8002752:	d008      	beq.n	8002766 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002754:	4b19      	ldr	r3, [pc, #100]	; (80027bc <HAL_RCC_ClockConfig+0x1c4>)
 8002756:	685b      	ldr	r3, [r3, #4]
 8002758:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	68db      	ldr	r3, [r3, #12]
 8002760:	4916      	ldr	r1, [pc, #88]	; (80027bc <HAL_RCC_ClockConfig+0x1c4>)
 8002762:	4313      	orrs	r3, r2
 8002764:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	f003 0308 	and.w	r3, r3, #8
 800276e:	2b00      	cmp	r3, #0
 8002770:	d009      	beq.n	8002786 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002772:	4b12      	ldr	r3, [pc, #72]	; (80027bc <HAL_RCC_ClockConfig+0x1c4>)
 8002774:	685b      	ldr	r3, [r3, #4]
 8002776:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	691b      	ldr	r3, [r3, #16]
 800277e:	00db      	lsls	r3, r3, #3
 8002780:	490e      	ldr	r1, [pc, #56]	; (80027bc <HAL_RCC_ClockConfig+0x1c4>)
 8002782:	4313      	orrs	r3, r2
 8002784:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002786:	f000 f821 	bl	80027cc <HAL_RCC_GetSysClockFreq>
 800278a:	4602      	mov	r2, r0
 800278c:	4b0b      	ldr	r3, [pc, #44]	; (80027bc <HAL_RCC_ClockConfig+0x1c4>)
 800278e:	685b      	ldr	r3, [r3, #4]
 8002790:	091b      	lsrs	r3, r3, #4
 8002792:	f003 030f 	and.w	r3, r3, #15
 8002796:	490a      	ldr	r1, [pc, #40]	; (80027c0 <HAL_RCC_ClockConfig+0x1c8>)
 8002798:	5ccb      	ldrb	r3, [r1, r3]
 800279a:	fa22 f303 	lsr.w	r3, r2, r3
 800279e:	4a09      	ldr	r2, [pc, #36]	; (80027c4 <HAL_RCC_ClockConfig+0x1cc>)
 80027a0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80027a2:	4b09      	ldr	r3, [pc, #36]	; (80027c8 <HAL_RCC_ClockConfig+0x1d0>)
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	4618      	mov	r0, r3
 80027a8:	f7fe fcc6 	bl	8001138 <HAL_InitTick>

  return HAL_OK;
 80027ac:	2300      	movs	r3, #0
}
 80027ae:	4618      	mov	r0, r3
 80027b0:	3710      	adds	r7, #16
 80027b2:	46bd      	mov	sp, r7
 80027b4:	bd80      	pop	{r7, pc}
 80027b6:	bf00      	nop
 80027b8:	40022000 	.word	0x40022000
 80027bc:	40021000 	.word	0x40021000
 80027c0:	08003e34 	.word	0x08003e34
 80027c4:	20000000 	.word	0x20000000
 80027c8:	20000004 	.word	0x20000004

080027cc <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80027cc:	b490      	push	{r4, r7}
 80027ce:	b08a      	sub	sp, #40	; 0x28
 80027d0:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80027d2:	4b29      	ldr	r3, [pc, #164]	; (8002878 <HAL_RCC_GetSysClockFreq+0xac>)
 80027d4:	1d3c      	adds	r4, r7, #4
 80027d6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80027d8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80027dc:	f240 2301 	movw	r3, #513	; 0x201
 80027e0:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80027e2:	2300      	movs	r3, #0
 80027e4:	61fb      	str	r3, [r7, #28]
 80027e6:	2300      	movs	r3, #0
 80027e8:	61bb      	str	r3, [r7, #24]
 80027ea:	2300      	movs	r3, #0
 80027ec:	627b      	str	r3, [r7, #36]	; 0x24
 80027ee:	2300      	movs	r3, #0
 80027f0:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80027f2:	2300      	movs	r3, #0
 80027f4:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80027f6:	4b21      	ldr	r3, [pc, #132]	; (800287c <HAL_RCC_GetSysClockFreq+0xb0>)
 80027f8:	685b      	ldr	r3, [r3, #4]
 80027fa:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80027fc:	69fb      	ldr	r3, [r7, #28]
 80027fe:	f003 030c 	and.w	r3, r3, #12
 8002802:	2b04      	cmp	r3, #4
 8002804:	d002      	beq.n	800280c <HAL_RCC_GetSysClockFreq+0x40>
 8002806:	2b08      	cmp	r3, #8
 8002808:	d003      	beq.n	8002812 <HAL_RCC_GetSysClockFreq+0x46>
 800280a:	e02b      	b.n	8002864 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800280c:	4b1c      	ldr	r3, [pc, #112]	; (8002880 <HAL_RCC_GetSysClockFreq+0xb4>)
 800280e:	623b      	str	r3, [r7, #32]
      break;
 8002810:	e02b      	b.n	800286a <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002812:	69fb      	ldr	r3, [r7, #28]
 8002814:	0c9b      	lsrs	r3, r3, #18
 8002816:	f003 030f 	and.w	r3, r3, #15
 800281a:	3328      	adds	r3, #40	; 0x28
 800281c:	443b      	add	r3, r7
 800281e:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8002822:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002824:	69fb      	ldr	r3, [r7, #28]
 8002826:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800282a:	2b00      	cmp	r3, #0
 800282c:	d012      	beq.n	8002854 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800282e:	4b13      	ldr	r3, [pc, #76]	; (800287c <HAL_RCC_GetSysClockFreq+0xb0>)
 8002830:	685b      	ldr	r3, [r3, #4]
 8002832:	0c5b      	lsrs	r3, r3, #17
 8002834:	f003 0301 	and.w	r3, r3, #1
 8002838:	3328      	adds	r3, #40	; 0x28
 800283a:	443b      	add	r3, r7
 800283c:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8002840:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002842:	697b      	ldr	r3, [r7, #20]
 8002844:	4a0e      	ldr	r2, [pc, #56]	; (8002880 <HAL_RCC_GetSysClockFreq+0xb4>)
 8002846:	fb03 f202 	mul.w	r2, r3, r2
 800284a:	69bb      	ldr	r3, [r7, #24]
 800284c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002850:	627b      	str	r3, [r7, #36]	; 0x24
 8002852:	e004      	b.n	800285e <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002854:	697b      	ldr	r3, [r7, #20]
 8002856:	4a0b      	ldr	r2, [pc, #44]	; (8002884 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002858:	fb02 f303 	mul.w	r3, r2, r3
 800285c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 800285e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002860:	623b      	str	r3, [r7, #32]
      break;
 8002862:	e002      	b.n	800286a <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002864:	4b06      	ldr	r3, [pc, #24]	; (8002880 <HAL_RCC_GetSysClockFreq+0xb4>)
 8002866:	623b      	str	r3, [r7, #32]
      break;
 8002868:	bf00      	nop
    }
  }
  return sysclockfreq;
 800286a:	6a3b      	ldr	r3, [r7, #32]
}
 800286c:	4618      	mov	r0, r3
 800286e:	3728      	adds	r7, #40	; 0x28
 8002870:	46bd      	mov	sp, r7
 8002872:	bc90      	pop	{r4, r7}
 8002874:	4770      	bx	lr
 8002876:	bf00      	nop
 8002878:	08003824 	.word	0x08003824
 800287c:	40021000 	.word	0x40021000
 8002880:	007a1200 	.word	0x007a1200
 8002884:	003d0900 	.word	0x003d0900

08002888 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002888:	b480      	push	{r7}
 800288a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800288c:	4b02      	ldr	r3, [pc, #8]	; (8002898 <HAL_RCC_GetHCLKFreq+0x10>)
 800288e:	681b      	ldr	r3, [r3, #0]
}
 8002890:	4618      	mov	r0, r3
 8002892:	46bd      	mov	sp, r7
 8002894:	bc80      	pop	{r7}
 8002896:	4770      	bx	lr
 8002898:	20000000 	.word	0x20000000

0800289c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800289c:	b580      	push	{r7, lr}
 800289e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80028a0:	f7ff fff2 	bl	8002888 <HAL_RCC_GetHCLKFreq>
 80028a4:	4602      	mov	r2, r0
 80028a6:	4b05      	ldr	r3, [pc, #20]	; (80028bc <HAL_RCC_GetPCLK2Freq+0x20>)
 80028a8:	685b      	ldr	r3, [r3, #4]
 80028aa:	0adb      	lsrs	r3, r3, #11
 80028ac:	f003 0307 	and.w	r3, r3, #7
 80028b0:	4903      	ldr	r1, [pc, #12]	; (80028c0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80028b2:	5ccb      	ldrb	r3, [r1, r3]
 80028b4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80028b8:	4618      	mov	r0, r3
 80028ba:	bd80      	pop	{r7, pc}
 80028bc:	40021000 	.word	0x40021000
 80028c0:	08003e44 	.word	0x08003e44

080028c4 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80028c4:	b480      	push	{r7}
 80028c6:	b085      	sub	sp, #20
 80028c8:	af00      	add	r7, sp, #0
 80028ca:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80028cc:	4b0a      	ldr	r3, [pc, #40]	; (80028f8 <RCC_Delay+0x34>)
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	4a0a      	ldr	r2, [pc, #40]	; (80028fc <RCC_Delay+0x38>)
 80028d2:	fba2 2303 	umull	r2, r3, r2, r3
 80028d6:	0a5b      	lsrs	r3, r3, #9
 80028d8:	687a      	ldr	r2, [r7, #4]
 80028da:	fb02 f303 	mul.w	r3, r2, r3
 80028de:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80028e0:	bf00      	nop
  }
  while (Delay --);
 80028e2:	68fb      	ldr	r3, [r7, #12]
 80028e4:	1e5a      	subs	r2, r3, #1
 80028e6:	60fa      	str	r2, [r7, #12]
 80028e8:	2b00      	cmp	r3, #0
 80028ea:	d1f9      	bne.n	80028e0 <RCC_Delay+0x1c>
}
 80028ec:	bf00      	nop
 80028ee:	bf00      	nop
 80028f0:	3714      	adds	r7, #20
 80028f2:	46bd      	mov	sp, r7
 80028f4:	bc80      	pop	{r7}
 80028f6:	4770      	bx	lr
 80028f8:	20000000 	.word	0x20000000
 80028fc:	10624dd3 	.word	0x10624dd3

08002900 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002900:	b580      	push	{r7, lr}
 8002902:	b086      	sub	sp, #24
 8002904:	af00      	add	r7, sp, #0
 8002906:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8002908:	2300      	movs	r3, #0
 800290a:	613b      	str	r3, [r7, #16]
 800290c:	2300      	movs	r3, #0
 800290e:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	f003 0301 	and.w	r3, r3, #1
 8002918:	2b00      	cmp	r3, #0
 800291a:	d07d      	beq.n	8002a18 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 800291c:	2300      	movs	r3, #0
 800291e:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002920:	4b4f      	ldr	r3, [pc, #316]	; (8002a60 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002922:	69db      	ldr	r3, [r3, #28]
 8002924:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002928:	2b00      	cmp	r3, #0
 800292a:	d10d      	bne.n	8002948 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800292c:	4b4c      	ldr	r3, [pc, #304]	; (8002a60 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800292e:	69db      	ldr	r3, [r3, #28]
 8002930:	4a4b      	ldr	r2, [pc, #300]	; (8002a60 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002932:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002936:	61d3      	str	r3, [r2, #28]
 8002938:	4b49      	ldr	r3, [pc, #292]	; (8002a60 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800293a:	69db      	ldr	r3, [r3, #28]
 800293c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002940:	60bb      	str	r3, [r7, #8]
 8002942:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002944:	2301      	movs	r3, #1
 8002946:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002948:	4b46      	ldr	r3, [pc, #280]	; (8002a64 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002950:	2b00      	cmp	r3, #0
 8002952:	d118      	bne.n	8002986 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002954:	4b43      	ldr	r3, [pc, #268]	; (8002a64 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	4a42      	ldr	r2, [pc, #264]	; (8002a64 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800295a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800295e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002960:	f7fe fc2c 	bl	80011bc <HAL_GetTick>
 8002964:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002966:	e008      	b.n	800297a <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002968:	f7fe fc28 	bl	80011bc <HAL_GetTick>
 800296c:	4602      	mov	r2, r0
 800296e:	693b      	ldr	r3, [r7, #16]
 8002970:	1ad3      	subs	r3, r2, r3
 8002972:	2b64      	cmp	r3, #100	; 0x64
 8002974:	d901      	bls.n	800297a <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8002976:	2303      	movs	r3, #3
 8002978:	e06d      	b.n	8002a56 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800297a:	4b3a      	ldr	r3, [pc, #232]	; (8002a64 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002982:	2b00      	cmp	r3, #0
 8002984:	d0f0      	beq.n	8002968 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002986:	4b36      	ldr	r3, [pc, #216]	; (8002a60 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002988:	6a1b      	ldr	r3, [r3, #32]
 800298a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800298e:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	2b00      	cmp	r3, #0
 8002994:	d02e      	beq.n	80029f4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	685b      	ldr	r3, [r3, #4]
 800299a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800299e:	68fa      	ldr	r2, [r7, #12]
 80029a0:	429a      	cmp	r2, r3
 80029a2:	d027      	beq.n	80029f4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80029a4:	4b2e      	ldr	r3, [pc, #184]	; (8002a60 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80029a6:	6a1b      	ldr	r3, [r3, #32]
 80029a8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80029ac:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80029ae:	4b2e      	ldr	r3, [pc, #184]	; (8002a68 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80029b0:	2201      	movs	r2, #1
 80029b2:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80029b4:	4b2c      	ldr	r3, [pc, #176]	; (8002a68 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80029b6:	2200      	movs	r2, #0
 80029b8:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80029ba:	4a29      	ldr	r2, [pc, #164]	; (8002a60 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80029bc:	68fb      	ldr	r3, [r7, #12]
 80029be:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80029c0:	68fb      	ldr	r3, [r7, #12]
 80029c2:	f003 0301 	and.w	r3, r3, #1
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	d014      	beq.n	80029f4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80029ca:	f7fe fbf7 	bl	80011bc <HAL_GetTick>
 80029ce:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80029d0:	e00a      	b.n	80029e8 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80029d2:	f7fe fbf3 	bl	80011bc <HAL_GetTick>
 80029d6:	4602      	mov	r2, r0
 80029d8:	693b      	ldr	r3, [r7, #16]
 80029da:	1ad3      	subs	r3, r2, r3
 80029dc:	f241 3288 	movw	r2, #5000	; 0x1388
 80029e0:	4293      	cmp	r3, r2
 80029e2:	d901      	bls.n	80029e8 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 80029e4:	2303      	movs	r3, #3
 80029e6:	e036      	b.n	8002a56 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80029e8:	4b1d      	ldr	r3, [pc, #116]	; (8002a60 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80029ea:	6a1b      	ldr	r3, [r3, #32]
 80029ec:	f003 0302 	and.w	r3, r3, #2
 80029f0:	2b00      	cmp	r3, #0
 80029f2:	d0ee      	beq.n	80029d2 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80029f4:	4b1a      	ldr	r3, [pc, #104]	; (8002a60 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80029f6:	6a1b      	ldr	r3, [r3, #32]
 80029f8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	685b      	ldr	r3, [r3, #4]
 8002a00:	4917      	ldr	r1, [pc, #92]	; (8002a60 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002a02:	4313      	orrs	r3, r2
 8002a04:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002a06:	7dfb      	ldrb	r3, [r7, #23]
 8002a08:	2b01      	cmp	r3, #1
 8002a0a:	d105      	bne.n	8002a18 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002a0c:	4b14      	ldr	r3, [pc, #80]	; (8002a60 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002a0e:	69db      	ldr	r3, [r3, #28]
 8002a10:	4a13      	ldr	r2, [pc, #76]	; (8002a60 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002a12:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002a16:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	f003 0302 	and.w	r3, r3, #2
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	d008      	beq.n	8002a36 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002a24:	4b0e      	ldr	r3, [pc, #56]	; (8002a60 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002a26:	685b      	ldr	r3, [r3, #4]
 8002a28:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	689b      	ldr	r3, [r3, #8]
 8002a30:	490b      	ldr	r1, [pc, #44]	; (8002a60 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002a32:	4313      	orrs	r3, r2
 8002a34:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	f003 0310 	and.w	r3, r3, #16
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	d008      	beq.n	8002a54 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002a42:	4b07      	ldr	r3, [pc, #28]	; (8002a60 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002a44:	685b      	ldr	r3, [r3, #4]
 8002a46:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	695b      	ldr	r3, [r3, #20]
 8002a4e:	4904      	ldr	r1, [pc, #16]	; (8002a60 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002a50:	4313      	orrs	r3, r2
 8002a52:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8002a54:	2300      	movs	r3, #0
}
 8002a56:	4618      	mov	r0, r3
 8002a58:	3718      	adds	r7, #24
 8002a5a:	46bd      	mov	sp, r7
 8002a5c:	bd80      	pop	{r7, pc}
 8002a5e:	bf00      	nop
 8002a60:	40021000 	.word	0x40021000
 8002a64:	40007000 	.word	0x40007000
 8002a68:	42420440 	.word	0x42420440

08002a6c <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8002a6c:	b590      	push	{r4, r7, lr}
 8002a6e:	b08d      	sub	sp, #52	; 0x34
 8002a70:	af00      	add	r7, sp, #0
 8002a72:	6078      	str	r0, [r7, #4]
  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
  uint32_t pll2mul = 0U, pll3mul = 0U, prediv2 = 0U;
#endif /* STM32F105xC || STM32F107xC */
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8002a74:	4b6a      	ldr	r3, [pc, #424]	; (8002c20 <HAL_RCCEx_GetPeriphCLKFreq+0x1b4>)
 8002a76:	f107 040c 	add.w	r4, r7, #12
 8002a7a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002a7c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8002a80:	f240 2301 	movw	r3, #513	; 0x201
 8002a84:	813b      	strh	r3, [r7, #8]

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 8002a86:	2300      	movs	r3, #0
 8002a88:	627b      	str	r3, [r7, #36]	; 0x24
 8002a8a:	2300      	movs	r3, #0
 8002a8c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002a8e:	2300      	movs	r3, #0
 8002a90:	623b      	str	r3, [r7, #32]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 8002a92:	2300      	movs	r3, #0
 8002a94:	61fb      	str	r3, [r7, #28]
 8002a96:	2300      	movs	r3, #0
 8002a98:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	3b01      	subs	r3, #1
 8002a9e:	2b0f      	cmp	r3, #15
 8002aa0:	f200 80b4 	bhi.w	8002c0c <HAL_RCCEx_GetPeriphCLKFreq+0x1a0>
 8002aa4:	a201      	add	r2, pc, #4	; (adr r2, 8002aac <HAL_RCCEx_GetPeriphCLKFreq+0x40>)
 8002aa6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002aaa:	bf00      	nop
 8002aac:	08002b8b 	.word	0x08002b8b
 8002ab0:	08002bf1 	.word	0x08002bf1
 8002ab4:	08002c0d 	.word	0x08002c0d
 8002ab8:	08002b7b 	.word	0x08002b7b
 8002abc:	08002c0d 	.word	0x08002c0d
 8002ac0:	08002c0d 	.word	0x08002c0d
 8002ac4:	08002c0d 	.word	0x08002c0d
 8002ac8:	08002b83 	.word	0x08002b83
 8002acc:	08002c0d 	.word	0x08002c0d
 8002ad0:	08002c0d 	.word	0x08002c0d
 8002ad4:	08002c0d 	.word	0x08002c0d
 8002ad8:	08002c0d 	.word	0x08002c0d
 8002adc:	08002c0d 	.word	0x08002c0d
 8002ae0:	08002c0d 	.word	0x08002c0d
 8002ae4:	08002c0d 	.word	0x08002c0d
 8002ae8:	08002aed 	.word	0x08002aed
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
    case RCC_PERIPHCLK_USB:
    {
      /* Get RCC configuration ------------------------------------------------------*/
      temp_reg = RCC->CFGR;
 8002aec:	4b4d      	ldr	r3, [pc, #308]	; (8002c24 <HAL_RCCEx_GetPeriphCLKFreq+0x1b8>)
 8002aee:	685b      	ldr	r3, [r3, #4]
 8002af0:	61fb      	str	r3, [r7, #28]

      /* Check if PLL is enabled */
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 8002af2:	4b4c      	ldr	r3, [pc, #304]	; (8002c24 <HAL_RCCEx_GetPeriphCLKFreq+0x1b8>)
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	f000 8088 	beq.w	8002c10 <HAL_RCCEx_GetPeriphCLKFreq+0x1a4>
      {
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002b00:	69fb      	ldr	r3, [r7, #28]
 8002b02:	0c9b      	lsrs	r3, r3, #18
 8002b04:	f003 030f 	and.w	r3, r3, #15
 8002b08:	3330      	adds	r3, #48	; 0x30
 8002b0a:	443b      	add	r3, r7
 8002b0c:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8002b10:	623b      	str	r3, [r7, #32]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002b12:	69fb      	ldr	r3, [r7, #28]
 8002b14:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002b18:	2b00      	cmp	r3, #0
 8002b1a:	d017      	beq.n	8002b4c <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
        {
#if defined(STM32F105xC) || defined(STM32F107xC) || defined(STM32F100xB)\
 || defined(STM32F100xE)
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002b1c:	4b41      	ldr	r3, [pc, #260]	; (8002c24 <HAL_RCCEx_GetPeriphCLKFreq+0x1b8>)
 8002b1e:	685b      	ldr	r3, [r3, #4]
 8002b20:	0c5b      	lsrs	r3, r3, #17
 8002b22:	f003 0301 	and.w	r3, r3, #1
 8002b26:	3330      	adds	r3, #48	; 0x30
 8002b28:	443b      	add	r3, r7
 8002b2a:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8002b2e:	627b      	str	r3, [r7, #36]	; 0x24
          if (pllmul == aPLLMULFactorTable[(uint32_t)(RCC_CFGR_PLLMULL6_5) >> RCC_CFGR_PLLMULL_Pos])
          {
            pllclk = pllclk / 2;
          }
#else
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002b30:	69fb      	ldr	r3, [r7, #28]
 8002b32:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	d00d      	beq.n	8002b56 <HAL_RCCEx_GetPeriphCLKFreq+0xea>
          {
            /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 8002b3a:	4a3b      	ldr	r2, [pc, #236]	; (8002c28 <HAL_RCCEx_GetPeriphCLKFreq+0x1bc>)
 8002b3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b3e:	fbb2 f2f3 	udiv	r2, r2, r3
 8002b42:	6a3b      	ldr	r3, [r7, #32]
 8002b44:	fb02 f303 	mul.w	r3, r2, r3
 8002b48:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002b4a:	e004      	b.n	8002b56 <HAL_RCCEx_GetPeriphCLKFreq+0xea>
#endif /* STM32F105xC || STM32F107xC */
        }
        else
        {
          /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002b4c:	6a3b      	ldr	r3, [r7, #32]
 8002b4e:	4a37      	ldr	r2, [pc, #220]	; (8002c2c <HAL_RCCEx_GetPeriphCLKFreq+0x1c0>)
 8002b50:	fb02 f303 	mul.w	r3, r2, r3
 8002b54:	62fb      	str	r3, [r7, #44]	; 0x2c
          /* Prescaler of 3 selected for USB */
          frequency = (2 * pllclk) / 3;
        }
#else
        /* USBCLK = PLLCLK / USB prescaler */
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 8002b56:	4b33      	ldr	r3, [pc, #204]	; (8002c24 <HAL_RCCEx_GetPeriphCLKFreq+0x1b8>)
 8002b58:	685b      	ldr	r3, [r3, #4]
 8002b5a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002b5e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002b62:	d102      	bne.n	8002b6a <HAL_RCCEx_GetPeriphCLKFreq+0xfe>
        {
          /* No prescaler selected for USB */
          frequency = pllclk;
 8002b64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b66:	62bb      	str	r3, [r7, #40]	; 0x28
          /* Prescaler of 1.5 selected for USB */
          frequency = (pllclk * 2) / 3;
        }
#endif
      }
      break;
 8002b68:	e052      	b.n	8002c10 <HAL_RCCEx_GetPeriphCLKFreq+0x1a4>
          frequency = (pllclk * 2) / 3;
 8002b6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b6c:	005b      	lsls	r3, r3, #1
 8002b6e:	4a30      	ldr	r2, [pc, #192]	; (8002c30 <HAL_RCCEx_GetPeriphCLKFreq+0x1c4>)
 8002b70:	fba2 2303 	umull	r2, r3, r2, r3
 8002b74:	085b      	lsrs	r3, r3, #1
 8002b76:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8002b78:	e04a      	b.n	8002c10 <HAL_RCCEx_GetPeriphCLKFreq+0x1a4>
#if defined(STM32F103xE) || defined(STM32F103xG) || defined(STM32F105xC) || defined(STM32F107xC)
    case RCC_PERIPHCLK_I2S2:
    {
#if defined(STM32F103xE) || defined(STM32F103xG)
      /* SYSCLK used as source clock for I2S2 */
      frequency = HAL_RCC_GetSysClockFreq();
 8002b7a:	f7ff fe27 	bl	80027cc <HAL_RCC_GetSysClockFreq>
 8002b7e:	62b8      	str	r0, [r7, #40]	; 0x28
          pll3mul = ((RCC->CFGR2 & RCC_CFGR2_PLL3MUL) >> RCC_CFGR2_PLL3MUL_Pos) + 2;
          frequency = (uint32_t)(2 * ((HSE_VALUE / prediv2) * pll3mul));
        }
      }
#endif /* STM32F103xE || STM32F103xG */
      break;
 8002b80:	e049      	b.n	8002c16 <HAL_RCCEx_GetPeriphCLKFreq+0x1aa>
    }
    case RCC_PERIPHCLK_I2S3:
    {
#if defined(STM32F103xE) || defined(STM32F103xG)
      /* SYSCLK used as source clock for I2S3 */
      frequency = HAL_RCC_GetSysClockFreq();
 8002b82:	f7ff fe23 	bl	80027cc <HAL_RCC_GetSysClockFreq>
 8002b86:	62b8      	str	r0, [r7, #40]	; 0x28
          pll3mul = ((RCC->CFGR2 & RCC_CFGR2_PLL3MUL) >> RCC_CFGR2_PLL3MUL_Pos) + 2;
          frequency = (uint32_t)(2 * ((HSE_VALUE / prediv2) * pll3mul));
        }
      }
#endif /* STM32F103xE || STM32F103xG */
      break;
 8002b88:	e045      	b.n	8002c16 <HAL_RCCEx_GetPeriphCLKFreq+0x1aa>
    }
#endif /* STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */
    case RCC_PERIPHCLK_RTC:
    {
      /* Get RCC BDCR configuration ------------------------------------------------------*/
      temp_reg = RCC->BDCR;
 8002b8a:	4b26      	ldr	r3, [pc, #152]	; (8002c24 <HAL_RCCEx_GetPeriphCLKFreq+0x1b8>)
 8002b8c:	6a1b      	ldr	r3, [r3, #32]
 8002b8e:	61fb      	str	r3, [r7, #28]

      /* Check if LSE is ready if RTC clock selection is LSE */
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 8002b90:	69fb      	ldr	r3, [r7, #28]
 8002b92:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002b96:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002b9a:	d108      	bne.n	8002bae <HAL_RCCEx_GetPeriphCLKFreq+0x142>
 8002b9c:	69fb      	ldr	r3, [r7, #28]
 8002b9e:	f003 0302 	and.w	r3, r3, #2
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	d003      	beq.n	8002bae <HAL_RCCEx_GetPeriphCLKFreq+0x142>
      {
        frequency = LSE_VALUE;
 8002ba6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002baa:	62bb      	str	r3, [r7, #40]	; 0x28
 8002bac:	e01f      	b.n	8002bee <HAL_RCCEx_GetPeriphCLKFreq+0x182>
      }
      /* Check if LSI is ready if RTC clock selection is LSI */
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 8002bae:	69fb      	ldr	r3, [r7, #28]
 8002bb0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002bb4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002bb8:	d109      	bne.n	8002bce <HAL_RCCEx_GetPeriphCLKFreq+0x162>
 8002bba:	4b1a      	ldr	r3, [pc, #104]	; (8002c24 <HAL_RCCEx_GetPeriphCLKFreq+0x1b8>)
 8002bbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bbe:	f003 0302 	and.w	r3, r3, #2
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	d003      	beq.n	8002bce <HAL_RCCEx_GetPeriphCLKFreq+0x162>
      {
        frequency = LSI_VALUE;
 8002bc6:	f649 4340 	movw	r3, #40000	; 0x9c40
 8002bca:	62bb      	str	r3, [r7, #40]	; 0x28
 8002bcc:	e00f      	b.n	8002bee <HAL_RCCEx_GetPeriphCLKFreq+0x182>
      }
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 8002bce:	69fb      	ldr	r3, [r7, #28]
 8002bd0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002bd4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002bd8:	d11c      	bne.n	8002c14 <HAL_RCCEx_GetPeriphCLKFreq+0x1a8>
 8002bda:	4b12      	ldr	r3, [pc, #72]	; (8002c24 <HAL_RCCEx_GetPeriphCLKFreq+0x1b8>)
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	d016      	beq.n	8002c14 <HAL_RCCEx_GetPeriphCLKFreq+0x1a8>
      {
        frequency = HSE_VALUE / 128U;
 8002be6:	f24f 4324 	movw	r3, #62500	; 0xf424
 8002bea:	62bb      	str	r3, [r7, #40]	; 0x28
      /* Clock not enabled for RTC*/
      else
      {
        /* nothing to do: frequency already initialized to 0U */
      }
      break;
 8002bec:	e012      	b.n	8002c14 <HAL_RCCEx_GetPeriphCLKFreq+0x1a8>
 8002bee:	e011      	b.n	8002c14 <HAL_RCCEx_GetPeriphCLKFreq+0x1a8>
    }
    case RCC_PERIPHCLK_ADC:
    {
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 8002bf0:	f7ff fe54 	bl	800289c <HAL_RCC_GetPCLK2Freq>
 8002bf4:	4602      	mov	r2, r0
 8002bf6:	4b0b      	ldr	r3, [pc, #44]	; (8002c24 <HAL_RCCEx_GetPeriphCLKFreq+0x1b8>)
 8002bf8:	685b      	ldr	r3, [r3, #4]
 8002bfa:	0b9b      	lsrs	r3, r3, #14
 8002bfc:	f003 0303 	and.w	r3, r3, #3
 8002c00:	3301      	adds	r3, #1
 8002c02:	005b      	lsls	r3, r3, #1
 8002c04:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c08:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8002c0a:	e004      	b.n	8002c16 <HAL_RCCEx_GetPeriphCLKFreq+0x1aa>
    }
    default:
    {
      break;
 8002c0c:	bf00      	nop
 8002c0e:	e002      	b.n	8002c16 <HAL_RCCEx_GetPeriphCLKFreq+0x1aa>
      break;
 8002c10:	bf00      	nop
 8002c12:	e000      	b.n	8002c16 <HAL_RCCEx_GetPeriphCLKFreq+0x1aa>
      break;
 8002c14:	bf00      	nop
    }
  }
  return (frequency);
 8002c16:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 8002c18:	4618      	mov	r0, r3
 8002c1a:	3734      	adds	r7, #52	; 0x34
 8002c1c:	46bd      	mov	sp, r7
 8002c1e:	bd90      	pop	{r4, r7, pc}
 8002c20:	08003834 	.word	0x08003834
 8002c24:	40021000 	.word	0x40021000
 8002c28:	007a1200 	.word	0x007a1200
 8002c2c:	003d0900 	.word	0x003d0900
 8002c30:	aaaaaaab 	.word	0xaaaaaaab

08002c34 <HAL_SRAM_Init>:
  * @param  ExtTiming Pointer to SRAM extended mode timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SRAM_Init(SRAM_HandleTypeDef *hsram, FSMC_NORSRAM_TimingTypeDef *Timing,
                                FSMC_NORSRAM_TimingTypeDef *ExtTiming)
{
 8002c34:	b580      	push	{r7, lr}
 8002c36:	b084      	sub	sp, #16
 8002c38:	af00      	add	r7, sp, #0
 8002c3a:	60f8      	str	r0, [r7, #12]
 8002c3c:	60b9      	str	r1, [r7, #8]
 8002c3e:	607a      	str	r2, [r7, #4]
  /* Check the SRAM handle parameter */
  if ((hsram == NULL) || (hsram->Init.BurstAccessMode == FSMC_BURST_ACCESS_MODE_ENABLE))
 8002c40:	68fb      	ldr	r3, [r7, #12]
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d004      	beq.n	8002c50 <HAL_SRAM_Init+0x1c>
 8002c46:	68fb      	ldr	r3, [r7, #12]
 8002c48:	699b      	ldr	r3, [r3, #24]
 8002c4a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002c4e:	d101      	bne.n	8002c54 <HAL_SRAM_Init+0x20>
  {
    return HAL_ERROR;
 8002c50:	2301      	movs	r3, #1
 8002c52:	e038      	b.n	8002cc6 <HAL_SRAM_Init+0x92>
  }

  if (hsram->State == HAL_SRAM_STATE_RESET)
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002c5a:	b2db      	uxtb	r3, r3
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	d106      	bne.n	8002c6e <HAL_SRAM_Init+0x3a>
  {
    /* Allocate lock resource and initialize it */
    hsram->Lock = HAL_UNLOCKED;
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	2200      	movs	r2, #0
 8002c64:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    hsram->MspInitCallback(hsram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SRAM_MspInit(hsram);
 8002c68:	68f8      	ldr	r0, [r7, #12]
 8002c6a:	f7fe f9bb 	bl	8000fe4 <HAL_SRAM_MspInit>
#endif /* USE_HAL_SRAM_REGISTER_CALLBACKS */
  }

  /* Initialize SRAM control Interface */
  (void)FSMC_NORSRAM_Init(hsram->Instance, &(hsram->Init));
 8002c6e:	68fb      	ldr	r3, [r7, #12]
 8002c70:	681a      	ldr	r2, [r3, #0]
 8002c72:	68fb      	ldr	r3, [r7, #12]
 8002c74:	3308      	adds	r3, #8
 8002c76:	4619      	mov	r1, r3
 8002c78:	4610      	mov	r0, r2
 8002c7a:	f000 f829 	bl	8002cd0 <FSMC_NORSRAM_Init>

  /* Initialize SRAM timing Interface */
  (void)FSMC_NORSRAM_Timing_Init(hsram->Instance, Timing, hsram->Init.NSBank);
 8002c7e:	68fb      	ldr	r3, [r7, #12]
 8002c80:	6818      	ldr	r0, [r3, #0]
 8002c82:	68fb      	ldr	r3, [r7, #12]
 8002c84:	689b      	ldr	r3, [r3, #8]
 8002c86:	461a      	mov	r2, r3
 8002c88:	68b9      	ldr	r1, [r7, #8]
 8002c8a:	f000 f88b 	bl	8002da4 <FSMC_NORSRAM_Timing_Init>

  /* Initialize SRAM extended mode timing Interface */
  (void)FSMC_NORSRAM_Extended_Timing_Init(hsram->Extended, ExtTiming, hsram->Init.NSBank,
 8002c8e:	68fb      	ldr	r3, [r7, #12]
 8002c90:	6858      	ldr	r0, [r3, #4]
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	689a      	ldr	r2, [r3, #8]
 8002c96:	68fb      	ldr	r3, [r7, #12]
 8002c98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c9a:	6879      	ldr	r1, [r7, #4]
 8002c9c:	f000 f8b6 	bl	8002e0c <FSMC_NORSRAM_Extended_Timing_Init>
                                         hsram->Init.ExtendedMode);

  /* Enable the NORSRAM device */
  __FSMC_NORSRAM_ENABLE(hsram->Instance, hsram->Init.NSBank);
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	68fa      	ldr	r2, [r7, #12]
 8002ca6:	6892      	ldr	r2, [r2, #8]
 8002ca8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	68fa      	ldr	r2, [r7, #12]
 8002cb2:	6892      	ldr	r2, [r2, #8]
 8002cb4:	f041 0101 	orr.w	r1, r1, #1
 8002cb8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Initialize the SRAM controller state */
  hsram->State = HAL_SRAM_STATE_READY;
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	2201      	movs	r2, #1
 8002cc0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 8002cc4:	2300      	movs	r3, #0
}
 8002cc6:	4618      	mov	r0, r3
 8002cc8:	3710      	adds	r7, #16
 8002cca:	46bd      	mov	sp, r7
 8002ccc:	bd80      	pop	{r7, pc}
	...

08002cd0 <FSMC_NORSRAM_Init>:
  * @param  Init Pointer to NORSRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef  FSMC_NORSRAM_Init(FSMC_NORSRAM_TypeDef *Device,
                                    FSMC_NORSRAM_InitTypeDef *Init)
{
 8002cd0:	b480      	push	{r7}
 8002cd2:	b087      	sub	sp, #28
 8002cd4:	af00      	add	r7, sp, #0
 8002cd6:	6078      	str	r0, [r7, #4]
 8002cd8:	6039      	str	r1, [r7, #0]
  assert_param(IS_FSMC_ASYNWAIT(Init->AsynchronousWait));
  assert_param(IS_FSMC_WRITE_BURST(Init->WriteBurst));
  assert_param(IS_FSMC_PAGESIZE(Init->PageSize));

  /* Disable NORSRAM Device */
  __FSMC_NORSRAM_DISABLE(Device, Init->NSBank);
 8002cda:	683b      	ldr	r3, [r7, #0]
 8002cdc:	681a      	ldr	r2, [r3, #0]
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002ce4:	683a      	ldr	r2, [r7, #0]
 8002ce6:	6812      	ldr	r2, [r2, #0]
 8002ce8:	f023 0101 	bic.w	r1, r3, #1
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Set NORSRAM device control parameters */
  if (Init->MemoryType == FSMC_MEMORY_TYPE_NOR)
 8002cf2:	683b      	ldr	r3, [r7, #0]
 8002cf4:	689b      	ldr	r3, [r3, #8]
 8002cf6:	2b08      	cmp	r3, #8
 8002cf8:	d102      	bne.n	8002d00 <FSMC_NORSRAM_Init+0x30>
  {
    flashaccess = FSMC_NORSRAM_FLASH_ACCESS_ENABLE;
 8002cfa:	2340      	movs	r3, #64	; 0x40
 8002cfc:	617b      	str	r3, [r7, #20]
 8002cfe:	e001      	b.n	8002d04 <FSMC_NORSRAM_Init+0x34>
  }
  else
  {
    flashaccess = FSMC_NORSRAM_FLASH_ACCESS_DISABLE;
 8002d00:	2300      	movs	r3, #0
 8002d02:	617b      	str	r3, [r7, #20]
  }

  btcr_reg = (flashaccess                   | \
              Init->DataAddressMux          | \
 8002d04:	683b      	ldr	r3, [r7, #0]
 8002d06:	685a      	ldr	r2, [r3, #4]
  btcr_reg = (flashaccess                   | \
 8002d08:	697b      	ldr	r3, [r7, #20]
 8002d0a:	431a      	orrs	r2, r3
              Init->MemoryType              | \
 8002d0c:	683b      	ldr	r3, [r7, #0]
 8002d0e:	689b      	ldr	r3, [r3, #8]
              Init->DataAddressMux          | \
 8002d10:	431a      	orrs	r2, r3
              Init->MemoryDataWidth         | \
 8002d12:	683b      	ldr	r3, [r7, #0]
 8002d14:	68db      	ldr	r3, [r3, #12]
              Init->MemoryType              | \
 8002d16:	431a      	orrs	r2, r3
              Init->BurstAccessMode         | \
 8002d18:	683b      	ldr	r3, [r7, #0]
 8002d1a:	691b      	ldr	r3, [r3, #16]
              Init->MemoryDataWidth         | \
 8002d1c:	431a      	orrs	r2, r3
              Init->WaitSignalPolarity      | \
 8002d1e:	683b      	ldr	r3, [r7, #0]
 8002d20:	695b      	ldr	r3, [r3, #20]
              Init->BurstAccessMode         | \
 8002d22:	431a      	orrs	r2, r3
              Init->WaitSignalActive        | \
 8002d24:	683b      	ldr	r3, [r7, #0]
 8002d26:	69db      	ldr	r3, [r3, #28]
              Init->WaitSignalPolarity      | \
 8002d28:	431a      	orrs	r2, r3
              Init->WriteOperation          | \
 8002d2a:	683b      	ldr	r3, [r7, #0]
 8002d2c:	6a1b      	ldr	r3, [r3, #32]
              Init->WaitSignalActive        | \
 8002d2e:	431a      	orrs	r2, r3
              Init->WaitSignal              | \
 8002d30:	683b      	ldr	r3, [r7, #0]
 8002d32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
              Init->WriteOperation          | \
 8002d34:	431a      	orrs	r2, r3
              Init->ExtendedMode            | \
 8002d36:	683b      	ldr	r3, [r7, #0]
 8002d38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
              Init->WaitSignal              | \
 8002d3a:	431a      	orrs	r2, r3
              Init->AsynchronousWait        | \
 8002d3c:	683b      	ldr	r3, [r7, #0]
 8002d3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
              Init->ExtendedMode            | \
 8002d40:	431a      	orrs	r2, r3
              Init->WriteBurst);
 8002d42:	683b      	ldr	r3, [r7, #0]
 8002d44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  btcr_reg = (flashaccess                   | \
 8002d46:	4313      	orrs	r3, r2
 8002d48:	613b      	str	r3, [r7, #16]

  btcr_reg |= Init->WrapMode;
 8002d4a:	683b      	ldr	r3, [r7, #0]
 8002d4c:	699b      	ldr	r3, [r3, #24]
 8002d4e:	693a      	ldr	r2, [r7, #16]
 8002d50:	4313      	orrs	r3, r2
 8002d52:	613b      	str	r3, [r7, #16]
  btcr_reg |= Init->PageSize;
 8002d54:	683b      	ldr	r3, [r7, #0]
 8002d56:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002d58:	693a      	ldr	r2, [r7, #16]
 8002d5a:	4313      	orrs	r3, r2
 8002d5c:	613b      	str	r3, [r7, #16]

  mask = (FSMC_BCRx_MBKEN                |
 8002d5e:	4b10      	ldr	r3, [pc, #64]	; (8002da0 <FSMC_NORSRAM_Init+0xd0>)
 8002d60:	60fb      	str	r3, [r7, #12]
          FSMC_BCRx_WAITEN               |
          FSMC_BCRx_EXTMOD               |
          FSMC_BCRx_ASYNCWAIT            |
          FSMC_BCRx_CBURSTRW);

  mask |= FSMC_BCRx_WRAPMOD;
 8002d62:	68fb      	ldr	r3, [r7, #12]
 8002d64:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002d68:	60fb      	str	r3, [r7, #12]
  mask |= 0x00070000U; /* CPSIZE to be defined in CMSIS file */
 8002d6a:	68fb      	ldr	r3, [r7, #12]
 8002d6c:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
 8002d70:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(Device->BTCR[Init->NSBank], mask, btcr_reg);
 8002d72:	683b      	ldr	r3, [r7, #0]
 8002d74:	681a      	ldr	r2, [r3, #0]
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	43db      	mvns	r3, r3
 8002d80:	ea02 0103 	and.w	r1, r2, r3
 8002d84:	683b      	ldr	r3, [r7, #0]
 8002d86:	681a      	ldr	r2, [r3, #0]
 8002d88:	693b      	ldr	r3, [r7, #16]
 8002d8a:	4319      	orrs	r1, r3
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]


  return HAL_OK;
 8002d92:	2300      	movs	r3, #0
}
 8002d94:	4618      	mov	r0, r3
 8002d96:	371c      	adds	r7, #28
 8002d98:	46bd      	mov	sp, r7
 8002d9a:	bc80      	pop	{r7}
 8002d9c:	4770      	bx	lr
 8002d9e:	bf00      	nop
 8002da0:	0008fb7f 	.word	0x0008fb7f

08002da4 <FSMC_NORSRAM_Timing_Init>:
  * @param  Bank NORSRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_NORSRAM_Timing_Init(FSMC_NORSRAM_TypeDef *Device,
                                          FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 8002da4:	b480      	push	{r7}
 8002da6:	b085      	sub	sp, #20
 8002da8:	af00      	add	r7, sp, #0
 8002daa:	60f8      	str	r0, [r7, #12]
 8002dac:	60b9      	str	r1, [r7, #8]
 8002dae:	607a      	str	r2, [r7, #4]
  assert_param(IS_FSMC_DATA_LATENCY(Timing->DataLatency));
  assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
  assert_param(IS_FSMC_NORSRAM_BANK(Bank));

  /* Set FSMC_NORSRAM device timing parameters */
  MODIFY_REG(Device->BTCR[Bank + 1U], BTR_CLEAR_MASK, (Timing->AddressSetupTime                                  |
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	1c5a      	adds	r2, r3, #1
 8002db4:	68fb      	ldr	r3, [r7, #12]
 8002db6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002dba:	f003 4140 	and.w	r1, r3, #3221225472	; 0xc0000000
 8002dbe:	68bb      	ldr	r3, [r7, #8]
 8002dc0:	681a      	ldr	r2, [r3, #0]
 8002dc2:	68bb      	ldr	r3, [r7, #8]
 8002dc4:	685b      	ldr	r3, [r3, #4]
 8002dc6:	011b      	lsls	r3, r3, #4
 8002dc8:	431a      	orrs	r2, r3
 8002dca:	68bb      	ldr	r3, [r7, #8]
 8002dcc:	689b      	ldr	r3, [r3, #8]
 8002dce:	021b      	lsls	r3, r3, #8
 8002dd0:	431a      	orrs	r2, r3
 8002dd2:	68bb      	ldr	r3, [r7, #8]
 8002dd4:	68db      	ldr	r3, [r3, #12]
 8002dd6:	041b      	lsls	r3, r3, #16
 8002dd8:	431a      	orrs	r2, r3
 8002dda:	68bb      	ldr	r3, [r7, #8]
 8002ddc:	691b      	ldr	r3, [r3, #16]
 8002dde:	3b01      	subs	r3, #1
 8002de0:	051b      	lsls	r3, r3, #20
 8002de2:	431a      	orrs	r2, r3
 8002de4:	68bb      	ldr	r3, [r7, #8]
 8002de6:	695b      	ldr	r3, [r3, #20]
 8002de8:	3b02      	subs	r3, #2
 8002dea:	061b      	lsls	r3, r3, #24
 8002dec:	431a      	orrs	r2, r3
 8002dee:	68bb      	ldr	r3, [r7, #8]
 8002df0:	699b      	ldr	r3, [r3, #24]
 8002df2:	4313      	orrs	r3, r2
 8002df4:	687a      	ldr	r2, [r7, #4]
 8002df6:	3201      	adds	r2, #1
 8002df8:	4319      	orrs	r1, r3
 8002dfa:	68fb      	ldr	r3, [r7, #12]
 8002dfc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                                                       ((Timing->BusTurnAroundDuration)  << FSMC_BTRx_BUSTURN_Pos) |
                                                       (((Timing->CLKDivision) - 1U)     << FSMC_BTRx_CLKDIV_Pos)  |
                                                       (((Timing->DataLatency) - 2U)     << FSMC_BTRx_DATLAT_Pos)  |
                                                       (Timing->AccessMode)));

  return HAL_OK;
 8002e00:	2300      	movs	r3, #0
}
 8002e02:	4618      	mov	r0, r3
 8002e04:	3714      	adds	r7, #20
 8002e06:	46bd      	mov	sp, r7
 8002e08:	bc80      	pop	{r7}
 8002e0a:	4770      	bx	lr

08002e0c <FSMC_NORSRAM_Extended_Timing_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_NORSRAM_Extended_Timing_Init(FSMC_NORSRAM_EXTENDED_TypeDef *Device,
                                                   FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank,
                                                   uint32_t ExtendedMode)
{
 8002e0c:	b480      	push	{r7}
 8002e0e:	b085      	sub	sp, #20
 8002e10:	af00      	add	r7, sp, #0
 8002e12:	60f8      	str	r0, [r7, #12]
 8002e14:	60b9      	str	r1, [r7, #8]
 8002e16:	607a      	str	r2, [r7, #4]
 8002e18:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FSMC_EXTENDED_MODE(ExtendedMode));

  /* Set NORSRAM device timing register for write configuration, if extended mode is used */
  if (ExtendedMode == FSMC_EXTENDED_MODE_ENABLE)
 8002e1a:	683b      	ldr	r3, [r7, #0]
 8002e1c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002e20:	d11d      	bne.n	8002e5e <FSMC_NORSRAM_Extended_Timing_Init+0x52>
    assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
    assert_param(IS_FSMC_NORSRAM_BANK(Bank));

    /* Set NORSRAM device timing register for write configuration, if extended mode is used */
#if defined(FSMC_BWTRx_BUSTURN)
    MODIFY_REG(Device->BWTR[Bank], BWTR_CLEAR_MASK, (Timing->AddressSetupTime                                    |
 8002e22:	68fb      	ldr	r3, [r7, #12]
 8002e24:	687a      	ldr	r2, [r7, #4]
 8002e26:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8002e2a:	4b13      	ldr	r3, [pc, #76]	; (8002e78 <FSMC_NORSRAM_Extended_Timing_Init+0x6c>)
 8002e2c:	4013      	ands	r3, r2
 8002e2e:	68ba      	ldr	r2, [r7, #8]
 8002e30:	6811      	ldr	r1, [r2, #0]
 8002e32:	68ba      	ldr	r2, [r7, #8]
 8002e34:	6852      	ldr	r2, [r2, #4]
 8002e36:	0112      	lsls	r2, r2, #4
 8002e38:	4311      	orrs	r1, r2
 8002e3a:	68ba      	ldr	r2, [r7, #8]
 8002e3c:	6892      	ldr	r2, [r2, #8]
 8002e3e:	0212      	lsls	r2, r2, #8
 8002e40:	4311      	orrs	r1, r2
 8002e42:	68ba      	ldr	r2, [r7, #8]
 8002e44:	6992      	ldr	r2, [r2, #24]
 8002e46:	4311      	orrs	r1, r2
 8002e48:	68ba      	ldr	r2, [r7, #8]
 8002e4a:	68d2      	ldr	r2, [r2, #12]
 8002e4c:	0412      	lsls	r2, r2, #16
 8002e4e:	430a      	orrs	r2, r1
 8002e50:	ea43 0102 	orr.w	r1, r3, r2
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	687a      	ldr	r2, [r7, #4]
 8002e58:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8002e5c:	e005      	b.n	8002e6a <FSMC_NORSRAM_Extended_Timing_Init+0x5e>
                                                     (((Timing->DataLatency) - 2U)     << FSMC_BWTRx_DATLAT_Pos)));
#endif /* FSMC_BWTRx_BUSTURN */
  }
  else
  {
    Device->BWTR[Bank] = 0x0FFFFFFFU;
 8002e5e:	68fb      	ldr	r3, [r7, #12]
 8002e60:	687a      	ldr	r2, [r7, #4]
 8002e62:	f06f 4170 	mvn.w	r1, #4026531840	; 0xf0000000
 8002e66:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }

  return HAL_OK;
 8002e6a:	2300      	movs	r3, #0
}
 8002e6c:	4618      	mov	r0, r3
 8002e6e:	3714      	adds	r7, #20
 8002e70:	46bd      	mov	sp, r7
 8002e72:	bc80      	pop	{r7}
 8002e74:	4770      	bx	lr
 8002e76:	bf00      	nop
 8002e78:	cff00000 	.word	0xcff00000

08002e7c <__errno>:
 8002e7c:	4b01      	ldr	r3, [pc, #4]	; (8002e84 <__errno+0x8>)
 8002e7e:	6818      	ldr	r0, [r3, #0]
 8002e80:	4770      	bx	lr
 8002e82:	bf00      	nop
 8002e84:	2000000c 	.word	0x2000000c

08002e88 <__libc_init_array>:
 8002e88:	b570      	push	{r4, r5, r6, lr}
 8002e8a:	2600      	movs	r6, #0
 8002e8c:	4d0c      	ldr	r5, [pc, #48]	; (8002ec0 <__libc_init_array+0x38>)
 8002e8e:	4c0d      	ldr	r4, [pc, #52]	; (8002ec4 <__libc_init_array+0x3c>)
 8002e90:	1b64      	subs	r4, r4, r5
 8002e92:	10a4      	asrs	r4, r4, #2
 8002e94:	42a6      	cmp	r6, r4
 8002e96:	d109      	bne.n	8002eac <__libc_init_array+0x24>
 8002e98:	f000 fc9c 	bl	80037d4 <_init>
 8002e9c:	2600      	movs	r6, #0
 8002e9e:	4d0a      	ldr	r5, [pc, #40]	; (8002ec8 <__libc_init_array+0x40>)
 8002ea0:	4c0a      	ldr	r4, [pc, #40]	; (8002ecc <__libc_init_array+0x44>)
 8002ea2:	1b64      	subs	r4, r4, r5
 8002ea4:	10a4      	asrs	r4, r4, #2
 8002ea6:	42a6      	cmp	r6, r4
 8002ea8:	d105      	bne.n	8002eb6 <__libc_init_array+0x2e>
 8002eaa:	bd70      	pop	{r4, r5, r6, pc}
 8002eac:	f855 3b04 	ldr.w	r3, [r5], #4
 8002eb0:	4798      	blx	r3
 8002eb2:	3601      	adds	r6, #1
 8002eb4:	e7ee      	b.n	8002e94 <__libc_init_array+0xc>
 8002eb6:	f855 3b04 	ldr.w	r3, [r5], #4
 8002eba:	4798      	blx	r3
 8002ebc:	3601      	adds	r6, #1
 8002ebe:	e7f2      	b.n	8002ea6 <__libc_init_array+0x1e>
 8002ec0:	08003e80 	.word	0x08003e80
 8002ec4:	08003e80 	.word	0x08003e80
 8002ec8:	08003e80 	.word	0x08003e80
 8002ecc:	08003e84 	.word	0x08003e84

08002ed0 <memset>:
 8002ed0:	4603      	mov	r3, r0
 8002ed2:	4402      	add	r2, r0
 8002ed4:	4293      	cmp	r3, r2
 8002ed6:	d100      	bne.n	8002eda <memset+0xa>
 8002ed8:	4770      	bx	lr
 8002eda:	f803 1b01 	strb.w	r1, [r3], #1
 8002ede:	e7f9      	b.n	8002ed4 <memset+0x4>

08002ee0 <siprintf>:
 8002ee0:	b40e      	push	{r1, r2, r3}
 8002ee2:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8002ee6:	b500      	push	{lr}
 8002ee8:	b09c      	sub	sp, #112	; 0x70
 8002eea:	ab1d      	add	r3, sp, #116	; 0x74
 8002eec:	9002      	str	r0, [sp, #8]
 8002eee:	9006      	str	r0, [sp, #24]
 8002ef0:	9107      	str	r1, [sp, #28]
 8002ef2:	9104      	str	r1, [sp, #16]
 8002ef4:	4808      	ldr	r0, [pc, #32]	; (8002f18 <siprintf+0x38>)
 8002ef6:	4909      	ldr	r1, [pc, #36]	; (8002f1c <siprintf+0x3c>)
 8002ef8:	f853 2b04 	ldr.w	r2, [r3], #4
 8002efc:	9105      	str	r1, [sp, #20]
 8002efe:	6800      	ldr	r0, [r0, #0]
 8002f00:	a902      	add	r1, sp, #8
 8002f02:	9301      	str	r3, [sp, #4]
 8002f04:	f000 f868 	bl	8002fd8 <_svfiprintf_r>
 8002f08:	2200      	movs	r2, #0
 8002f0a:	9b02      	ldr	r3, [sp, #8]
 8002f0c:	701a      	strb	r2, [r3, #0]
 8002f0e:	b01c      	add	sp, #112	; 0x70
 8002f10:	f85d eb04 	ldr.w	lr, [sp], #4
 8002f14:	b003      	add	sp, #12
 8002f16:	4770      	bx	lr
 8002f18:	2000000c 	.word	0x2000000c
 8002f1c:	ffff0208 	.word	0xffff0208

08002f20 <__ssputs_r>:
 8002f20:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002f24:	688e      	ldr	r6, [r1, #8]
 8002f26:	4682      	mov	sl, r0
 8002f28:	429e      	cmp	r6, r3
 8002f2a:	460c      	mov	r4, r1
 8002f2c:	4690      	mov	r8, r2
 8002f2e:	461f      	mov	r7, r3
 8002f30:	d838      	bhi.n	8002fa4 <__ssputs_r+0x84>
 8002f32:	898a      	ldrh	r2, [r1, #12]
 8002f34:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8002f38:	d032      	beq.n	8002fa0 <__ssputs_r+0x80>
 8002f3a:	6825      	ldr	r5, [r4, #0]
 8002f3c:	6909      	ldr	r1, [r1, #16]
 8002f3e:	3301      	adds	r3, #1
 8002f40:	eba5 0901 	sub.w	r9, r5, r1
 8002f44:	6965      	ldr	r5, [r4, #20]
 8002f46:	444b      	add	r3, r9
 8002f48:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8002f4c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8002f50:	106d      	asrs	r5, r5, #1
 8002f52:	429d      	cmp	r5, r3
 8002f54:	bf38      	it	cc
 8002f56:	461d      	movcc	r5, r3
 8002f58:	0553      	lsls	r3, r2, #21
 8002f5a:	d531      	bpl.n	8002fc0 <__ssputs_r+0xa0>
 8002f5c:	4629      	mov	r1, r5
 8002f5e:	f000 fb6f 	bl	8003640 <_malloc_r>
 8002f62:	4606      	mov	r6, r0
 8002f64:	b950      	cbnz	r0, 8002f7c <__ssputs_r+0x5c>
 8002f66:	230c      	movs	r3, #12
 8002f68:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002f6c:	f8ca 3000 	str.w	r3, [sl]
 8002f70:	89a3      	ldrh	r3, [r4, #12]
 8002f72:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002f76:	81a3      	strh	r3, [r4, #12]
 8002f78:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002f7c:	464a      	mov	r2, r9
 8002f7e:	6921      	ldr	r1, [r4, #16]
 8002f80:	f000 face 	bl	8003520 <memcpy>
 8002f84:	89a3      	ldrh	r3, [r4, #12]
 8002f86:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8002f8a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002f8e:	81a3      	strh	r3, [r4, #12]
 8002f90:	6126      	str	r6, [r4, #16]
 8002f92:	444e      	add	r6, r9
 8002f94:	6026      	str	r6, [r4, #0]
 8002f96:	463e      	mov	r6, r7
 8002f98:	6165      	str	r5, [r4, #20]
 8002f9a:	eba5 0509 	sub.w	r5, r5, r9
 8002f9e:	60a5      	str	r5, [r4, #8]
 8002fa0:	42be      	cmp	r6, r7
 8002fa2:	d900      	bls.n	8002fa6 <__ssputs_r+0x86>
 8002fa4:	463e      	mov	r6, r7
 8002fa6:	4632      	mov	r2, r6
 8002fa8:	4641      	mov	r1, r8
 8002faa:	6820      	ldr	r0, [r4, #0]
 8002fac:	f000 fac6 	bl	800353c <memmove>
 8002fb0:	68a3      	ldr	r3, [r4, #8]
 8002fb2:	2000      	movs	r0, #0
 8002fb4:	1b9b      	subs	r3, r3, r6
 8002fb6:	60a3      	str	r3, [r4, #8]
 8002fb8:	6823      	ldr	r3, [r4, #0]
 8002fba:	4433      	add	r3, r6
 8002fbc:	6023      	str	r3, [r4, #0]
 8002fbe:	e7db      	b.n	8002f78 <__ssputs_r+0x58>
 8002fc0:	462a      	mov	r2, r5
 8002fc2:	f000 fbb1 	bl	8003728 <_realloc_r>
 8002fc6:	4606      	mov	r6, r0
 8002fc8:	2800      	cmp	r0, #0
 8002fca:	d1e1      	bne.n	8002f90 <__ssputs_r+0x70>
 8002fcc:	4650      	mov	r0, sl
 8002fce:	6921      	ldr	r1, [r4, #16]
 8002fd0:	f000 face 	bl	8003570 <_free_r>
 8002fd4:	e7c7      	b.n	8002f66 <__ssputs_r+0x46>
	...

08002fd8 <_svfiprintf_r>:
 8002fd8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002fdc:	4698      	mov	r8, r3
 8002fde:	898b      	ldrh	r3, [r1, #12]
 8002fe0:	4607      	mov	r7, r0
 8002fe2:	061b      	lsls	r3, r3, #24
 8002fe4:	460d      	mov	r5, r1
 8002fe6:	4614      	mov	r4, r2
 8002fe8:	b09d      	sub	sp, #116	; 0x74
 8002fea:	d50e      	bpl.n	800300a <_svfiprintf_r+0x32>
 8002fec:	690b      	ldr	r3, [r1, #16]
 8002fee:	b963      	cbnz	r3, 800300a <_svfiprintf_r+0x32>
 8002ff0:	2140      	movs	r1, #64	; 0x40
 8002ff2:	f000 fb25 	bl	8003640 <_malloc_r>
 8002ff6:	6028      	str	r0, [r5, #0]
 8002ff8:	6128      	str	r0, [r5, #16]
 8002ffa:	b920      	cbnz	r0, 8003006 <_svfiprintf_r+0x2e>
 8002ffc:	230c      	movs	r3, #12
 8002ffe:	603b      	str	r3, [r7, #0]
 8003000:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003004:	e0d1      	b.n	80031aa <_svfiprintf_r+0x1d2>
 8003006:	2340      	movs	r3, #64	; 0x40
 8003008:	616b      	str	r3, [r5, #20]
 800300a:	2300      	movs	r3, #0
 800300c:	9309      	str	r3, [sp, #36]	; 0x24
 800300e:	2320      	movs	r3, #32
 8003010:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003014:	2330      	movs	r3, #48	; 0x30
 8003016:	f04f 0901 	mov.w	r9, #1
 800301a:	f8cd 800c 	str.w	r8, [sp, #12]
 800301e:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 80031c4 <_svfiprintf_r+0x1ec>
 8003022:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003026:	4623      	mov	r3, r4
 8003028:	469a      	mov	sl, r3
 800302a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800302e:	b10a      	cbz	r2, 8003034 <_svfiprintf_r+0x5c>
 8003030:	2a25      	cmp	r2, #37	; 0x25
 8003032:	d1f9      	bne.n	8003028 <_svfiprintf_r+0x50>
 8003034:	ebba 0b04 	subs.w	fp, sl, r4
 8003038:	d00b      	beq.n	8003052 <_svfiprintf_r+0x7a>
 800303a:	465b      	mov	r3, fp
 800303c:	4622      	mov	r2, r4
 800303e:	4629      	mov	r1, r5
 8003040:	4638      	mov	r0, r7
 8003042:	f7ff ff6d 	bl	8002f20 <__ssputs_r>
 8003046:	3001      	adds	r0, #1
 8003048:	f000 80aa 	beq.w	80031a0 <_svfiprintf_r+0x1c8>
 800304c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800304e:	445a      	add	r2, fp
 8003050:	9209      	str	r2, [sp, #36]	; 0x24
 8003052:	f89a 3000 	ldrb.w	r3, [sl]
 8003056:	2b00      	cmp	r3, #0
 8003058:	f000 80a2 	beq.w	80031a0 <_svfiprintf_r+0x1c8>
 800305c:	2300      	movs	r3, #0
 800305e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003062:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003066:	f10a 0a01 	add.w	sl, sl, #1
 800306a:	9304      	str	r3, [sp, #16]
 800306c:	9307      	str	r3, [sp, #28]
 800306e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003072:	931a      	str	r3, [sp, #104]	; 0x68
 8003074:	4654      	mov	r4, sl
 8003076:	2205      	movs	r2, #5
 8003078:	f814 1b01 	ldrb.w	r1, [r4], #1
 800307c:	4851      	ldr	r0, [pc, #324]	; (80031c4 <_svfiprintf_r+0x1ec>)
 800307e:	f000 fa41 	bl	8003504 <memchr>
 8003082:	9a04      	ldr	r2, [sp, #16]
 8003084:	b9d8      	cbnz	r0, 80030be <_svfiprintf_r+0xe6>
 8003086:	06d0      	lsls	r0, r2, #27
 8003088:	bf44      	itt	mi
 800308a:	2320      	movmi	r3, #32
 800308c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003090:	0711      	lsls	r1, r2, #28
 8003092:	bf44      	itt	mi
 8003094:	232b      	movmi	r3, #43	; 0x2b
 8003096:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800309a:	f89a 3000 	ldrb.w	r3, [sl]
 800309e:	2b2a      	cmp	r3, #42	; 0x2a
 80030a0:	d015      	beq.n	80030ce <_svfiprintf_r+0xf6>
 80030a2:	4654      	mov	r4, sl
 80030a4:	2000      	movs	r0, #0
 80030a6:	f04f 0c0a 	mov.w	ip, #10
 80030aa:	9a07      	ldr	r2, [sp, #28]
 80030ac:	4621      	mov	r1, r4
 80030ae:	f811 3b01 	ldrb.w	r3, [r1], #1
 80030b2:	3b30      	subs	r3, #48	; 0x30
 80030b4:	2b09      	cmp	r3, #9
 80030b6:	d94e      	bls.n	8003156 <_svfiprintf_r+0x17e>
 80030b8:	b1b0      	cbz	r0, 80030e8 <_svfiprintf_r+0x110>
 80030ba:	9207      	str	r2, [sp, #28]
 80030bc:	e014      	b.n	80030e8 <_svfiprintf_r+0x110>
 80030be:	eba0 0308 	sub.w	r3, r0, r8
 80030c2:	fa09 f303 	lsl.w	r3, r9, r3
 80030c6:	4313      	orrs	r3, r2
 80030c8:	46a2      	mov	sl, r4
 80030ca:	9304      	str	r3, [sp, #16]
 80030cc:	e7d2      	b.n	8003074 <_svfiprintf_r+0x9c>
 80030ce:	9b03      	ldr	r3, [sp, #12]
 80030d0:	1d19      	adds	r1, r3, #4
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	9103      	str	r1, [sp, #12]
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	bfbb      	ittet	lt
 80030da:	425b      	neglt	r3, r3
 80030dc:	f042 0202 	orrlt.w	r2, r2, #2
 80030e0:	9307      	strge	r3, [sp, #28]
 80030e2:	9307      	strlt	r3, [sp, #28]
 80030e4:	bfb8      	it	lt
 80030e6:	9204      	strlt	r2, [sp, #16]
 80030e8:	7823      	ldrb	r3, [r4, #0]
 80030ea:	2b2e      	cmp	r3, #46	; 0x2e
 80030ec:	d10c      	bne.n	8003108 <_svfiprintf_r+0x130>
 80030ee:	7863      	ldrb	r3, [r4, #1]
 80030f0:	2b2a      	cmp	r3, #42	; 0x2a
 80030f2:	d135      	bne.n	8003160 <_svfiprintf_r+0x188>
 80030f4:	9b03      	ldr	r3, [sp, #12]
 80030f6:	3402      	adds	r4, #2
 80030f8:	1d1a      	adds	r2, r3, #4
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	9203      	str	r2, [sp, #12]
 80030fe:	2b00      	cmp	r3, #0
 8003100:	bfb8      	it	lt
 8003102:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8003106:	9305      	str	r3, [sp, #20]
 8003108:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 80031c8 <_svfiprintf_r+0x1f0>
 800310c:	2203      	movs	r2, #3
 800310e:	4650      	mov	r0, sl
 8003110:	7821      	ldrb	r1, [r4, #0]
 8003112:	f000 f9f7 	bl	8003504 <memchr>
 8003116:	b140      	cbz	r0, 800312a <_svfiprintf_r+0x152>
 8003118:	2340      	movs	r3, #64	; 0x40
 800311a:	eba0 000a 	sub.w	r0, r0, sl
 800311e:	fa03 f000 	lsl.w	r0, r3, r0
 8003122:	9b04      	ldr	r3, [sp, #16]
 8003124:	3401      	adds	r4, #1
 8003126:	4303      	orrs	r3, r0
 8003128:	9304      	str	r3, [sp, #16]
 800312a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800312e:	2206      	movs	r2, #6
 8003130:	4826      	ldr	r0, [pc, #152]	; (80031cc <_svfiprintf_r+0x1f4>)
 8003132:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8003136:	f000 f9e5 	bl	8003504 <memchr>
 800313a:	2800      	cmp	r0, #0
 800313c:	d038      	beq.n	80031b0 <_svfiprintf_r+0x1d8>
 800313e:	4b24      	ldr	r3, [pc, #144]	; (80031d0 <_svfiprintf_r+0x1f8>)
 8003140:	bb1b      	cbnz	r3, 800318a <_svfiprintf_r+0x1b2>
 8003142:	9b03      	ldr	r3, [sp, #12]
 8003144:	3307      	adds	r3, #7
 8003146:	f023 0307 	bic.w	r3, r3, #7
 800314a:	3308      	adds	r3, #8
 800314c:	9303      	str	r3, [sp, #12]
 800314e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003150:	4433      	add	r3, r6
 8003152:	9309      	str	r3, [sp, #36]	; 0x24
 8003154:	e767      	b.n	8003026 <_svfiprintf_r+0x4e>
 8003156:	460c      	mov	r4, r1
 8003158:	2001      	movs	r0, #1
 800315a:	fb0c 3202 	mla	r2, ip, r2, r3
 800315e:	e7a5      	b.n	80030ac <_svfiprintf_r+0xd4>
 8003160:	2300      	movs	r3, #0
 8003162:	f04f 0c0a 	mov.w	ip, #10
 8003166:	4619      	mov	r1, r3
 8003168:	3401      	adds	r4, #1
 800316a:	9305      	str	r3, [sp, #20]
 800316c:	4620      	mov	r0, r4
 800316e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003172:	3a30      	subs	r2, #48	; 0x30
 8003174:	2a09      	cmp	r2, #9
 8003176:	d903      	bls.n	8003180 <_svfiprintf_r+0x1a8>
 8003178:	2b00      	cmp	r3, #0
 800317a:	d0c5      	beq.n	8003108 <_svfiprintf_r+0x130>
 800317c:	9105      	str	r1, [sp, #20]
 800317e:	e7c3      	b.n	8003108 <_svfiprintf_r+0x130>
 8003180:	4604      	mov	r4, r0
 8003182:	2301      	movs	r3, #1
 8003184:	fb0c 2101 	mla	r1, ip, r1, r2
 8003188:	e7f0      	b.n	800316c <_svfiprintf_r+0x194>
 800318a:	ab03      	add	r3, sp, #12
 800318c:	9300      	str	r3, [sp, #0]
 800318e:	462a      	mov	r2, r5
 8003190:	4638      	mov	r0, r7
 8003192:	4b10      	ldr	r3, [pc, #64]	; (80031d4 <_svfiprintf_r+0x1fc>)
 8003194:	a904      	add	r1, sp, #16
 8003196:	f3af 8000 	nop.w
 800319a:	1c42      	adds	r2, r0, #1
 800319c:	4606      	mov	r6, r0
 800319e:	d1d6      	bne.n	800314e <_svfiprintf_r+0x176>
 80031a0:	89ab      	ldrh	r3, [r5, #12]
 80031a2:	065b      	lsls	r3, r3, #25
 80031a4:	f53f af2c 	bmi.w	8003000 <_svfiprintf_r+0x28>
 80031a8:	9809      	ldr	r0, [sp, #36]	; 0x24
 80031aa:	b01d      	add	sp, #116	; 0x74
 80031ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80031b0:	ab03      	add	r3, sp, #12
 80031b2:	9300      	str	r3, [sp, #0]
 80031b4:	462a      	mov	r2, r5
 80031b6:	4638      	mov	r0, r7
 80031b8:	4b06      	ldr	r3, [pc, #24]	; (80031d4 <_svfiprintf_r+0x1fc>)
 80031ba:	a904      	add	r1, sp, #16
 80031bc:	f000 f87c 	bl	80032b8 <_printf_i>
 80031c0:	e7eb      	b.n	800319a <_svfiprintf_r+0x1c2>
 80031c2:	bf00      	nop
 80031c4:	08003e4c 	.word	0x08003e4c
 80031c8:	08003e52 	.word	0x08003e52
 80031cc:	08003e56 	.word	0x08003e56
 80031d0:	00000000 	.word	0x00000000
 80031d4:	08002f21 	.word	0x08002f21

080031d8 <_printf_common>:
 80031d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80031dc:	4616      	mov	r6, r2
 80031de:	4699      	mov	r9, r3
 80031e0:	688a      	ldr	r2, [r1, #8]
 80031e2:	690b      	ldr	r3, [r1, #16]
 80031e4:	4607      	mov	r7, r0
 80031e6:	4293      	cmp	r3, r2
 80031e8:	bfb8      	it	lt
 80031ea:	4613      	movlt	r3, r2
 80031ec:	6033      	str	r3, [r6, #0]
 80031ee:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80031f2:	460c      	mov	r4, r1
 80031f4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80031f8:	b10a      	cbz	r2, 80031fe <_printf_common+0x26>
 80031fa:	3301      	adds	r3, #1
 80031fc:	6033      	str	r3, [r6, #0]
 80031fe:	6823      	ldr	r3, [r4, #0]
 8003200:	0699      	lsls	r1, r3, #26
 8003202:	bf42      	ittt	mi
 8003204:	6833      	ldrmi	r3, [r6, #0]
 8003206:	3302      	addmi	r3, #2
 8003208:	6033      	strmi	r3, [r6, #0]
 800320a:	6825      	ldr	r5, [r4, #0]
 800320c:	f015 0506 	ands.w	r5, r5, #6
 8003210:	d106      	bne.n	8003220 <_printf_common+0x48>
 8003212:	f104 0a19 	add.w	sl, r4, #25
 8003216:	68e3      	ldr	r3, [r4, #12]
 8003218:	6832      	ldr	r2, [r6, #0]
 800321a:	1a9b      	subs	r3, r3, r2
 800321c:	42ab      	cmp	r3, r5
 800321e:	dc28      	bgt.n	8003272 <_printf_common+0x9a>
 8003220:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8003224:	1e13      	subs	r3, r2, #0
 8003226:	6822      	ldr	r2, [r4, #0]
 8003228:	bf18      	it	ne
 800322a:	2301      	movne	r3, #1
 800322c:	0692      	lsls	r2, r2, #26
 800322e:	d42d      	bmi.n	800328c <_printf_common+0xb4>
 8003230:	4649      	mov	r1, r9
 8003232:	4638      	mov	r0, r7
 8003234:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003238:	47c0      	blx	r8
 800323a:	3001      	adds	r0, #1
 800323c:	d020      	beq.n	8003280 <_printf_common+0xa8>
 800323e:	6823      	ldr	r3, [r4, #0]
 8003240:	68e5      	ldr	r5, [r4, #12]
 8003242:	f003 0306 	and.w	r3, r3, #6
 8003246:	2b04      	cmp	r3, #4
 8003248:	bf18      	it	ne
 800324a:	2500      	movne	r5, #0
 800324c:	6832      	ldr	r2, [r6, #0]
 800324e:	f04f 0600 	mov.w	r6, #0
 8003252:	68a3      	ldr	r3, [r4, #8]
 8003254:	bf08      	it	eq
 8003256:	1aad      	subeq	r5, r5, r2
 8003258:	6922      	ldr	r2, [r4, #16]
 800325a:	bf08      	it	eq
 800325c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003260:	4293      	cmp	r3, r2
 8003262:	bfc4      	itt	gt
 8003264:	1a9b      	subgt	r3, r3, r2
 8003266:	18ed      	addgt	r5, r5, r3
 8003268:	341a      	adds	r4, #26
 800326a:	42b5      	cmp	r5, r6
 800326c:	d11a      	bne.n	80032a4 <_printf_common+0xcc>
 800326e:	2000      	movs	r0, #0
 8003270:	e008      	b.n	8003284 <_printf_common+0xac>
 8003272:	2301      	movs	r3, #1
 8003274:	4652      	mov	r2, sl
 8003276:	4649      	mov	r1, r9
 8003278:	4638      	mov	r0, r7
 800327a:	47c0      	blx	r8
 800327c:	3001      	adds	r0, #1
 800327e:	d103      	bne.n	8003288 <_printf_common+0xb0>
 8003280:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003284:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003288:	3501      	adds	r5, #1
 800328a:	e7c4      	b.n	8003216 <_printf_common+0x3e>
 800328c:	2030      	movs	r0, #48	; 0x30
 800328e:	18e1      	adds	r1, r4, r3
 8003290:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003294:	1c5a      	adds	r2, r3, #1
 8003296:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800329a:	4422      	add	r2, r4
 800329c:	3302      	adds	r3, #2
 800329e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80032a2:	e7c5      	b.n	8003230 <_printf_common+0x58>
 80032a4:	2301      	movs	r3, #1
 80032a6:	4622      	mov	r2, r4
 80032a8:	4649      	mov	r1, r9
 80032aa:	4638      	mov	r0, r7
 80032ac:	47c0      	blx	r8
 80032ae:	3001      	adds	r0, #1
 80032b0:	d0e6      	beq.n	8003280 <_printf_common+0xa8>
 80032b2:	3601      	adds	r6, #1
 80032b4:	e7d9      	b.n	800326a <_printf_common+0x92>
	...

080032b8 <_printf_i>:
 80032b8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80032bc:	7e0f      	ldrb	r7, [r1, #24]
 80032be:	4691      	mov	r9, r2
 80032c0:	2f78      	cmp	r7, #120	; 0x78
 80032c2:	4680      	mov	r8, r0
 80032c4:	460c      	mov	r4, r1
 80032c6:	469a      	mov	sl, r3
 80032c8:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80032ca:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80032ce:	d807      	bhi.n	80032e0 <_printf_i+0x28>
 80032d0:	2f62      	cmp	r7, #98	; 0x62
 80032d2:	d80a      	bhi.n	80032ea <_printf_i+0x32>
 80032d4:	2f00      	cmp	r7, #0
 80032d6:	f000 80d9 	beq.w	800348c <_printf_i+0x1d4>
 80032da:	2f58      	cmp	r7, #88	; 0x58
 80032dc:	f000 80a4 	beq.w	8003428 <_printf_i+0x170>
 80032e0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80032e4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80032e8:	e03a      	b.n	8003360 <_printf_i+0xa8>
 80032ea:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80032ee:	2b15      	cmp	r3, #21
 80032f0:	d8f6      	bhi.n	80032e0 <_printf_i+0x28>
 80032f2:	a101      	add	r1, pc, #4	; (adr r1, 80032f8 <_printf_i+0x40>)
 80032f4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80032f8:	08003351 	.word	0x08003351
 80032fc:	08003365 	.word	0x08003365
 8003300:	080032e1 	.word	0x080032e1
 8003304:	080032e1 	.word	0x080032e1
 8003308:	080032e1 	.word	0x080032e1
 800330c:	080032e1 	.word	0x080032e1
 8003310:	08003365 	.word	0x08003365
 8003314:	080032e1 	.word	0x080032e1
 8003318:	080032e1 	.word	0x080032e1
 800331c:	080032e1 	.word	0x080032e1
 8003320:	080032e1 	.word	0x080032e1
 8003324:	08003473 	.word	0x08003473
 8003328:	08003395 	.word	0x08003395
 800332c:	08003455 	.word	0x08003455
 8003330:	080032e1 	.word	0x080032e1
 8003334:	080032e1 	.word	0x080032e1
 8003338:	08003495 	.word	0x08003495
 800333c:	080032e1 	.word	0x080032e1
 8003340:	08003395 	.word	0x08003395
 8003344:	080032e1 	.word	0x080032e1
 8003348:	080032e1 	.word	0x080032e1
 800334c:	0800345d 	.word	0x0800345d
 8003350:	682b      	ldr	r3, [r5, #0]
 8003352:	1d1a      	adds	r2, r3, #4
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	602a      	str	r2, [r5, #0]
 8003358:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800335c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003360:	2301      	movs	r3, #1
 8003362:	e0a4      	b.n	80034ae <_printf_i+0x1f6>
 8003364:	6820      	ldr	r0, [r4, #0]
 8003366:	6829      	ldr	r1, [r5, #0]
 8003368:	0606      	lsls	r6, r0, #24
 800336a:	f101 0304 	add.w	r3, r1, #4
 800336e:	d50a      	bpl.n	8003386 <_printf_i+0xce>
 8003370:	680e      	ldr	r6, [r1, #0]
 8003372:	602b      	str	r3, [r5, #0]
 8003374:	2e00      	cmp	r6, #0
 8003376:	da03      	bge.n	8003380 <_printf_i+0xc8>
 8003378:	232d      	movs	r3, #45	; 0x2d
 800337a:	4276      	negs	r6, r6
 800337c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003380:	230a      	movs	r3, #10
 8003382:	485e      	ldr	r0, [pc, #376]	; (80034fc <_printf_i+0x244>)
 8003384:	e019      	b.n	80033ba <_printf_i+0x102>
 8003386:	680e      	ldr	r6, [r1, #0]
 8003388:	f010 0f40 	tst.w	r0, #64	; 0x40
 800338c:	602b      	str	r3, [r5, #0]
 800338e:	bf18      	it	ne
 8003390:	b236      	sxthne	r6, r6
 8003392:	e7ef      	b.n	8003374 <_printf_i+0xbc>
 8003394:	682b      	ldr	r3, [r5, #0]
 8003396:	6820      	ldr	r0, [r4, #0]
 8003398:	1d19      	adds	r1, r3, #4
 800339a:	6029      	str	r1, [r5, #0]
 800339c:	0601      	lsls	r1, r0, #24
 800339e:	d501      	bpl.n	80033a4 <_printf_i+0xec>
 80033a0:	681e      	ldr	r6, [r3, #0]
 80033a2:	e002      	b.n	80033aa <_printf_i+0xf2>
 80033a4:	0646      	lsls	r6, r0, #25
 80033a6:	d5fb      	bpl.n	80033a0 <_printf_i+0xe8>
 80033a8:	881e      	ldrh	r6, [r3, #0]
 80033aa:	2f6f      	cmp	r7, #111	; 0x6f
 80033ac:	bf0c      	ite	eq
 80033ae:	2308      	moveq	r3, #8
 80033b0:	230a      	movne	r3, #10
 80033b2:	4852      	ldr	r0, [pc, #328]	; (80034fc <_printf_i+0x244>)
 80033b4:	2100      	movs	r1, #0
 80033b6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80033ba:	6865      	ldr	r5, [r4, #4]
 80033bc:	2d00      	cmp	r5, #0
 80033be:	bfa8      	it	ge
 80033c0:	6821      	ldrge	r1, [r4, #0]
 80033c2:	60a5      	str	r5, [r4, #8]
 80033c4:	bfa4      	itt	ge
 80033c6:	f021 0104 	bicge.w	r1, r1, #4
 80033ca:	6021      	strge	r1, [r4, #0]
 80033cc:	b90e      	cbnz	r6, 80033d2 <_printf_i+0x11a>
 80033ce:	2d00      	cmp	r5, #0
 80033d0:	d04d      	beq.n	800346e <_printf_i+0x1b6>
 80033d2:	4615      	mov	r5, r2
 80033d4:	fbb6 f1f3 	udiv	r1, r6, r3
 80033d8:	fb03 6711 	mls	r7, r3, r1, r6
 80033dc:	5dc7      	ldrb	r7, [r0, r7]
 80033de:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80033e2:	4637      	mov	r7, r6
 80033e4:	42bb      	cmp	r3, r7
 80033e6:	460e      	mov	r6, r1
 80033e8:	d9f4      	bls.n	80033d4 <_printf_i+0x11c>
 80033ea:	2b08      	cmp	r3, #8
 80033ec:	d10b      	bne.n	8003406 <_printf_i+0x14e>
 80033ee:	6823      	ldr	r3, [r4, #0]
 80033f0:	07de      	lsls	r6, r3, #31
 80033f2:	d508      	bpl.n	8003406 <_printf_i+0x14e>
 80033f4:	6923      	ldr	r3, [r4, #16]
 80033f6:	6861      	ldr	r1, [r4, #4]
 80033f8:	4299      	cmp	r1, r3
 80033fa:	bfde      	ittt	le
 80033fc:	2330      	movle	r3, #48	; 0x30
 80033fe:	f805 3c01 	strble.w	r3, [r5, #-1]
 8003402:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8003406:	1b52      	subs	r2, r2, r5
 8003408:	6122      	str	r2, [r4, #16]
 800340a:	464b      	mov	r3, r9
 800340c:	4621      	mov	r1, r4
 800340e:	4640      	mov	r0, r8
 8003410:	f8cd a000 	str.w	sl, [sp]
 8003414:	aa03      	add	r2, sp, #12
 8003416:	f7ff fedf 	bl	80031d8 <_printf_common>
 800341a:	3001      	adds	r0, #1
 800341c:	d14c      	bne.n	80034b8 <_printf_i+0x200>
 800341e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003422:	b004      	add	sp, #16
 8003424:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003428:	4834      	ldr	r0, [pc, #208]	; (80034fc <_printf_i+0x244>)
 800342a:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800342e:	6829      	ldr	r1, [r5, #0]
 8003430:	6823      	ldr	r3, [r4, #0]
 8003432:	f851 6b04 	ldr.w	r6, [r1], #4
 8003436:	6029      	str	r1, [r5, #0]
 8003438:	061d      	lsls	r5, r3, #24
 800343a:	d514      	bpl.n	8003466 <_printf_i+0x1ae>
 800343c:	07df      	lsls	r7, r3, #31
 800343e:	bf44      	itt	mi
 8003440:	f043 0320 	orrmi.w	r3, r3, #32
 8003444:	6023      	strmi	r3, [r4, #0]
 8003446:	b91e      	cbnz	r6, 8003450 <_printf_i+0x198>
 8003448:	6823      	ldr	r3, [r4, #0]
 800344a:	f023 0320 	bic.w	r3, r3, #32
 800344e:	6023      	str	r3, [r4, #0]
 8003450:	2310      	movs	r3, #16
 8003452:	e7af      	b.n	80033b4 <_printf_i+0xfc>
 8003454:	6823      	ldr	r3, [r4, #0]
 8003456:	f043 0320 	orr.w	r3, r3, #32
 800345a:	6023      	str	r3, [r4, #0]
 800345c:	2378      	movs	r3, #120	; 0x78
 800345e:	4828      	ldr	r0, [pc, #160]	; (8003500 <_printf_i+0x248>)
 8003460:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8003464:	e7e3      	b.n	800342e <_printf_i+0x176>
 8003466:	0659      	lsls	r1, r3, #25
 8003468:	bf48      	it	mi
 800346a:	b2b6      	uxthmi	r6, r6
 800346c:	e7e6      	b.n	800343c <_printf_i+0x184>
 800346e:	4615      	mov	r5, r2
 8003470:	e7bb      	b.n	80033ea <_printf_i+0x132>
 8003472:	682b      	ldr	r3, [r5, #0]
 8003474:	6826      	ldr	r6, [r4, #0]
 8003476:	1d18      	adds	r0, r3, #4
 8003478:	6961      	ldr	r1, [r4, #20]
 800347a:	6028      	str	r0, [r5, #0]
 800347c:	0635      	lsls	r5, r6, #24
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	d501      	bpl.n	8003486 <_printf_i+0x1ce>
 8003482:	6019      	str	r1, [r3, #0]
 8003484:	e002      	b.n	800348c <_printf_i+0x1d4>
 8003486:	0670      	lsls	r0, r6, #25
 8003488:	d5fb      	bpl.n	8003482 <_printf_i+0x1ca>
 800348a:	8019      	strh	r1, [r3, #0]
 800348c:	2300      	movs	r3, #0
 800348e:	4615      	mov	r5, r2
 8003490:	6123      	str	r3, [r4, #16]
 8003492:	e7ba      	b.n	800340a <_printf_i+0x152>
 8003494:	682b      	ldr	r3, [r5, #0]
 8003496:	2100      	movs	r1, #0
 8003498:	1d1a      	adds	r2, r3, #4
 800349a:	602a      	str	r2, [r5, #0]
 800349c:	681d      	ldr	r5, [r3, #0]
 800349e:	6862      	ldr	r2, [r4, #4]
 80034a0:	4628      	mov	r0, r5
 80034a2:	f000 f82f 	bl	8003504 <memchr>
 80034a6:	b108      	cbz	r0, 80034ac <_printf_i+0x1f4>
 80034a8:	1b40      	subs	r0, r0, r5
 80034aa:	6060      	str	r0, [r4, #4]
 80034ac:	6863      	ldr	r3, [r4, #4]
 80034ae:	6123      	str	r3, [r4, #16]
 80034b0:	2300      	movs	r3, #0
 80034b2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80034b6:	e7a8      	b.n	800340a <_printf_i+0x152>
 80034b8:	462a      	mov	r2, r5
 80034ba:	4649      	mov	r1, r9
 80034bc:	4640      	mov	r0, r8
 80034be:	6923      	ldr	r3, [r4, #16]
 80034c0:	47d0      	blx	sl
 80034c2:	3001      	adds	r0, #1
 80034c4:	d0ab      	beq.n	800341e <_printf_i+0x166>
 80034c6:	6823      	ldr	r3, [r4, #0]
 80034c8:	079b      	lsls	r3, r3, #30
 80034ca:	d413      	bmi.n	80034f4 <_printf_i+0x23c>
 80034cc:	68e0      	ldr	r0, [r4, #12]
 80034ce:	9b03      	ldr	r3, [sp, #12]
 80034d0:	4298      	cmp	r0, r3
 80034d2:	bfb8      	it	lt
 80034d4:	4618      	movlt	r0, r3
 80034d6:	e7a4      	b.n	8003422 <_printf_i+0x16a>
 80034d8:	2301      	movs	r3, #1
 80034da:	4632      	mov	r2, r6
 80034dc:	4649      	mov	r1, r9
 80034de:	4640      	mov	r0, r8
 80034e0:	47d0      	blx	sl
 80034e2:	3001      	adds	r0, #1
 80034e4:	d09b      	beq.n	800341e <_printf_i+0x166>
 80034e6:	3501      	adds	r5, #1
 80034e8:	68e3      	ldr	r3, [r4, #12]
 80034ea:	9903      	ldr	r1, [sp, #12]
 80034ec:	1a5b      	subs	r3, r3, r1
 80034ee:	42ab      	cmp	r3, r5
 80034f0:	dcf2      	bgt.n	80034d8 <_printf_i+0x220>
 80034f2:	e7eb      	b.n	80034cc <_printf_i+0x214>
 80034f4:	2500      	movs	r5, #0
 80034f6:	f104 0619 	add.w	r6, r4, #25
 80034fa:	e7f5      	b.n	80034e8 <_printf_i+0x230>
 80034fc:	08003e5d 	.word	0x08003e5d
 8003500:	08003e6e 	.word	0x08003e6e

08003504 <memchr>:
 8003504:	4603      	mov	r3, r0
 8003506:	b510      	push	{r4, lr}
 8003508:	b2c9      	uxtb	r1, r1
 800350a:	4402      	add	r2, r0
 800350c:	4293      	cmp	r3, r2
 800350e:	4618      	mov	r0, r3
 8003510:	d101      	bne.n	8003516 <memchr+0x12>
 8003512:	2000      	movs	r0, #0
 8003514:	e003      	b.n	800351e <memchr+0x1a>
 8003516:	7804      	ldrb	r4, [r0, #0]
 8003518:	3301      	adds	r3, #1
 800351a:	428c      	cmp	r4, r1
 800351c:	d1f6      	bne.n	800350c <memchr+0x8>
 800351e:	bd10      	pop	{r4, pc}

08003520 <memcpy>:
 8003520:	440a      	add	r2, r1
 8003522:	4291      	cmp	r1, r2
 8003524:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8003528:	d100      	bne.n	800352c <memcpy+0xc>
 800352a:	4770      	bx	lr
 800352c:	b510      	push	{r4, lr}
 800352e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003532:	4291      	cmp	r1, r2
 8003534:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003538:	d1f9      	bne.n	800352e <memcpy+0xe>
 800353a:	bd10      	pop	{r4, pc}

0800353c <memmove>:
 800353c:	4288      	cmp	r0, r1
 800353e:	b510      	push	{r4, lr}
 8003540:	eb01 0402 	add.w	r4, r1, r2
 8003544:	d902      	bls.n	800354c <memmove+0x10>
 8003546:	4284      	cmp	r4, r0
 8003548:	4623      	mov	r3, r4
 800354a:	d807      	bhi.n	800355c <memmove+0x20>
 800354c:	1e43      	subs	r3, r0, #1
 800354e:	42a1      	cmp	r1, r4
 8003550:	d008      	beq.n	8003564 <memmove+0x28>
 8003552:	f811 2b01 	ldrb.w	r2, [r1], #1
 8003556:	f803 2f01 	strb.w	r2, [r3, #1]!
 800355a:	e7f8      	b.n	800354e <memmove+0x12>
 800355c:	4601      	mov	r1, r0
 800355e:	4402      	add	r2, r0
 8003560:	428a      	cmp	r2, r1
 8003562:	d100      	bne.n	8003566 <memmove+0x2a>
 8003564:	bd10      	pop	{r4, pc}
 8003566:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800356a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800356e:	e7f7      	b.n	8003560 <memmove+0x24>

08003570 <_free_r>:
 8003570:	b538      	push	{r3, r4, r5, lr}
 8003572:	4605      	mov	r5, r0
 8003574:	2900      	cmp	r1, #0
 8003576:	d040      	beq.n	80035fa <_free_r+0x8a>
 8003578:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800357c:	1f0c      	subs	r4, r1, #4
 800357e:	2b00      	cmp	r3, #0
 8003580:	bfb8      	it	lt
 8003582:	18e4      	addlt	r4, r4, r3
 8003584:	f000 f910 	bl	80037a8 <__malloc_lock>
 8003588:	4a1c      	ldr	r2, [pc, #112]	; (80035fc <_free_r+0x8c>)
 800358a:	6813      	ldr	r3, [r2, #0]
 800358c:	b933      	cbnz	r3, 800359c <_free_r+0x2c>
 800358e:	6063      	str	r3, [r4, #4]
 8003590:	6014      	str	r4, [r2, #0]
 8003592:	4628      	mov	r0, r5
 8003594:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003598:	f000 b90c 	b.w	80037b4 <__malloc_unlock>
 800359c:	42a3      	cmp	r3, r4
 800359e:	d908      	bls.n	80035b2 <_free_r+0x42>
 80035a0:	6820      	ldr	r0, [r4, #0]
 80035a2:	1821      	adds	r1, r4, r0
 80035a4:	428b      	cmp	r3, r1
 80035a6:	bf01      	itttt	eq
 80035a8:	6819      	ldreq	r1, [r3, #0]
 80035aa:	685b      	ldreq	r3, [r3, #4]
 80035ac:	1809      	addeq	r1, r1, r0
 80035ae:	6021      	streq	r1, [r4, #0]
 80035b0:	e7ed      	b.n	800358e <_free_r+0x1e>
 80035b2:	461a      	mov	r2, r3
 80035b4:	685b      	ldr	r3, [r3, #4]
 80035b6:	b10b      	cbz	r3, 80035bc <_free_r+0x4c>
 80035b8:	42a3      	cmp	r3, r4
 80035ba:	d9fa      	bls.n	80035b2 <_free_r+0x42>
 80035bc:	6811      	ldr	r1, [r2, #0]
 80035be:	1850      	adds	r0, r2, r1
 80035c0:	42a0      	cmp	r0, r4
 80035c2:	d10b      	bne.n	80035dc <_free_r+0x6c>
 80035c4:	6820      	ldr	r0, [r4, #0]
 80035c6:	4401      	add	r1, r0
 80035c8:	1850      	adds	r0, r2, r1
 80035ca:	4283      	cmp	r3, r0
 80035cc:	6011      	str	r1, [r2, #0]
 80035ce:	d1e0      	bne.n	8003592 <_free_r+0x22>
 80035d0:	6818      	ldr	r0, [r3, #0]
 80035d2:	685b      	ldr	r3, [r3, #4]
 80035d4:	4401      	add	r1, r0
 80035d6:	6011      	str	r1, [r2, #0]
 80035d8:	6053      	str	r3, [r2, #4]
 80035da:	e7da      	b.n	8003592 <_free_r+0x22>
 80035dc:	d902      	bls.n	80035e4 <_free_r+0x74>
 80035de:	230c      	movs	r3, #12
 80035e0:	602b      	str	r3, [r5, #0]
 80035e2:	e7d6      	b.n	8003592 <_free_r+0x22>
 80035e4:	6820      	ldr	r0, [r4, #0]
 80035e6:	1821      	adds	r1, r4, r0
 80035e8:	428b      	cmp	r3, r1
 80035ea:	bf01      	itttt	eq
 80035ec:	6819      	ldreq	r1, [r3, #0]
 80035ee:	685b      	ldreq	r3, [r3, #4]
 80035f0:	1809      	addeq	r1, r1, r0
 80035f2:	6021      	streq	r1, [r4, #0]
 80035f4:	6063      	str	r3, [r4, #4]
 80035f6:	6054      	str	r4, [r2, #4]
 80035f8:	e7cb      	b.n	8003592 <_free_r+0x22>
 80035fa:	bd38      	pop	{r3, r4, r5, pc}
 80035fc:	20000140 	.word	0x20000140

08003600 <sbrk_aligned>:
 8003600:	b570      	push	{r4, r5, r6, lr}
 8003602:	4e0e      	ldr	r6, [pc, #56]	; (800363c <sbrk_aligned+0x3c>)
 8003604:	460c      	mov	r4, r1
 8003606:	6831      	ldr	r1, [r6, #0]
 8003608:	4605      	mov	r5, r0
 800360a:	b911      	cbnz	r1, 8003612 <sbrk_aligned+0x12>
 800360c:	f000 f8bc 	bl	8003788 <_sbrk_r>
 8003610:	6030      	str	r0, [r6, #0]
 8003612:	4621      	mov	r1, r4
 8003614:	4628      	mov	r0, r5
 8003616:	f000 f8b7 	bl	8003788 <_sbrk_r>
 800361a:	1c43      	adds	r3, r0, #1
 800361c:	d00a      	beq.n	8003634 <sbrk_aligned+0x34>
 800361e:	1cc4      	adds	r4, r0, #3
 8003620:	f024 0403 	bic.w	r4, r4, #3
 8003624:	42a0      	cmp	r0, r4
 8003626:	d007      	beq.n	8003638 <sbrk_aligned+0x38>
 8003628:	1a21      	subs	r1, r4, r0
 800362a:	4628      	mov	r0, r5
 800362c:	f000 f8ac 	bl	8003788 <_sbrk_r>
 8003630:	3001      	adds	r0, #1
 8003632:	d101      	bne.n	8003638 <sbrk_aligned+0x38>
 8003634:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8003638:	4620      	mov	r0, r4
 800363a:	bd70      	pop	{r4, r5, r6, pc}
 800363c:	20000144 	.word	0x20000144

08003640 <_malloc_r>:
 8003640:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003644:	1ccd      	adds	r5, r1, #3
 8003646:	f025 0503 	bic.w	r5, r5, #3
 800364a:	3508      	adds	r5, #8
 800364c:	2d0c      	cmp	r5, #12
 800364e:	bf38      	it	cc
 8003650:	250c      	movcc	r5, #12
 8003652:	2d00      	cmp	r5, #0
 8003654:	4607      	mov	r7, r0
 8003656:	db01      	blt.n	800365c <_malloc_r+0x1c>
 8003658:	42a9      	cmp	r1, r5
 800365a:	d905      	bls.n	8003668 <_malloc_r+0x28>
 800365c:	230c      	movs	r3, #12
 800365e:	2600      	movs	r6, #0
 8003660:	603b      	str	r3, [r7, #0]
 8003662:	4630      	mov	r0, r6
 8003664:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003668:	4e2e      	ldr	r6, [pc, #184]	; (8003724 <_malloc_r+0xe4>)
 800366a:	f000 f89d 	bl	80037a8 <__malloc_lock>
 800366e:	6833      	ldr	r3, [r6, #0]
 8003670:	461c      	mov	r4, r3
 8003672:	bb34      	cbnz	r4, 80036c2 <_malloc_r+0x82>
 8003674:	4629      	mov	r1, r5
 8003676:	4638      	mov	r0, r7
 8003678:	f7ff ffc2 	bl	8003600 <sbrk_aligned>
 800367c:	1c43      	adds	r3, r0, #1
 800367e:	4604      	mov	r4, r0
 8003680:	d14d      	bne.n	800371e <_malloc_r+0xde>
 8003682:	6834      	ldr	r4, [r6, #0]
 8003684:	4626      	mov	r6, r4
 8003686:	2e00      	cmp	r6, #0
 8003688:	d140      	bne.n	800370c <_malloc_r+0xcc>
 800368a:	6823      	ldr	r3, [r4, #0]
 800368c:	4631      	mov	r1, r6
 800368e:	4638      	mov	r0, r7
 8003690:	eb04 0803 	add.w	r8, r4, r3
 8003694:	f000 f878 	bl	8003788 <_sbrk_r>
 8003698:	4580      	cmp	r8, r0
 800369a:	d13a      	bne.n	8003712 <_malloc_r+0xd2>
 800369c:	6821      	ldr	r1, [r4, #0]
 800369e:	3503      	adds	r5, #3
 80036a0:	1a6d      	subs	r5, r5, r1
 80036a2:	f025 0503 	bic.w	r5, r5, #3
 80036a6:	3508      	adds	r5, #8
 80036a8:	2d0c      	cmp	r5, #12
 80036aa:	bf38      	it	cc
 80036ac:	250c      	movcc	r5, #12
 80036ae:	4638      	mov	r0, r7
 80036b0:	4629      	mov	r1, r5
 80036b2:	f7ff ffa5 	bl	8003600 <sbrk_aligned>
 80036b6:	3001      	adds	r0, #1
 80036b8:	d02b      	beq.n	8003712 <_malloc_r+0xd2>
 80036ba:	6823      	ldr	r3, [r4, #0]
 80036bc:	442b      	add	r3, r5
 80036be:	6023      	str	r3, [r4, #0]
 80036c0:	e00e      	b.n	80036e0 <_malloc_r+0xa0>
 80036c2:	6822      	ldr	r2, [r4, #0]
 80036c4:	1b52      	subs	r2, r2, r5
 80036c6:	d41e      	bmi.n	8003706 <_malloc_r+0xc6>
 80036c8:	2a0b      	cmp	r2, #11
 80036ca:	d916      	bls.n	80036fa <_malloc_r+0xba>
 80036cc:	1961      	adds	r1, r4, r5
 80036ce:	42a3      	cmp	r3, r4
 80036d0:	6025      	str	r5, [r4, #0]
 80036d2:	bf18      	it	ne
 80036d4:	6059      	strne	r1, [r3, #4]
 80036d6:	6863      	ldr	r3, [r4, #4]
 80036d8:	bf08      	it	eq
 80036da:	6031      	streq	r1, [r6, #0]
 80036dc:	5162      	str	r2, [r4, r5]
 80036de:	604b      	str	r3, [r1, #4]
 80036e0:	4638      	mov	r0, r7
 80036e2:	f104 060b 	add.w	r6, r4, #11
 80036e6:	f000 f865 	bl	80037b4 <__malloc_unlock>
 80036ea:	f026 0607 	bic.w	r6, r6, #7
 80036ee:	1d23      	adds	r3, r4, #4
 80036f0:	1af2      	subs	r2, r6, r3
 80036f2:	d0b6      	beq.n	8003662 <_malloc_r+0x22>
 80036f4:	1b9b      	subs	r3, r3, r6
 80036f6:	50a3      	str	r3, [r4, r2]
 80036f8:	e7b3      	b.n	8003662 <_malloc_r+0x22>
 80036fa:	6862      	ldr	r2, [r4, #4]
 80036fc:	42a3      	cmp	r3, r4
 80036fe:	bf0c      	ite	eq
 8003700:	6032      	streq	r2, [r6, #0]
 8003702:	605a      	strne	r2, [r3, #4]
 8003704:	e7ec      	b.n	80036e0 <_malloc_r+0xa0>
 8003706:	4623      	mov	r3, r4
 8003708:	6864      	ldr	r4, [r4, #4]
 800370a:	e7b2      	b.n	8003672 <_malloc_r+0x32>
 800370c:	4634      	mov	r4, r6
 800370e:	6876      	ldr	r6, [r6, #4]
 8003710:	e7b9      	b.n	8003686 <_malloc_r+0x46>
 8003712:	230c      	movs	r3, #12
 8003714:	4638      	mov	r0, r7
 8003716:	603b      	str	r3, [r7, #0]
 8003718:	f000 f84c 	bl	80037b4 <__malloc_unlock>
 800371c:	e7a1      	b.n	8003662 <_malloc_r+0x22>
 800371e:	6025      	str	r5, [r4, #0]
 8003720:	e7de      	b.n	80036e0 <_malloc_r+0xa0>
 8003722:	bf00      	nop
 8003724:	20000140 	.word	0x20000140

08003728 <_realloc_r>:
 8003728:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800372c:	4680      	mov	r8, r0
 800372e:	4614      	mov	r4, r2
 8003730:	460e      	mov	r6, r1
 8003732:	b921      	cbnz	r1, 800373e <_realloc_r+0x16>
 8003734:	4611      	mov	r1, r2
 8003736:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800373a:	f7ff bf81 	b.w	8003640 <_malloc_r>
 800373e:	b92a      	cbnz	r2, 800374c <_realloc_r+0x24>
 8003740:	f7ff ff16 	bl	8003570 <_free_r>
 8003744:	4625      	mov	r5, r4
 8003746:	4628      	mov	r0, r5
 8003748:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800374c:	f000 f838 	bl	80037c0 <_malloc_usable_size_r>
 8003750:	4284      	cmp	r4, r0
 8003752:	4607      	mov	r7, r0
 8003754:	d802      	bhi.n	800375c <_realloc_r+0x34>
 8003756:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800375a:	d812      	bhi.n	8003782 <_realloc_r+0x5a>
 800375c:	4621      	mov	r1, r4
 800375e:	4640      	mov	r0, r8
 8003760:	f7ff ff6e 	bl	8003640 <_malloc_r>
 8003764:	4605      	mov	r5, r0
 8003766:	2800      	cmp	r0, #0
 8003768:	d0ed      	beq.n	8003746 <_realloc_r+0x1e>
 800376a:	42bc      	cmp	r4, r7
 800376c:	4622      	mov	r2, r4
 800376e:	4631      	mov	r1, r6
 8003770:	bf28      	it	cs
 8003772:	463a      	movcs	r2, r7
 8003774:	f7ff fed4 	bl	8003520 <memcpy>
 8003778:	4631      	mov	r1, r6
 800377a:	4640      	mov	r0, r8
 800377c:	f7ff fef8 	bl	8003570 <_free_r>
 8003780:	e7e1      	b.n	8003746 <_realloc_r+0x1e>
 8003782:	4635      	mov	r5, r6
 8003784:	e7df      	b.n	8003746 <_realloc_r+0x1e>
	...

08003788 <_sbrk_r>:
 8003788:	b538      	push	{r3, r4, r5, lr}
 800378a:	2300      	movs	r3, #0
 800378c:	4d05      	ldr	r5, [pc, #20]	; (80037a4 <_sbrk_r+0x1c>)
 800378e:	4604      	mov	r4, r0
 8003790:	4608      	mov	r0, r1
 8003792:	602b      	str	r3, [r5, #0]
 8003794:	f7fd fc58 	bl	8001048 <_sbrk>
 8003798:	1c43      	adds	r3, r0, #1
 800379a:	d102      	bne.n	80037a2 <_sbrk_r+0x1a>
 800379c:	682b      	ldr	r3, [r5, #0]
 800379e:	b103      	cbz	r3, 80037a2 <_sbrk_r+0x1a>
 80037a0:	6023      	str	r3, [r4, #0]
 80037a2:	bd38      	pop	{r3, r4, r5, pc}
 80037a4:	20000148 	.word	0x20000148

080037a8 <__malloc_lock>:
 80037a8:	4801      	ldr	r0, [pc, #4]	; (80037b0 <__malloc_lock+0x8>)
 80037aa:	f000 b811 	b.w	80037d0 <__retarget_lock_acquire_recursive>
 80037ae:	bf00      	nop
 80037b0:	2000014c 	.word	0x2000014c

080037b4 <__malloc_unlock>:
 80037b4:	4801      	ldr	r0, [pc, #4]	; (80037bc <__malloc_unlock+0x8>)
 80037b6:	f000 b80c 	b.w	80037d2 <__retarget_lock_release_recursive>
 80037ba:	bf00      	nop
 80037bc:	2000014c 	.word	0x2000014c

080037c0 <_malloc_usable_size_r>:
 80037c0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80037c4:	1f18      	subs	r0, r3, #4
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	bfbc      	itt	lt
 80037ca:	580b      	ldrlt	r3, [r1, r0]
 80037cc:	18c0      	addlt	r0, r0, r3
 80037ce:	4770      	bx	lr

080037d0 <__retarget_lock_acquire_recursive>:
 80037d0:	4770      	bx	lr

080037d2 <__retarget_lock_release_recursive>:
 80037d2:	4770      	bx	lr

080037d4 <_init>:
 80037d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80037d6:	bf00      	nop
 80037d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80037da:	bc08      	pop	{r3}
 80037dc:	469e      	mov	lr, r3
 80037de:	4770      	bx	lr

080037e0 <_fini>:
 80037e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80037e2:	bf00      	nop
 80037e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80037e6:	bc08      	pop	{r3}
 80037e8:	469e      	mov	lr, r3
 80037ea:	4770      	bx	lr
